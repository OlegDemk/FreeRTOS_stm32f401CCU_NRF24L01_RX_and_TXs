
NRF24L01_RX_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006310  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b30  20000090  08006648  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc0  08006648  00024bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b840  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035de  00000000  00000000  0003b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00040510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b69  00000000  00000000  00041a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176ec  00000000  00000000  00045581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3c6  00000000  00000000  0005cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000613c  00000000  00000000  000f7084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006498 	.word	0x08006498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006498 	.word	0x08006498

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fe88 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f826 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8ee 	bl	80006d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004f4:	f000 f88c 	bl	8000610 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f8c0 	bl	800067c <MX_USART1_UART_Init>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f002 ffd8 	bl	80034b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 8000500:	4a09      	ldr	r2, [pc, #36]	; (8000528 <main+0x44>)
 8000502:	2101      	movs	r1, #1
 8000504:	2001      	movs	r0, #1
 8000506:	f003 f8ca 	bl	800369e <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x48>)
 800050e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <main+0x4c>)
 8000512:	2100      	movs	r1, #0
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0x50>)
 8000516:	f003 f815 	bl	8003544 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <main+0x54>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f002 ffea 	bl	80034f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x40>
 8000526:	bf00      	nop
 8000528:	08006520 	.word	0x08006520
 800052c:	2000014c 	.word	0x2000014c
 8000530:	080064fc 	.word	0x080064fc
 8000534:	08000805 	.word	0x08000805
 8000538:	20000148 	.word	0x20000148

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 feda 	bl	8006304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b0:	2319      	movs	r3, #25
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f931 	bl	800182c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f944 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fb93 	bl	8001d1c <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f92e 	bl	800085c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_SPI2_Init+0x64>)
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_SPI2_Init+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_SPI2_Init+0x64>)
 800061c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SPI2_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_SPI2_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SPI2_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SPI2_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SPI2_Init+0x64>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SPI2_Init+0x64>)
 8000644:	2208      	movs	r2, #8
 8000646:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_SPI2_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_SPI2_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_SPI2_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_SPI2_Init+0x64>)
 800065c:	220a      	movs	r2, #10
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_SPI2_Init+0x64>)
 8000662:	f001 fd6d 	bl	8002140 <HAL_SPI_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 f8f6 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000ac 	.word	0x200000ac
 8000678:	40003800 	.word	0x40003800

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f002 fbf6 	bl	8002ea4 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8cd 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000104 	.word	0x20000104
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <MX_GPIO_Init+0x124>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a41      	ldr	r2, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x124>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <MX_GPIO_Init+0x124>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a3a      	ldr	r2, [pc, #232]	; (80007f4 <MX_GPIO_Init+0x124>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0x124>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0x124>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <MX_GPIO_Init+0x128>)
 800075e:	f001 f80d 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2118      	movs	r1, #24
 8000766:	4825      	ldr	r0, [pc, #148]	; (80007fc <MX_GPIO_Init+0x12c>)
 8000768:	f001 f808 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	481c      	ldr	r0, [pc, #112]	; (80007f8 <MX_GPIO_Init+0x128>)
 8000786:	f000 fe5d 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 800078a:	2304      	movs	r3, #4
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <MX_GPIO_Init+0x12c>)
 80007a0:	f000 fe50 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 80007a4:	2318      	movs	r3, #24
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_GPIO_Init+0x12c>)
 80007bc:	f000 fe42 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_GPIO_Init+0x130>)
 80007d6:	f000 fe35 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	2008      	movs	r0, #8
 80007e0:	f000 fe06 	bl	80013f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007e4:	2008      	movs	r0, #8
 80007e6:	f000 fe1f 	bl	8001428 <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af02      	add	r7, sp, #8
 800080a:	6078      	str	r0, [r7, #4]
		2. - Physical channel				( from 0 to 127 )
		3. - Retransmit delay				( from 250 us to 4000 us )   (from 0 to 15)
		4. - retransmit attempt				( from 1 to 15 )
		5. - Data rate						( 250kbs, 1Mbs, 2Mbs )
	*/
	NRF24_init_TX(5, 76, nRF24_ARD_500us, nRF24_TXARC_15, nRF24_DR_2Mbps, nRF24_TXPWR_0dBm);				// Налаштування: які канали відкрити, частота передачі, кількість ретрансмітів....
 800080c:	2306      	movs	r3, #6
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2308      	movs	r3, #8
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	230f      	movs	r3, #15
 8000816:	2201      	movs	r2, #1
 8000818:	214c      	movs	r1, #76	; 0x4c
 800081a:	2005      	movs	r0, #5
 800081c:	f000 f9ac 	bl	8000b78 <NRF24_init_TX>
	  // testReadWriteSetingd();
//	  NRF24L01_Receive();
	//  osDelay(1);


	  NRF24L01_Transmit(TX_ADDRESS_5, "1234567890ABCDEFGH");
 8000820:	4903      	ldr	r1, [pc, #12]	; (8000830 <StartDefaultTask+0x2c>)
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <StartDefaultTask+0x30>)
 8000824:	f000 fc68 	bl	80010f8 <NRF24L01_Transmit>
	  osDelay(20);
 8000828:	2014      	movs	r0, #20
 800082a:	f002 ff1d 	bl	8003668 <osDelay>
	  NRF24L01_Transmit(TX_ADDRESS_5, "1234567890ABCDEFGH");
 800082e:	e7f7      	b.n	8000820 <StartDefaultTask+0x1c>
 8000830:	080064d0 	.word	0x080064d0
 8000834:	20000018 	.word	0x20000018

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d101      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084a:	f000 fcf9 	bl	8001240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40014400 	.word	0x40014400

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_MspInit+0x54>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_MspInit+0x54>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_MspInit+0x54>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_MspInit+0x54>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fd9f 	bl	80013f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_SPI_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12c      	bne.n	800093c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_SPI_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_SPI_MspInit+0x88>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_SPI_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_SPI_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_SPI_MspInit+0x88>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_SPI_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800091a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092c:	2305      	movs	r3, #5
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_SPI_MspInit+0x8c>)
 8000938:	f000 fd84 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40003800 	.word	0x40003800
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12c      	bne.n	80009cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009bc:	2307      	movs	r3, #7
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009c8:	f000 fd3c 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40011000 	.word	0x40011000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <HAL_InitTick+0xd0>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <HAL_InitTick+0xd0>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	6453      	str	r3, [r2, #68]	; 0x44
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <HAL_InitTick+0xd0>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 020c 	add.w	r2, r7, #12
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fb60 	bl	80020dc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a1c:	f001 fb4a 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8000a20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_InitTick+0xdc>)
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a58:	f001 ffa4 	bl	80029a4 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d11b      	bne.n	8000aa2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a6c:	f001 fff4 	bl	8002a58 <HAL_TIM_Base_Start_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d111      	bne.n	8000aa2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a7e:	2019      	movs	r0, #25
 8000a80:	f000 fcd2 	bl	8001428 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d808      	bhi.n	8000a9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fcae 	bl	80013f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0xe0>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e002      	b.n	8000aa2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	20000150 	.word	0x20000150
 8000abc:	40014400 	.word	0x40014400
 8000ac0:	20000020 	.word	0x20000020

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f000 fe75 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f002 f809 	bl	8002b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000150 	.word	0x20000150

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <DelayMicro>:
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes);
void print_Data_Ower_uart(uint8_t *RX_BUF, uint8_t *pipe);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <DelayMicro+0x38>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	099b      	lsrs	r3, r3, #6
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <DelayMicro+0x3c>)
 8000b48:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4c:	0a9b      	lsrs	r3, r3, #10
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	fb02 f303 	mul.w	r3, r2, r3
 8000b54:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 8000b56:	bf00      	nop
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1fa      	bne.n	8000b58 <DelayMicro+0x20>
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000000 	.word	0x20000000
 8000b74:	02659117 	.word	0x02659117

08000b78 <NRF24_init_TX>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_init_TX(uint8_t pipe, uint8_t chanel, uint8_t retrans_delay, uint8_t retransmit_attempt, uint8_t data_rate, uint8_t output_tx_power)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	717b      	strb	r3, [r7, #5]
 8000b92:	4613      	mov	r3, r2
 8000b94:	713b      	strb	r3, [r7, #4]
	if(chanel < 0 || chanel > 127)
 8000b96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da01      	bge.n	8000ba2 <NRF24_init_TX+0x2a>
	{
		chanel = 10;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	71bb      	strb	r3, [r7, #6]
	}

	CE_RESET;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	485a      	ldr	r0, [pc, #360]	; (8000d10 <NRF24_init_TX+0x198>)
 8000ba8:	f000 fde8 	bl	800177c <HAL_GPIO_WritePin>
	osDelay(5);
 8000bac:	2005      	movs	r0, #5
 8000bae:	f002 fd5b 	bl	8003668 <osDelay>
	NRF24_WriteReg(CONFIG, 0x0A); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000bb2:	210a      	movs	r1, #10
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f8ef 	bl	8000d98 <NRF24_WriteReg>
	osDelay(5);
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f002 fd54 	bl	8003668 <osDelay>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 f8e8 	bl	8000d98 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 f8e4 	bl	8000d98 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f8e0 	bl	8000d98 <NRF24_WriteReg>

	uint8_t SETUP_RETR_data = (retrans_delay << 4) | (retransmit_attempt);
 8000bd8:	797b      	ldrb	r3, [r7, #5]
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	73fb      	strb	r3, [r7, #15]
	NRF24_WriteReg(SETUP_RETR, SETUP_RETR_data);		// 1500us, 15 retrans
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2004      	movs	r0, #4
 8000bee:	f000 f8d3 	bl	8000d98 <NRF24_WriteReg>

	NRF24_ToggleFeatures();
 8000bf2:	f000 f8ff 	bl	8000df4 <NRF24_ToggleFeatures>

	NRF24_WriteReg(FEATURE, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	201d      	movs	r0, #29
 8000bfa:	f000 f8cd 	bl	8000d98 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	201c      	movs	r0, #28
 8000c02:	f000 f8c9 	bl	8000d98 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 8000c06:	2170      	movs	r1, #112	; 0x70
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f000 f8c5 	bl	8000d98 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, chanel); 			// 2400 + chanel MHz
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	4619      	mov	r1, r3
 8000c12:	2005      	movs	r0, #5
 8000c14:	f000 f8c0 	bl	8000d98 <NRF24_WriteReg>


	NRF24_WriteReg(RF_SETUP, data_rate|output_tx_power);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version
 8000c18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	2006      	movs	r0, #6
 8000c28:	f000 f8b6 	bl	8000d98 <NRF24_WriteReg>

	if(pipe == 0)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10d      	bne.n	8000c4e <NRF24_init_TX+0xd6>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);											// Write TX address
 8000c32:	2203      	movs	r2, #3
 8000c34:	4937      	ldr	r1, [pc, #220]	; (8000d14 <NRF24_init_TX+0x19c>)
 8000c36:	2010      	movs	r0, #16
 8000c38:	f000 f906 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4935      	ldr	r1, [pc, #212]	; (8000d14 <NRF24_init_TX+0x19c>)
 8000c40:	200a      	movs	r0, #10
 8000c42:	f000 f901 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000c46:	2120      	movs	r1, #32
 8000c48:	2011      	movs	r0, #17
 8000c4a:	f000 f8a5 	bl	8000d98 <NRF24_WriteReg>
	}
	if(pipe == 1)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10d      	bne.n	8000c70 <NRF24_init_TX+0xf8>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_1, TX_ADR_WIDTH);											// Write TX address
 8000c54:	2203      	movs	r2, #3
 8000c56:	4930      	ldr	r1, [pc, #192]	; (8000d18 <NRF24_init_TX+0x1a0>)
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 f8f5 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_1, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000c5e:	2203      	movs	r2, #3
 8000c60:	492d      	ldr	r1, [pc, #180]	; (8000d18 <NRF24_init_TX+0x1a0>)
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 f8f0 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	2011      	movs	r0, #17
 8000c6c:	f000 f894 	bl	8000d98 <NRF24_WriteReg>
	}
	if(pipe == 2)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d10d      	bne.n	8000c92 <NRF24_init_TX+0x11a>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_2, TX_ADR_WIDTH);											// Write TX address
 8000c76:	2203      	movs	r2, #3
 8000c78:	4928      	ldr	r1, [pc, #160]	; (8000d1c <NRF24_init_TX+0x1a4>)
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f000 f8e4 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_2, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000c80:	2203      	movs	r2, #3
 8000c82:	4926      	ldr	r1, [pc, #152]	; (8000d1c <NRF24_init_TX+0x1a4>)
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 f8df 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	2011      	movs	r0, #17
 8000c8e:	f000 f883 	bl	8000d98 <NRF24_WriteReg>
	}
	if(pipe == 3)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d10d      	bne.n	8000cb4 <NRF24_init_TX+0x13c>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_3, TX_ADR_WIDTH);											// Write TX address
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4921      	ldr	r1, [pc, #132]	; (8000d20 <NRF24_init_TX+0x1a8>)
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	f000 f8d3 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_3, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	491e      	ldr	r1, [pc, #120]	; (8000d20 <NRF24_init_TX+0x1a8>)
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 f8ce 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000cac:	2120      	movs	r1, #32
 8000cae:	2011      	movs	r0, #17
 8000cb0:	f000 f872 	bl	8000d98 <NRF24_WriteReg>
	}

	if(pipe == 4)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d10d      	bne.n	8000cd6 <NRF24_init_TX+0x15e>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_4, TX_ADR_WIDTH);											// Write TX address
 8000cba:	2203      	movs	r2, #3
 8000cbc:	4919      	ldr	r1, [pc, #100]	; (8000d24 <NRF24_init_TX+0x1ac>)
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f000 f8c2 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_4, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4917      	ldr	r1, [pc, #92]	; (8000d24 <NRF24_init_TX+0x1ac>)
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 f8bd 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000cce:	2120      	movs	r1, #32
 8000cd0:	2011      	movs	r0, #17
 8000cd2:	f000 f861 	bl	8000d98 <NRF24_WriteReg>
	}

	if(pipe == 5)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b05      	cmp	r3, #5
 8000cda:	d10d      	bne.n	8000cf8 <NRF24_init_TX+0x180>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_5, TX_ADR_WIDTH);											// Write TX address
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4912      	ldr	r1, [pc, #72]	; (8000d28 <NRF24_init_TX+0x1b0>)
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f000 f8b1 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_5, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	490f      	ldr	r1, [pc, #60]	; (8000d28 <NRF24_init_TX+0x1b0>)
 8000cea:	200a      	movs	r0, #10
 8000cec:	f000 f8ac 	bl	8000e48 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	2011      	movs	r0, #17
 8000cf4:	f000 f850 	bl	8000d98 <NRF24_WriteReg>
	}

	 NRF24L01_RX_Mode();
 8000cf8:	f000 f91c 	bl	8000f34 <NRF24L01_RX_Mode>
	 LED_OFF;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <NRF24_init_TX+0x1b4>)
 8000d04:	f000 fd3a 	bl	800177c <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000010 	.word	0x20000010
 8000d24:	20000014 	.word	0x20000014
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	40020800 	.word	0x40020800

08000d30 <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <NRF24_ReadReg+0x60>)
 8000d44:	f000 fd1a 	bl	800177c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8000d48:	f107 020f 	add.w	r2, r7, #15
 8000d4c:	1df9      	adds	r1, r7, #7
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <NRF24_ReadReg+0x64>)
 8000d58:	f001 fbb7 	bl	80024ca <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d00c      	beq.n	8000d7c <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 8000d62:	23ff      	movs	r3, #255	; 0xff
 8000d64:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8000d66:	f107 020f 	add.w	r2, r7, #15
 8000d6a:	f107 010e 	add.w	r1, r7, #14
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <NRF24_ReadReg+0x64>)
 8000d78:	f001 fba7 	bl	80024ca <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <NRF24_ReadReg+0x60>)
 8000d82:	f000 fcfb 	bl	800177c <HAL_GPIO_WritePin>

	return dt;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40020000 	.word	0x40020000
 8000d94:	200000ac 	.word	0x200000ac

08000d98 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f043 0320 	orr.w	r3, r3, #32
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <NRF24_WriteReg+0x54>)
 8000db8:	f000 fce0 	bl	800177c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8000dbc:	1df9      	adds	r1, r7, #7
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <NRF24_WriteReg+0x58>)
 8000dc6:	f001 fa44 	bl	8002252 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 8000dca:	1db9      	adds	r1, r7, #6
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4807      	ldr	r0, [pc, #28]	; (8000df0 <NRF24_WriteReg+0x58>)
 8000dd4:	f001 fa3d 	bl	8002252 <HAL_SPI_Transmit>

	CS_OFF;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <NRF24_WriteReg+0x54>)
 8000dde:	f000 fccd 	bl	800177c <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40020000 	.word	0x40020000
 8000df0:	200000ac 	.word	0x200000ac

08000df4 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8000dfa:	2350      	movs	r3, #80	; 0x50
 8000dfc:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2110      	movs	r1, #16
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <NRF24_ToggleFeatures+0x4c>)
 8000e04:	f000 fcba 	bl	800177c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	2201      	movs	r2, #1
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <NRF24_ToggleFeatures+0x50>)
 8000e12:	f001 fa1e 	bl	8002252 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fe8e 	bl	8000b38 <DelayMicro>

	dt[0] = 0x73;
 8000e1c:	2373      	movs	r3, #115	; 0x73
 8000e1e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000e20:	1d39      	adds	r1, r7, #4
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	2201      	movs	r2, #1
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <NRF24_ToggleFeatures+0x50>)
 8000e2a:	f001 fa12 	bl	8002252 <HAL_SPI_Transmit>
	CS_OFF;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <NRF24_ToggleFeatures+0x4c>)
 8000e34:	f000 fca2 	bl	800177c <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020000 	.word	0x40020000
 8000e44:	200000ac 	.word	0x200000ac

08000e48 <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f043 0320 	orr.w	r3, r3, #32
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <NRF24_Write_Buf+0x5c>)
 8000e68:	f000 fc88 	bl	800177c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8000e6c:	1df9      	adds	r1, r7, #7
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	2201      	movs	r2, #1
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <NRF24_Write_Buf+0x60>)
 8000e76:	f001 f9ec 	bl	8002252 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff fe5c 	bl	8000b38 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <NRF24_Write_Buf+0x60>)
 8000e8c:	f001 f9e1 	bl	8002252 <HAL_SPI_Transmit>

	CS_OFF;
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <NRF24_Write_Buf+0x5c>)
 8000e96:	f000 fc71 	bl	800177c <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	200000ac 	.word	0x200000ac

08000eac <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8000eb2:	23e2      	movs	r3, #226	; 0xe2
 8000eb4:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <NRF24_FlushRX+0x3c>)
 8000ebc:	f000 fc5e 	bl	800177c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <NRF24_FlushRX+0x40>)
 8000eca:	f001 f9c2 	bl	8002252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fe32 	bl	8000b38 <DelayMicro>
	CS_OFF;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <NRF24_FlushRX+0x3c>)
 8000eda:	f000 fc4f 	bl	800177c <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	200000ac 	.word	0x200000ac

08000ef0 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8000ef6:	23e1      	movs	r3, #225	; 0xe1
 8000ef8:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <NRF24_FlushTX+0x3c>)
 8000f00:	f000 fc3c 	bl	800177c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000f04:	1d39      	adds	r1, r7, #4
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <NRF24_FlushTX+0x40>)
 8000f0e:	f001 f9a0 	bl	8002252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fe10 	bl	8000b38 <DelayMicro>
	CS_OFF;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <NRF24_FlushTX+0x3c>)
 8000f1e:	f000 fc2d 	bl	800177c <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fef6 	bl	8000d30 <NRF24_ReadReg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f043 0303 	orr.w	r3, r3, #3
 8000f4e:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4619      	mov	r1, r3
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff1f 	bl	8000d98 <NRF24_WriteReg>
	CE_SET;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <NRF24L01_RX_Mode+0x48>)
 8000f60:	f000 fc0c 	bl	800177c <HAL_GPIO_WritePin>

	DelayMicro(150);
 8000f64:	2096      	movs	r0, #150	; 0x96
 8000f66:	f7ff fde7 	bl	8000b38 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8000f6a:	f7ff ff9f 	bl	8000eac <NRF24_FlushRX>
	NRF24_FlushTX();
 8000f6e:	f7ff ffbf 	bl	8000ef0 <NRF24_FlushTX>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020000 	.word	0x40020000

08000f80 <NRF24L01_TX_Mode>:
	//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	DelayMicro(1000);
}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf, uint8_t *pipe_address)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	NRF24_Write_Buf(TX_ADDR, pipe_address, TX_ADR_WIDTH);
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	2010      	movs	r0, #16
 8000f90:	f7ff ff5a 	bl	8000e48 <NRF24_Write_Buf>
	CE_RESET;
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <NRF24L01_TX_Mode+0x30>)
 8000f9a:	f000 fbef 	bl	800177c <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 8000f9e:	f7ff ff85 	bl	8000eac <NRF24_FlushRX>
	NRF24_FlushTX();
 8000fa2:	f7ff ffa5 	bl	8000ef0 <NRF24_FlushTX>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4813      	ldr	r0, [pc, #76]	; (8001018 <NRF24_Transmit+0x64>)
 8000fca:	f000 fbd7 	bl	800177c <HAL_GPIO_WritePin>
	CS_ON;
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <NRF24_Transmit+0x64>)
 8000fd4:	f000 fbd2 	bl	800177c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 8000fd8:	1df9      	adds	r1, r7, #7
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	2201      	movs	r2, #1
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <NRF24_Transmit+0x68>)
 8000fe2:	f001 f936 	bl	8002252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff fda6 	bl	8000b38 <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <NRF24_Transmit+0x68>)
 8000ff8:	f001 f92b 	bl	8002252 <HAL_SPI_Transmit>

	CS_OFF;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <NRF24_Transmit+0x64>)
 8001002:	f000 fbbb 	bl	800177c <HAL_GPIO_WritePin>
	CE_SET;
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <NRF24_Transmit+0x64>)
 800100c:	f000 fbb6 	bl	800177c <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020000 	.word	0x40020000
 800101c:	200000ac 	.word	0x200000ac

08001020 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf, uint8_t *pipe_address)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	uint8_t status=0x00, regval=0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
	// Debug
//	uint8_t test_addr_buff[3] = {0};
//	memcpy(test_addr_buff, pipe_address, 3);      // (uint8_t*)&
	////////////////////////////////////////////////////////////////////

	NRF24L01_TX_Mode(pBuf, pipe_address);		// баг: не передається в функцію адрес
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffa3 	bl	8000f80 <NRF24L01_TX_Mode>

	regval = NRF24_ReadReg(CONFIG);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fe78 	bl	8000d30 <NRF24_ReadReg>
 8001040:	4603      	mov	r3, r0
 8001042:	73bb      	strb	r3, [r7, #14]
	regval |= (1<<PWR_UP);
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);							// Turn on TX mode
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	73bb      	strb	r3, [r7, #14]

	NRF24_WriteReg(CONFIG,regval);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	4619      	mov	r1, r3
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fe9d 	bl	8000d98 <NRF24_WriteReg>
	DelayMicro(150);
 800105e:	2096      	movs	r0, #150	; 0x96
 8001060:	f7ff fd6a 	bl	8000b38 <DelayMicro>

	//	uint8_t dt_reg = NRF24_ReadReg(CONFIG);				// For debug

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 8001064:	2220      	movs	r2, #32
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	20a0      	movs	r0, #160	; 0xa0
 800106a:	f7ff ffa3 	bl	8000fb4 <NRF24_Transmit>
	CE_SET;
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	481f      	ldr	r0, [pc, #124]	; (80010f0 <NRF24L01_Send+0xd0>)
 8001074:	f000 fb82 	bl	800177c <HAL_GPIO_WritePin>
	DelayMicro(15); 			// minimum 10us high pulse (Page 21)
 8001078:	200f      	movs	r0, #15
 800107a:	f7ff fd5d 	bl	8000b38 <DelayMicro>
	CE_RESET;
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	481b      	ldr	r0, [pc, #108]	; (80010f0 <NRF24L01_Send+0xd0>)
 8001084:	f000 fb7a 	bl	800177c <HAL_GPIO_WritePin>
	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8001088:	bf00      	nop
 800108a:	2104      	movs	r1, #4
 800108c:	4818      	ldr	r0, [pc, #96]	; (80010f0 <NRF24L01_Send+0xd0>)
 800108e:	f000 fb5d 	bl	800174c <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d0f8      	beq.n	800108a <NRF24L01_Send+0x6a>

	status = NRF24_ReadReg(STATUS);
 8001098:	2007      	movs	r0, #7
 800109a:	f7ff fe49 	bl	8000d30 <NRF24_ReadReg>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if(status&TX_DS) 			//tx_ds == 0x20   If data was transmitted
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d009      	beq.n	80010c0 <NRF24L01_Send+0xa0>
	{
		LED_TGL;							// Blink LED for show that data was transmeeted
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <NRF24L01_Send+0xd4>)
 80010b2:	f000 fb7c 	bl	80017ae <HAL_GPIO_TogglePin>
		NRF24_WriteReg(STATUS, 0x20);
 80010b6:	2120      	movs	r1, #32
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff fe6d 	bl	8000d98 <NRF24_WriteReg>
 80010be:	e00a      	b.n	80010d6 <NRF24L01_Send+0xb6>
	}
	else if(status&MAX_RT)		// Maximum number of TX retransmits interrupt (lost )
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <NRF24L01_Send+0xb6>
	{
		NRF24_WriteReg(STATUS, 0x10);
 80010ca:	2110      	movs	r1, #16
 80010cc:	2007      	movs	r0, #7
 80010ce:	f7ff fe63 	bl	8000d98 <NRF24_WriteReg>
		NRF24_FlushTX();
 80010d2:	f7ff ff0d 	bl	8000ef0 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 80010d6:	2008      	movs	r0, #8
 80010d8:	f7ff fe2a 	bl	8000d30 <NRF24_ReadReg>
 80010dc:	4603      	mov	r3, r0
 80010de:	73bb      	strb	r3, [r7, #14]
	NRF24L01_RX_Mode();
 80010e0:	f7ff ff28 	bl	8000f34 <NRF24L01_RX_Mode>

	return regval;
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020800 	.word	0x40020800

080010f8 <NRF24L01_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24L01_Transmit(uint8_t *pipe_address, char *data[])				// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,, ДОДАТИ ДАНІ 18 байт
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b090      	sub	sp, #64	; 0x40
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint8_t buf1[50] = {0};
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	222e      	movs	r2, #46	; 0x2e
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f005 f8f8 	bl	8006304 <memset>
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <NRF24L01_Transmit+0x9c>)
 8001116:	681b      	ldr	r3, [r3, #0]
	static uint16_t retr_cnt, dt;
	static uint32_t i=1, retr_cnt_full;
	static uint32_t cnt_lost = 0;

	// Fill in first three uint36_t payload
	memcpy(buf1,(uint8_t*)&i,4);						// Counter transmitted packets
 8001118:	60fb      	str	r3, [r7, #12]
	memcpy(buf1+4,(uint8_t*)&retr_cnt_full,4);			// Counter retransmitted packets
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	3304      	adds	r3, #4
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <NRF24L01_Transmit+0xa0>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	601a      	str	r2, [r3, #0]
	memcpy(buf1+8,(uint8_t*)&cnt_lost,4);				// Counter lost packets
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	3308      	adds	r3, #8
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <NRF24L01_Transmit+0xa4>)
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	601a      	str	r2, [r3, #0]

	// after first 12 bytes can be add payload
	memcpy(buf1+12, data, 18);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	330c      	adds	r3, #12
 8001138:	2212      	movs	r2, #18
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f005 f8d3 	bl	80062e8 <memcpy>


	dt = NRF24L01_Send(buf1, pipe_address);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff69 	bl	8001020 <NRF24L01_Send>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <NRF24L01_Transmit+0xa8>)
 8001154:	801a      	strh	r2, [r3, #0]

	retr_cnt = dt & 0x0F;
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <NRF24L01_Transmit+0xa8>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <NRF24L01_Transmit+0xac>)
 8001162:	801a      	strh	r2, [r3, #0]
	retr_cnt_full += retr_cnt;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <NRF24L01_Transmit+0xac>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <NRF24L01_Transmit+0xa0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <NRF24L01_Transmit+0xa0>)
 8001172:	6013      	str	r3, [r2, #0]
	cnt_lost = dt >> 4;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <NRF24L01_Transmit+0xa8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <NRF24L01_Transmit+0xa4>)
 8001180:	601a      	str	r2, [r3, #0]
	i++;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <NRF24L01_Transmit+0x9c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a02      	ldr	r2, [pc, #8]	; (8001194 <NRF24L01_Transmit+0x9c>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	; 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000001c 	.word	0x2000001c
 8001198:	20000198 	.word	0x20000198
 800119c:	2000019c 	.word	0x2000019c
 80011a0:	200001a0 	.word	0x200001a0
 80011a4:	200001a2 	.word	0x200001a2

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d2:	f7ff fc9f 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f005 f861 	bl	800629c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff f983 	bl	80004e4 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011ec:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 80011f0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011f4:	20004bc0 	.word	0x20004bc0

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f8d8 	bl	80013da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	200f      	movs	r0, #15
 800122c:	f7ff fbd8 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fb1a 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000024 	.word	0x20000024
 8001264:	200001a4 	.word	0x200001a4

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200001a4 	.word	0x200001a4

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff4c 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff61 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ffb1 	bl	8001374 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff80 	bl	8001320 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff54 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e159      	b.n	8001714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8148 	bne.w	800170e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d005      	beq.n	8001496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	2b02      	cmp	r3, #2
 8001494:	d130      	bne.n	80014f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 0201 	and.w	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b03      	cmp	r3, #3
 8001502:	d017      	beq.n	8001534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a2 	beq.w	800170e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a56      	ldr	r2, [pc, #344]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a49      	ldr	r2, [pc, #292]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x202>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2f4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x1fe>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2f8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x1fa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x1f6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x300>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x1f2>
 8001632:	2304      	movs	r3, #4
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001636:	2307      	movs	r3, #7
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168a:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f aea2 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	400b      	ands	r3, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f806 	bl	8001814 <HAL_GPIO_EXTI_Callback>
  }
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40013c00 	.word	0x40013c00

08001814 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e267      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d075      	beq.n	8001936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184a:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00c      	beq.n	8001870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b85      	ldr	r3, [pc, #532]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d112      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b82      	ldr	r3, [pc, #520]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d05b      	beq.n	8001934 <HAL_RCC_OscConfig+0x108>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d157      	bne.n	8001934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e242      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d106      	bne.n	80018a0 <HAL_RCC_OscConfig+0x74>
 8001892:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6f      	ldr	r2, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6c      	ldr	r2, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a68      	ldr	r2, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fcc0 	bl	8001268 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fcbc 	bl	8001268 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e207      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xc0>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fcac 	bl	8001268 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fca8 	bl	8001268 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1f3      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0xe8>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1c7      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x244>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fc61 	bl	8001268 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fc5d 	bl	8001268 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1a8      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4925      	ldr	r1, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_OscConfig+0x244>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc40 	bl	8001268 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fc3c 	bl	8001268 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e187      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fc20 	bl	8001268 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc1c 	bl	8001268 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e167      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x200>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fc09 	bl	8001268 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	e00e      	b.n	8001a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fc05 	bl	8001268 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d907      	bls.n	8001a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e150      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470000 	.word	0x42470000
 8001a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8097 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a73      	ldr	r2, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbc5 	bl	8001268 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fbc1 	bl	8001268 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e10c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2ea>
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x30c>
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b38:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	4b55      	ldr	r3, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fb86 	bl	8001268 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb82 	bl	8001268 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0cb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fb70 	bl	8001268 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fb6c 	bl	8001268 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0b5      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a1 	beq.w	8001d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d05c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d141      	bne.n	8001c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb40 	bl	8001268 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fb3c 	bl	8001268 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e087      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	491b      	ldr	r1, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fb15 	bl	8001268 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff fb11 	bl	8001268 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e05c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x416>
 8001c60:	e054      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fafe 	bl	8001268 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fafa 	bl	8001268 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e045      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e038      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x4ec>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d028      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d121      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d11a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cc      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d90c      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	494d      	ldr	r1, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d044      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e07f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e067      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4934      	ldr	r1, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff fa2c 	bl	8001268 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff fa28 	bl	8001268 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e04f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d20c      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e032      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea2:	f000 f821 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	490a      	ldr	r1, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fd8c 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08006530 	.word	0x08006530
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000020 	.word	0x20000020

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b090      	sub	sp, #64	; 0x40
 8001eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d00d      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	f200 80a1 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x34>
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f20:	e09b      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f26:	e098      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d028      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	627a      	str	r2, [r7, #36]	; 0x24
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f50:	2100      	movs	r1, #0
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f54:	fb03 f201 	mul.w	r2, r3, r1
 8001f58:	2300      	movs	r3, #0
 8001f5a:	fb00 f303 	mul.w	r3, r0, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f62:	fba0 1202 	umull	r1, r2, r0, r2
 8001f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f68:	460a      	mov	r2, r1
 8001f6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6e:	4413      	add	r3, r2
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	2200      	movs	r2, #0
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	61fa      	str	r2, [r7, #28]
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f82:	f7fe f92d 	bl	80001e0 <__aeabi_uldivmod>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8e:	e053      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	2200      	movs	r2, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	617a      	str	r2, [r7, #20]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fa2:	f04f 0b00 	mov.w	fp, #0
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	465b      	mov	r3, fp
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb8:	0150      	lsls	r0, r2, #5
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	ebb2 080a 	subs.w	r8, r2, sl
 8001fc2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fda:	ebb2 0408 	subs.w	r4, r2, r8
 8001fde:	eb63 0509 	sbc.w	r5, r3, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	00eb      	lsls	r3, r5, #3
 8001fec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff0:	00e2      	lsls	r2, r4, #3
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	eb14 030a 	adds.w	r3, r4, sl
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	eb45 030b 	adc.w	r3, r5, fp
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800200e:	4629      	mov	r1, r5
 8002010:	028b      	lsls	r3, r1, #10
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002018:	4621      	mov	r1, r4
 800201a:	028a      	lsls	r2, r1, #10
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	2200      	movs	r2, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800202c:	f7fe f8d8 	bl	80001e0 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	; 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400
 8002070:	017d7840 	.word	0x017d7840

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0a9b      	lsrs	r3, r3, #10
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	08006540 	.word	0x08006540

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020b8:	f7ff ffdc 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0b5b      	lsrs	r3, r3, #13
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08006540 	.word	0x08006540

080020dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	220f      	movs	r2, #15
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_GetClockConfig+0x60>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	601a      	str	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07b      	b.n	800224a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002162:	d009      	beq.n	8002178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
 800216a:	e005      	b.n	8002178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fb94 	bl	80008c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	ea42 0103 	orr.w	r1, r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0104 	and.w	r1, r3, #4
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f003 0210 	and.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b088      	sub	sp, #32
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_SPI_Transmit+0x22>
 8002270:	2302      	movs	r3, #2
 8002272:	e126      	b.n	80024c2 <HAL_SPI_Transmit+0x270>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227c:	f7fe fff4 	bl	8001268 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d002      	beq.n	8002298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002292:	2302      	movs	r3, #2
 8002294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002296:	e10b      	b.n	80024b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_SPI_Transmit+0x52>
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022a8:	e102      	b.n	80024b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f0:	d10f      	bne.n	8002312 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d007      	beq.n	8002330 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002338:	d14b      	bne.n	80023d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SPI_Transmit+0xf6>
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d13e      	bne.n	80023c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	881a      	ldrh	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800236c:	e02b      	b.n	80023c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d112      	bne.n	80023a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	1c9a      	adds	r2, r3, #2
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	86da      	strh	r2, [r3, #54]	; 0x36
 80023a0:	e011      	b.n	80023c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a2:	f7fe ff61 	bl	8001268 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d803      	bhi.n	80023ba <HAL_SPI_Transmit+0x168>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b8:	d102      	bne.n	80023c0 <HAL_SPI_Transmit+0x16e>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023c4:	e074      	b.n	80024b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ce      	bne.n	800236e <HAL_SPI_Transmit+0x11c>
 80023d0:	e04c      	b.n	800246c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_Transmit+0x18e>
 80023da:	8afb      	ldrh	r3, [r7, #22]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d140      	bne.n	8002462 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002406:	e02c      	b.n	8002462 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d113      	bne.n	800243e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	86da      	strh	r2, [r3, #54]	; 0x36
 800243c:	e011      	b.n	8002462 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243e:	f7fe ff13 	bl	8001268 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d803      	bhi.n	8002456 <HAL_SPI_Transmit+0x204>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002454:	d102      	bne.n	800245c <HAL_SPI_Transmit+0x20a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002460:	e026      	b.n	80024b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1cd      	bne.n	8002408 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa55 	bl	8002920 <SPI_EndRxTxTransaction>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	e000      	b.n	80024b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80024ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b08c      	sub	sp, #48	; 0x30
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024d8:	2301      	movs	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x26>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e18a      	b.n	8002806 <HAL_SPI_TransmitReceive+0x33c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024f8:	f7fe feb6 	bl	8001268 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002516:	2b01      	cmp	r3, #1
 8002518:	d00f      	beq.n	800253a <HAL_SPI_TransmitReceive+0x70>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002520:	d107      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x68>
 800252a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002538:	e15b      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_SPI_TransmitReceive+0x82>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_SPI_TransmitReceive+0x82>
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002552:	e14e      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b04      	cmp	r3, #4
 800255e:	d003      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2205      	movs	r2, #5
 8002564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d007      	beq.n	80025bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c4:	d178      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x10a>
 80025ce:	8b7b      	ldrh	r3, [r7, #26]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d166      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f8:	e053      	b.n	80026a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d11b      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x176>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x176>
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d113      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	881a      	ldrh	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	1c9a      	adds	r2, r3, #2
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d119      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x1b8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	b292      	uxth	r2, r2
 8002664:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	1c9a      	adds	r2, r3, #2
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267e:	2301      	movs	r3, #1
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002682:	f7fe fdf1 	bl	8001268 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268e:	429a      	cmp	r2, r3
 8002690:	d807      	bhi.n	80026a2 <HAL_SPI_TransmitReceive+0x1d8>
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002698:	d003      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026a0:	e0a7      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1a6      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x130>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1a1      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x130>
 80026b6:	e07c      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x1fc>
 80026c0:	8b7b      	ldrh	r3, [r7, #26]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d16b      	bne.n	800279e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ec:	e057      	b.n	800279e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d11c      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x26c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d017      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x26c>
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d114      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	7812      	ldrb	r2, [r2, #0]
 8002718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d119      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x2ae>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d014      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002774:	2301      	movs	r3, #1
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002778:	f7fe fd76 	bl	8001268 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002784:	429a      	cmp	r2, r3
 8002786:	d803      	bhi.n	8002790 <HAL_SPI_TransmitReceive+0x2c6>
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278e:	d102      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x2cc>
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800279c:	e029      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1a2      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x224>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d19d      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f8b2 	bl	8002920 <SPI_EndRxTxTransaction>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027ce:	e010      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	e000      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002806:	4618      	mov	r0, r3
 8002808:	3730      	adds	r7, #48	; 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002820:	f7fe fd22 	bl	8001268 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002830:	f7fe fd1a 	bl	8001268 <HAL_GetTick>
 8002834:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	015b      	lsls	r3, r3, #5
 800283c:	0d1b      	lsrs	r3, r3, #20
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002846:	e054      	b.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284e:	d050      	beq.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002850:	f7fe fd0a 	bl	8001268 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	429a      	cmp	r2, r3
 800285e:	d902      	bls.n	8002866 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d13d      	bne.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d111      	bne.n	80028a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002888:	d004      	beq.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d107      	bne.n	80028a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ac:	d10f      	bne.n	80028ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e017      	b.n	8002912 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	429a      	cmp	r2, r3
 800290e:	d19b      	bne.n	8002848 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <SPI_EndRxTxTransaction+0x7c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <SPI_EndRxTxTransaction+0x80>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0d5b      	lsrs	r3, r3, #21
 8002938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d112      	bne.n	8002972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ff5a 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d0f2      	beq.n	8002972 <SPI_EndRxTxTransaction+0x52>
 800298c:	e000      	b.n	8002990 <SPI_EndRxTxTransaction+0x70>
        break;
 800298e:	bf00      	nop
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000
 80029a0:	165e9f81 	.word	0x165e9f81

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f839 	bl	8002a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 f9ca 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e044      	b.n	8002afa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d013      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_TIM_Base_Start_IT+0xb4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_TIM_Base_Start_IT+0xb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d010      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	e007      	b.n	8002af8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40014000 	.word	0x40014000

08002b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0202 	mvn.w	r2, #2
 8002b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8ee 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8e0 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8f1 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0204 	mvn.w	r2, #4
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8c4 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8b6 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8c7 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0208 	mvn.w	r2, #8
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f89a 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f88c 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f89d 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0210 	mvn.w	r2, #16
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f870 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f862 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f873 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0201 	mvn.w	r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fdcc 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8e2 	bl	8002e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f838 	bl	8002d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0220 	mvn.w	r2, #32
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8ac 	bl	8002e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a34      	ldr	r2, [pc, #208]	; (8002e60 <TIM_Base_SetConfig+0xe4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00f      	beq.n	8002db4 <TIM_Base_SetConfig+0x38>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0x38>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <TIM_Base_SetConfig+0xe8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0x38>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <TIM_Base_SetConfig+0xec>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0x38>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <TIM_Base_SetConfig+0xf0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d108      	bne.n	8002dc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <TIM_Base_SetConfig+0xe4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01b      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d017      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <TIM_Base_SetConfig+0xe8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <TIM_Base_SetConfig+0xec>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00f      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <TIM_Base_SetConfig+0xf0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <TIM_Base_SetConfig+0xf4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <TIM_Base_SetConfig+0xf8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <TIM_Base_SetConfig+0xfc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <TIM_Base_SetConfig+0xe4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d103      	bne.n	8002e4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	615a      	str	r2, [r3, #20]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800

08002e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e03f      	b.n	8002f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fd40 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f829 	bl	8002f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b0c0      	sub	sp, #256	; 0x100
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	ea40 0301 	orr.w	r3, r0, r1
 8002f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f98:	f021 010c 	bic.w	r1, r1, #12
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	6999      	ldr	r1, [r3, #24]
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	ea40 0301 	orr.w	r3, r0, r1
 8002fc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b8f      	ldr	r3, [pc, #572]	; (800320c <UART_SetConfig+0x2cc>)
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d005      	beq.n	8002fe0 <UART_SetConfig+0xa0>
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <UART_SetConfig+0x2d0>)
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d104      	bne.n	8002fea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7ff f868 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fe8:	e003      	b.n	8002ff2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fea:	f7ff f84f 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8002fee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffc:	f040 810c 	bne.w	8003218 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800300a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800300e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003012:	4622      	mov	r2, r4
 8003014:	462b      	mov	r3, r5
 8003016:	1891      	adds	r1, r2, r2
 8003018:	65b9      	str	r1, [r7, #88]	; 0x58
 800301a:	415b      	adcs	r3, r3
 800301c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800301e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003022:	4621      	mov	r1, r4
 8003024:	eb12 0801 	adds.w	r8, r2, r1
 8003028:	4629      	mov	r1, r5
 800302a:	eb43 0901 	adc.w	r9, r3, r1
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800303a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003042:	4690      	mov	r8, r2
 8003044:	4699      	mov	r9, r3
 8003046:	4623      	mov	r3, r4
 8003048:	eb18 0303 	adds.w	r3, r8, r3
 800304c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003050:	462b      	mov	r3, r5
 8003052:	eb49 0303 	adc.w	r3, r9, r3
 8003056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003066:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800306a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800306e:	460b      	mov	r3, r1
 8003070:	18db      	adds	r3, r3, r3
 8003072:	653b      	str	r3, [r7, #80]	; 0x50
 8003074:	4613      	mov	r3, r2
 8003076:	eb42 0303 	adc.w	r3, r2, r3
 800307a:	657b      	str	r3, [r7, #84]	; 0x54
 800307c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003080:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003084:	f7fd f8ac 	bl	80001e0 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <UART_SetConfig+0x2d4>)
 800308e:	fba3 2302 	umull	r2, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	011c      	lsls	r4, r3, #4
 8003096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030a8:	4642      	mov	r2, r8
 80030aa:	464b      	mov	r3, r9
 80030ac:	1891      	adds	r1, r2, r2
 80030ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80030b0:	415b      	adcs	r3, r3
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030b8:	4641      	mov	r1, r8
 80030ba:	eb12 0a01 	adds.w	sl, r2, r1
 80030be:	4649      	mov	r1, r9
 80030c0:	eb43 0b01 	adc.w	fp, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d8:	4692      	mov	sl, r2
 80030da:	469b      	mov	fp, r3
 80030dc:	4643      	mov	r3, r8
 80030de:	eb1a 0303 	adds.w	r3, sl, r3
 80030e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb4b 0303 	adc.w	r3, fp, r3
 80030ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003100:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003104:	460b      	mov	r3, r1
 8003106:	18db      	adds	r3, r3, r3
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
 800310a:	4613      	mov	r3, r2
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
 8003112:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003116:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800311a:	f7fd f861 	bl	80001e0 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4611      	mov	r1, r2
 8003124:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <UART_SetConfig+0x2d4>)
 8003126:	fba3 2301 	umull	r2, r3, r3, r1
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2264      	movs	r2, #100	; 0x64
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	1acb      	subs	r3, r1, r3
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800313a:	4b36      	ldr	r3, [pc, #216]	; (8003214 <UART_SetConfig+0x2d4>)
 800313c:	fba3 2302 	umull	r2, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003148:	441c      	add	r4, r3
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003154:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003158:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	1891      	adds	r1, r2, r2
 8003162:	63b9      	str	r1, [r7, #56]	; 0x38
 8003164:	415b      	adcs	r3, r3
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800316c:	4641      	mov	r1, r8
 800316e:	1851      	adds	r1, r2, r1
 8003170:	6339      	str	r1, [r7, #48]	; 0x30
 8003172:	4649      	mov	r1, r9
 8003174:	414b      	adcs	r3, r1
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003184:	4659      	mov	r1, fp
 8003186:	00cb      	lsls	r3, r1, #3
 8003188:	4651      	mov	r1, sl
 800318a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318e:	4651      	mov	r1, sl
 8003190:	00ca      	lsls	r2, r1, #3
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4603      	mov	r3, r0
 8003198:	4642      	mov	r2, r8
 800319a:	189b      	adds	r3, r3, r2
 800319c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031a0:	464b      	mov	r3, r9
 80031a2:	460a      	mov	r2, r1
 80031a4:	eb42 0303 	adc.w	r3, r2, r3
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031c0:	460b      	mov	r3, r1
 80031c2:	18db      	adds	r3, r3, r3
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c6:	4613      	mov	r3, r2
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031d6:	f7fd f803 	bl	80001e0 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <UART_SetConfig+0x2d4>)
 80031e0:	fba3 1302 	umull	r1, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a08      	ldr	r2, [pc, #32]	; (8003214 <UART_SetConfig+0x2d4>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 0207 	and.w	r2, r3, #7
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4422      	add	r2, r4
 8003206:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003208:	e105      	b.n	8003416 <UART_SetConfig+0x4d6>
 800320a:	bf00      	nop
 800320c:	40011000 	.word	0x40011000
 8003210:	40011400 	.word	0x40011400
 8003214:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003222:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003226:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800322a:	4642      	mov	r2, r8
 800322c:	464b      	mov	r3, r9
 800322e:	1891      	adds	r1, r2, r2
 8003230:	6239      	str	r1, [r7, #32]
 8003232:	415b      	adcs	r3, r3
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800323a:	4641      	mov	r1, r8
 800323c:	1854      	adds	r4, r2, r1
 800323e:	4649      	mov	r1, r9
 8003240:	eb43 0501 	adc.w	r5, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	00eb      	lsls	r3, r5, #3
 800324e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003252:	00e2      	lsls	r2, r4, #3
 8003254:	4614      	mov	r4, r2
 8003256:	461d      	mov	r5, r3
 8003258:	4643      	mov	r3, r8
 800325a:	18e3      	adds	r3, r4, r3
 800325c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003260:	464b      	mov	r3, r9
 8003262:	eb45 0303 	adc.w	r3, r5, r3
 8003266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003286:	4629      	mov	r1, r5
 8003288:	008b      	lsls	r3, r1, #2
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003290:	4621      	mov	r1, r4
 8003292:	008a      	lsls	r2, r1, #2
 8003294:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003298:	f7fc ffa2 	bl	80001e0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4b60      	ldr	r3, [pc, #384]	; (8003424 <UART_SetConfig+0x4e4>)
 80032a2:	fba3 2302 	umull	r2, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	011c      	lsls	r4, r3, #4
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	61b9      	str	r1, [r7, #24]
 80032c4:	415b      	adcs	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032cc:	4641      	mov	r1, r8
 80032ce:	1851      	adds	r1, r2, r1
 80032d0:	6139      	str	r1, [r7, #16]
 80032d2:	4649      	mov	r1, r9
 80032d4:	414b      	adcs	r3, r1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e4:	4659      	mov	r1, fp
 80032e6:	00cb      	lsls	r3, r1, #3
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ee:	4651      	mov	r1, sl
 80032f0:	00ca      	lsls	r2, r1, #3
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	4642      	mov	r2, r8
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003300:	464b      	mov	r3, r9
 8003302:	460a      	mov	r2, r1
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	67bb      	str	r3, [r7, #120]	; 0x78
 8003316:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003324:	4649      	mov	r1, r9
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	4641      	mov	r1, r8
 800332a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332e:	4641      	mov	r1, r8
 8003330:	008a      	lsls	r2, r1, #2
 8003332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003336:	f7fc ff53 	bl	80001e0 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <UART_SetConfig+0x4e4>)
 8003340:	fba3 1302 	umull	r1, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	3332      	adds	r3, #50	; 0x32
 8003352:	4a34      	ldr	r2, [pc, #208]	; (8003424 <UART_SetConfig+0x4e4>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335e:	441c      	add	r4, r3
 8003360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003364:	2200      	movs	r2, #0
 8003366:	673b      	str	r3, [r7, #112]	; 0x70
 8003368:	677a      	str	r2, [r7, #116]	; 0x74
 800336a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800336e:	4642      	mov	r2, r8
 8003370:	464b      	mov	r3, r9
 8003372:	1891      	adds	r1, r2, r2
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	415b      	adcs	r3, r3
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800337e:	4641      	mov	r1, r8
 8003380:	1851      	adds	r1, r2, r1
 8003382:	6039      	str	r1, [r7, #0]
 8003384:	4649      	mov	r1, r9
 8003386:	414b      	adcs	r3, r1
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003396:	4659      	mov	r1, fp
 8003398:	00cb      	lsls	r3, r1, #3
 800339a:	4651      	mov	r1, sl
 800339c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a0:	4651      	mov	r1, sl
 80033a2:	00ca      	lsls	r2, r1, #3
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	4642      	mov	r2, r8
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b0:	464b      	mov	r3, r9
 80033b2:	460a      	mov	r2, r1
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	663b      	str	r3, [r7, #96]	; 0x60
 80033c4:	667a      	str	r2, [r7, #100]	; 0x64
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033d2:	4649      	mov	r1, r9
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	4641      	mov	r1, r8
 80033d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033dc:	4641      	mov	r1, r8
 80033de:	008a      	lsls	r2, r1, #2
 80033e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033e4:	f7fc fefc 	bl	80001e0 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 1302 	umull	r1, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a08      	ldr	r2, [pc, #32]	; (8003424 <UART_SetConfig+0x4e4>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4422      	add	r2, r4
 8003414:	609a      	str	r2, [r3, #8]
}
 8003416:	bf00      	nop
 8003418:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800341c:	46bd      	mov	sp, r7
 800341e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003422:	bf00      	nop
 8003424:	51eb851f 	.word	0x51eb851f

08003428 <__NVIC_SetPriority>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db0a      	blt.n	8003452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	490c      	ldr	r1, [pc, #48]	; (8003474 <__NVIC_SetPriority+0x4c>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	440b      	add	r3, r1
 800344c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003450:	e00a      	b.n	8003468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4908      	ldr	r1, [pc, #32]	; (8003478 <__NVIC_SetPriority+0x50>)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3b04      	subs	r3, #4
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	440b      	add	r3, r1
 8003466:	761a      	strb	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Handler+0x1c>)
 8003482:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003484:	f001 fea2 	bl	80051cc <xTaskGetSchedulerState>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800348e:	f002 fc8b 	bl	8005da8 <xPortSysTickHandler>
  }
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034a0:	2100      	movs	r1, #0
 80034a2:	f06f 0004 	mvn.w	r0, #4
 80034a6:	f7ff ffbf 	bl	8003428 <__NVIC_SetPriority>
#endif
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b6:	f3ef 8305 	mrs	r3, IPSR
 80034ba:	603b      	str	r3, [r7, #0]
  return(result);
 80034bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034c2:	f06f 0305 	mvn.w	r3, #5
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	e00c      	b.n	80034e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <osKernelInitialize+0x44>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <osKernelInitialize+0x44>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	e002      	b.n	80034e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200001a8 	.word	0x200001a8

080034f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fe:	f3ef 8305 	mrs	r3, IPSR
 8003502:	603b      	str	r3, [r7, #0]
  return(result);
 8003504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <osKernelStart+0x1a>
    stat = osErrorISR;
 800350a:	f06f 0305 	mvn.w	r3, #5
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e010      	b.n	8003534 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <osKernelStart+0x48>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d109      	bne.n	800352e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800351a:	f7ff ffbf 	bl	800349c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <osKernelStart+0x48>)
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003524:	f001 f9f6 	bl	8004914 <vTaskStartScheduler>
      stat = osOK;
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e002      	b.n	8003534 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003532:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003534:	687b      	ldr	r3, [r7, #4]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200001a8 	.word	0x200001a8

08003544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	; 0x38
 8003548:	af04      	add	r7, sp, #16
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003554:	f3ef 8305 	mrs	r3, IPSR
 8003558:	617b      	str	r3, [r7, #20]
  return(result);
 800355a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800355c:	2b00      	cmp	r3, #0
 800355e:	d17e      	bne.n	800365e <osThreadNew+0x11a>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07b      	beq.n	800365e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800356a:	2318      	movs	r3, #24
 800356c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003576:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d045      	beq.n	800360a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <osThreadNew+0x48>
        name = attr->name;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <osThreadNew+0x6e>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b38      	cmp	r3, #56	; 0x38
 80035a4:	d805      	bhi.n	80035b2 <osThreadNew+0x6e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <osThreadNew+0x72>
        return (NULL);
 80035b2:	2300      	movs	r3, #0
 80035b4:	e054      	b.n	8003660 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00e      	beq.n	80035ec <osThreadNew+0xa8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2bbb      	cmp	r3, #187	; 0xbb
 80035d4:	d90a      	bls.n	80035ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <osThreadNew+0xa8>
        mem = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e010      	b.n	800360e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10c      	bne.n	800360e <osThreadNew+0xca>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d108      	bne.n	800360e <osThreadNew+0xca>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <osThreadNew+0xca>
          mem = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e001      	b.n	800360e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d110      	bne.n	8003636 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800361c:	9202      	str	r2, [sp, #8]
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 ff86 	bl	800453c <xTaskCreateStatic>
 8003630:	4603      	mov	r3, r0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e013      	b.n	800365e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d110      	bne.n	800365e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	b29a      	uxth	r2, r3
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 ffd1 	bl	80045f6 <xTaskCreate>
 8003654:	4603      	mov	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <osThreadNew+0x11a>
            hTask = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800365e:	693b      	ldr	r3, [r7, #16]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003670:	f3ef 8305 	mrs	r3, IPSR
 8003674:	60bb      	str	r3, [r7, #8]
  return(result);
 8003676:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <osDelay+0x1c>
    stat = osErrorISR;
 800367c:	f06f 0305 	mvn.w	r3, #5
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e007      	b.n	8003694 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <osDelay+0x2c>
      vTaskDelay(ticks);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 f90c 	bl	80048ac <vTaskDelay>
    }
  }

  return (stat);
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08a      	sub	sp, #40	; 0x28
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ae:	f3ef 8305 	mrs	r3, IPSR
 80036b2:	613b      	str	r3, [r7, #16]
  return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d175      	bne.n	80037a6 <osSemaphoreNew+0x108>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d072      	beq.n	80037a6 <osSemaphoreNew+0x108>
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d86e      	bhi.n	80037a6 <osSemaphoreNew+0x108>
    mem = -1;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <osSemaphoreNew+0x4c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b4f      	cmp	r3, #79	; 0x4f
 80036e2:	d902      	bls.n	80036ea <osSemaphoreNew+0x4c>
        mem = 1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e00c      	b.n	8003704 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <osSemaphoreNew+0x66>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <osSemaphoreNew+0x66>
          mem = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	e001      	b.n	8003704 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370a:	d04c      	beq.n	80037a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d128      	bne.n	8003764 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10a      	bne.n	800372e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2203      	movs	r2, #3
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	2001      	movs	r0, #1
 8003726:	f000 f993 	bl	8003a50 <xQueueGenericCreateStatic>
 800372a:	61f8      	str	r0, [r7, #28]
 800372c:	e005      	b.n	800373a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800372e:	2203      	movs	r2, #3
 8003730:	2100      	movs	r1, #0
 8003732:	2001      	movs	r0, #1
 8003734:	f000 fa04 	bl	8003b40 <xQueueGenericCreate>
 8003738:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d022      	beq.n	8003786 <osSemaphoreNew+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01f      	beq.n	8003786 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003746:	2300      	movs	r3, #0
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	69f8      	ldr	r0, [r7, #28]
 800374e:	f000 fabf 	bl	8003cd0 <xQueueGenericSend>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d016      	beq.n	8003786 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003758:	69f8      	ldr	r0, [r7, #28]
 800375a:	f000 fd33 	bl	80041c4 <vQueueDelete>
            hSemaphore = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e010      	b.n	8003786 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	461a      	mov	r2, r3
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa41 	bl	8003bfa <xQueueCreateCountingSemaphoreStatic>
 8003778:	61f8      	str	r0, [r7, #28]
 800377a:	e004      	b.n	8003786 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa72 	bl	8003c68 <xQueueCreateCountingSemaphore>
 8003784:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <osSemaphoreNew+0xfc>
          name = attr->name;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e001      	b.n	800379e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	69f8      	ldr	r0, [r7, #28]
 80037a2:	f000 fe43 	bl	800442c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80037a6:	69fb      	ldr	r3, [r7, #28]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <vApplicationGetIdleTaskMemory+0x2c>)
 80037c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <vApplicationGetIdleTaskMemory+0x30>)
 80037c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200001ac 	.word	0x200001ac
 80037e0:	20000268 	.word	0x20000268

080037e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <vApplicationGetTimerTaskMemory+0x2c>)
 80037f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a06      	ldr	r2, [pc, #24]	; (8003814 <vApplicationGetTimerTaskMemory+0x30>)
 80037fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	20000468 	.word	0x20000468
 8003814:	20000524 	.word	0x20000524

08003818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f103 0208 	add.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f103 0208 	add.w	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 0208 	add.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d0:	d103      	bne.n	80038da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e00c      	b.n	80038f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3308      	adds	r3, #8
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e002      	b.n	80038e8 <vListInsert+0x2e>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d2f6      	bcs.n	80038e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6852      	ldr	r2, [r2, #4]
 800394c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d103      	bne.n	8003960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039aa:	f002 f96b 	bl	8005c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	3b01      	subs	r3, #1
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	441a      	add	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d114      	bne.n	8003a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01a      	beq.n	8003a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fa1b 	bl	8004e48 <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <xQueueGenericReset+0xcc>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	e009      	b.n	8003a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fef2 	bl	8003818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff feed 	bl	8003818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a3e:	f002 f951 	bl	8005ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <xQueueGenericCreateStatic+0x52>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <xQueueGenericCreateStatic+0x56>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericCreateStatic+0x58>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <xQueueGenericCreateStatic+0x7e>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericCreateStatic+0x82>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericCreateStatic+0x84>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003aee:	2350      	movs	r3, #80	; 0x50
 8003af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d00a      	beq.n	8003b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	61bb      	str	r3, [r7, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f83f 	bl	8003bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	; 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	613b      	str	r3, [r7, #16]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3350      	adds	r3, #80	; 0x50
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 f9a5 	bl	8005ec8 <pvPortMalloc>
 8003b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3350      	adds	r3, #80	; 0x50
 8003b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b98:	79fa      	ldrb	r2, [r7, #7]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f805 	bl	8003bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003baa:	69bb      	ldr	r3, [r7, #24]
	}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e002      	b.n	8003bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003be2:	2101      	movs	r1, #1
 8003be4:	69b8      	ldr	r0, [r7, #24]
 8003be6:	f7ff fecb 	bl	8003980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	61bb      	str	r3, [r7, #24]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90a      	bls.n	8003c40 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	617b      	str	r3, [r7, #20]
}
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c40:	2302      	movs	r3, #2
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff00 	bl	8003a50 <xQueueGenericCreateStatic>
 8003c50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
	}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	613b      	str	r3, [r7, #16]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d90a      	bls.n	8003cac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60fb      	str	r3, [r7, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003cac:	2202      	movs	r2, #2
 8003cae:	2100      	movs	r1, #0
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff45 	bl	8003b40 <xQueueGenericCreate>
 8003cb6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003cc4:	697b      	ldr	r3, [r7, #20]
	}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueGenericSend+0x32>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <xQueueGenericSend+0x40>
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <xQueueGenericSend+0x44>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <xQueueGenericSend+0x46>
 8003d14:	2300      	movs	r3, #0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <xQueueGenericSend+0x60>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSend+0x6e>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <xQueueGenericSend+0x72>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueGenericSend+0x74>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xQueueGenericSend+0x8e>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	623b      	str	r3, [r7, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d5e:	f001 fa35 	bl	80051cc <xTaskGetSchedulerState>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xQueueGenericSend+0x9e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSend+0xa2>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSend+0xa4>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xQueueGenericSend+0xbe>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61fb      	str	r3, [r7, #28]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d8e:	f001 ff79 	bl	8005c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <xQueueGenericSend+0xd4>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d129      	bne.n	8003df8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003daa:	f000 fa2e 	bl	800420a <prvCopyDataToQueue>
 8003dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	3324      	adds	r3, #36	; 0x24
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 f843 	bl	8004e48 <xTaskRemoveFromEventList>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <xQueueGenericSend+0x1f8>)
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	e00a      	b.n	8003df0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003de0:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <xQueueGenericSend+0x1f8>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003df0:	f001 ff78 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e063      	b.n	8003ec0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dfe:	f001 ff71 	bl	8005ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e05c      	b.n	8003ec0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f87d 	bl	8004f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e1a:	f001 ff63 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e1e:	f000 fde9 	bl	80049f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e22:	f001 ff2f 	bl	8005c84 <vPortEnterCritical>
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e32:	d103      	bne.n	8003e3c <xQueueGenericSend+0x16c>
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e42:	b25b      	sxtb	r3, r3
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e48:	d103      	bne.n	8003e52 <xQueueGenericSend+0x182>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e52:	f001 ff47 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e56:	1d3a      	adds	r2, r7, #4
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f86c 	bl	8004f3c <xTaskCheckForTimeOut>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d124      	bne.n	8003eb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6c:	f000 fac5 	bl	80043fa <prvIsQueueFull>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	3310      	adds	r3, #16
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 ff92 	bl	8004da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e86:	f000 fa50 	bl	800432a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e8a:	f000 fdc1 	bl	8004a10 <xTaskResumeAll>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f af7c 	bne.w	8003d8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <xQueueGenericSend+0x1f8>)
 8003e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	e772      	b.n	8003d8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eaa:	f000 fa3e 	bl	800432a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eae:	f000 fdaf 	bl	8004a10 <xTaskResumeAll>
 8003eb2:	e76c      	b.n	8003d8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb6:	f000 fa38 	bl	800432a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eba:	f000 fda9 	bl	8004a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3738      	adds	r7, #56	; 0x38
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b090      	sub	sp, #64	; 0x40
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <xQueueGenericSendFromISR+0x3c>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <xQueueGenericSendFromISR+0x40>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <xQueueGenericSendFromISR+0x42>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d103      	bne.n	8003f36 <xQueueGenericSendFromISR+0x6a>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <xQueueGenericSendFromISR+0x6e>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueGenericSendFromISR+0x70>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	623b      	str	r3, [r7, #32]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f56:	f001 ff77 	bl	8005e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	61fa      	str	r2, [r7, #28]
 8003f70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <xQueueGenericSendFromISR+0xbc>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d12f      	bne.n	8003fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f9e:	f000 f934 	bl	800420a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003faa:	d112      	bne.n	8003fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d016      	beq.n	8003fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	3324      	adds	r3, #36	; 0x24
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ff45 	bl	8004e48 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e007      	b.n	8003fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	b25a      	sxtb	r2, r3
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003fe6:	e001      	b.n	8003fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3740      	adds	r7, #64	; 0x40
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <xQueueReceive+0x30>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	623b      	str	r3, [r7, #32]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <xQueueReceive+0x3e>
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xQueueReceive+0x42>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <xQueueReceive+0x44>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueReceive+0x5e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	61fb      	str	r3, [r7, #28]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004062:	f001 f8b3 	bl	80051cc <xTaskGetSchedulerState>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <xQueueReceive+0x6e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xQueueReceive+0x72>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xQueueReceive+0x74>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xQueueReceive+0x8e>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61bb      	str	r3, [r7, #24]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004092:	f001 fdf7 	bl	8005c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01f      	beq.n	80040e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a6:	f000 f91a 	bl	80042de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00f      	beq.n	80040da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	3310      	adds	r3, #16
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fec2 	bl	8004e48 <xTaskRemoveFromEventList>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040ca:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <xQueueReceive+0x1bc>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040da:	f001 fe03 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 80040de:	2301      	movs	r3, #1
 80040e0:	e069      	b.n	80041b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040e8:	f001 fdfc 	bl	8005ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e062      	b.n	80041b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040f6:	f107 0310 	add.w	r3, r7, #16
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 ff08 	bl	8004f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004104:	f001 fdee 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004108:	f000 fc74 	bl	80049f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800410c:	f001 fdba 	bl	8005c84 <vPortEnterCritical>
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411c:	d103      	bne.n	8004126 <xQueueReceive+0x122>
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800412c:	b25b      	sxtb	r3, r3
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004132:	d103      	bne.n	800413c <xQueueReceive+0x138>
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800413c:	f001 fdd2 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004140:	1d3a      	adds	r2, r7, #4
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fef7 	bl	8004f3c <xTaskCheckForTimeOut>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d123      	bne.n	800419c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004156:	f000 f93a 	bl	80043ce <prvIsQueueEmpty>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe1d 	bl	8004da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004170:	f000 f8db 	bl	800432a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004174:	f000 fc4c 	bl	8004a10 <xTaskResumeAll>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d189      	bne.n	8004092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <xQueueReceive+0x1bc>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	e780      	b.n	8004092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004192:	f000 f8ca 	bl	800432a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004196:	f000 fc3b 	bl	8004a10 <xTaskResumeAll>
 800419a:	e77a      	b.n	8004092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800419c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419e:	f000 f8c4 	bl	800432a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041a2:	f000 fc35 	bl	8004a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a8:	f000 f911 	bl	80043ce <prvIsQueueEmpty>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f43f af6f 	beq.w	8004092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3730      	adds	r7, #48	; 0x30
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <vQueueDelete+0x28>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	60bb      	str	r3, [r7, #8]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f947 	bl	8004480 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f001 ff2f 	bl	8006060 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d14d      	bne.n	80042cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 ffe7 	bl	8005208 <xTaskPriorityDisinherit>
 800423a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	e043      	b.n	80042cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d119      	bne.n	800427e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6858      	ldr	r0, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	461a      	mov	r2, r3
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	f002 f847 	bl	80062e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d32b      	bcc.n	80042cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	e026      	b.n	80042cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68d8      	ldr	r0, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	461a      	mov	r2, r3
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	f002 f82d 	bl	80062e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	425b      	negs	r3, r3
 8004298:	441a      	add	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d207      	bcs.n	80042ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	425b      	negs	r3, r3
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d105      	bne.n	80042cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042d4:	697b      	ldr	r3, [r7, #20]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d303      	bcc.n	8004312 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68d9      	ldr	r1, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	461a      	mov	r2, r3
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f001 ffe3 	bl	80062e8 <memcpy>
	}
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004332:	f001 fca7 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800433e:	e011      	b.n	8004364 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd7b 	bl	8004e48 <xTaskRemoveFromEventList>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004358:	f000 fe52 	bl	8005000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	3b01      	subs	r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	dce9      	bgt.n	8004340 <prvUnlockQueue+0x16>
 800436c:	e000      	b.n	8004370 <prvUnlockQueue+0x46>
					break;
 800436e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004378:	f001 fcb4 	bl	8005ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800437c:	f001 fc82 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004386:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004388:	e011      	b.n	80043ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3310      	adds	r3, #16
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fd56 	bl	8004e48 <xTaskRemoveFromEventList>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043a2:	f000 fe2d 	bl	8005000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043a6:	7bbb      	ldrb	r3, [r7, #14]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dce9      	bgt.n	800438a <prvUnlockQueue+0x60>
 80043b6:	e000      	b.n	80043ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043c2:	f001 fc8f 	bl	8005ce4 <vPortExitCritical>
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043d6:	f001 fc55 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e001      	b.n	80043ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043ec:	f001 fc7a 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004402:	f001 fc3f 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	429a      	cmp	r2, r3
 8004410:	d102      	bne.n	8004418 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e001      	b.n	800441c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800441c:	f001 fc62 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e014      	b.n	8004466 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800443c:	4a0f      	ldr	r2, [pc, #60]	; (800447c <vQueueAddToRegistry+0x50>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004448:	490c      	ldr	r1, [pc, #48]	; (800447c <vQueueAddToRegistry+0x50>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <vQueueAddToRegistry+0x50>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800445e:	e006      	b.n	800446e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b07      	cmp	r3, #7
 800446a:	d9e7      	bls.n	800443c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000924 	.word	0x20000924

08004480 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e016      	b.n	80044bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <vQueueUnregisterQueue+0x50>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d10b      	bne.n	80044b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800449e:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <vQueueUnregisterQueue+0x50>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2100      	movs	r1, #0
 80044a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <vQueueUnregisterQueue+0x50>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	605a      	str	r2, [r3, #4]
				break;
 80044b4:	e006      	b.n	80044c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b07      	cmp	r3, #7
 80044c0:	d9e5      	bls.n	800448e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000924 	.word	0x20000924

080044d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044e4:	f001 fbce 	bl	8005c84 <vPortEnterCritical>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f4:	d103      	bne.n	80044fe <vQueueWaitForMessageRestricted+0x2a>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004504:	b25b      	sxtb	r3, r3
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450a:	d103      	bne.n	8004514 <vQueueWaitForMessageRestricted+0x40>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004514:	f001 fbe6 	bl	8005ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3324      	adds	r3, #36	; 0x24
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc61 	bl	8004df0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7ff fefb 	bl	800432a <prvUnlockQueue>
	}
 8004534:	bf00      	nop
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08e      	sub	sp, #56	; 0x38
 8004540:	af04      	add	r7, sp, #16
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	623b      	str	r3, [r7, #32]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xTaskCreateStatic+0x46>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004582:	23bc      	movs	r3, #188	; 0xbc
 8004584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2bbc      	cmp	r3, #188	; 0xbc
 800458a:	d00a      	beq.n	80045a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	61bb      	str	r3, [r7, #24]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01e      	beq.n	80045e8 <xTaskCreateStatic+0xac>
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045c2:	2300      	movs	r3, #0
 80045c4:	9303      	str	r3, [sp, #12]
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f850 	bl	8004680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e2:	f000 f8f3 	bl	80047cc <prvAddNewTaskToReadyList>
 80045e6:	e001      	b.n	80045ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045ec:	697b      	ldr	r3, [r7, #20]
	}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	; 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b08c      	sub	sp, #48	; 0x30
 80045fa:	af04      	add	r7, sp, #16
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fc5c 	bl	8005ec8 <pvPortMalloc>
 8004610:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004618:	20bc      	movs	r0, #188	; 0xbc
 800461a:	f001 fc55 	bl	8005ec8 <pvPortMalloc>
 800461e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
 800462c:	e005      	b.n	800463a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f001 fd16 	bl	8006060 <vPortFree>
 8004634:	e001      	b.n	800463a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	2300      	movs	r3, #0
 800464c:	9303      	str	r3, [sp, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	9302      	str	r3, [sp, #8]
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f80e 	bl	8004680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004664:	69f8      	ldr	r0, [r7, #28]
 8004666:	f000 f8b1 	bl	80047cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e002      	b.n	8004676 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004676:	69bb      	ldr	r3, [r7, #24]
	}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	461a      	mov	r2, r3
 8004698:	21a5      	movs	r1, #165	; 0xa5
 800469a:	f001 fe33 	bl	8006304 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046a8:	3b01      	subs	r3, #1
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f023 0307 	bic.w	r3, r3, #7
 80046b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	617b      	str	r3, [r7, #20]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01f      	beq.n	800471e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e012      	b.n	800470a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	7819      	ldrb	r1, [r3, #0]
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	3334      	adds	r3, #52	; 0x34
 80046f4:	460a      	mov	r2, r1
 80046f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d006      	beq.n	8004712 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d9e9      	bls.n	80046e4 <prvInitialiseNewTask+0x64>
 8004710:	e000      	b.n	8004714 <prvInitialiseNewTask+0x94>
			{
				break;
 8004712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800471c:	e003      	b.n	8004726 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2b37      	cmp	r3, #55	; 0x37
 800472a:	d901      	bls.n	8004730 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800472c:	2337      	movs	r3, #55	; 0x37
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	2200      	movs	r2, #0
 8004740:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	3304      	adds	r3, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f886 	bl	8003858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	3318      	adds	r3, #24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f881 	bl	8003858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	2200      	movs	r2, #0
 8004778:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	3354      	adds	r3, #84	; 0x54
 8004780:	2260      	movs	r2, #96	; 0x60
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f001 fdbd 	bl	8006304 <memset>
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <prvInitialiseNewTask+0x140>)
 800478e:	659a      	str	r2, [r3, #88]	; 0x58
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <prvInitialiseNewTask+0x144>)
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <prvInitialiseNewTask+0x148>)
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	69b8      	ldr	r0, [r7, #24]
 80047a2:	f001 f941 	bl	8005a28 <pxPortInitialiseStack>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b8:	bf00      	nop
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08006568 	.word	0x08006568
 80047c4:	08006588 	.word	0x08006588
 80047c8:	08006548 	.word	0x08006548

080047cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047d4:	f001 fa56 	bl	8005c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <prvAddNewTaskToReadyList+0xc4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <prvAddNewTaskToReadyList+0xc4>)
 80047e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047e2:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ea:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <prvAddNewTaskToReadyList+0xc4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d110      	bne.n	800481a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047f8:	f000 fc26 	bl	8005048 <prvInitialiseTaskLists>
 80047fc:	e00d      	b.n	800481a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <prvAddNewTaskToReadyList+0xcc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004806:	4b23      	ldr	r3, [pc, #140]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	429a      	cmp	r2, r3
 8004812:	d802      	bhi.n	800481a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <prvAddNewTaskToReadyList+0xd0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <prvAddNewTaskToReadyList+0xd0>)
 8004822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <prvAddNewTaskToReadyList+0xd0>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <prvAddNewTaskToReadyList+0xd4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d903      	bls.n	8004840 <prvAddNewTaskToReadyList+0x74>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <prvAddNewTaskToReadyList+0xd4>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <prvAddNewTaskToReadyList+0xd8>)
 800484e:	441a      	add	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7ff f80b 	bl	8003872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800485c:	f001 fa42 	bl	8005ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <prvAddNewTaskToReadyList+0xcc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00e      	beq.n	8004886 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	429a      	cmp	r2, r3
 8004874:	d207      	bcs.n	8004886 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <prvAddNewTaskToReadyList+0xdc>)
 8004878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000e38 	.word	0x20000e38
 8004894:	20000964 	.word	0x20000964
 8004898:	20000e44 	.word	0x20000e44
 800489c:	20000e54 	.word	0x20000e54
 80048a0:	20000e40 	.word	0x20000e40
 80048a4:	20000968 	.word	0x20000968
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d017      	beq.n	80048ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <vTaskDelay+0x60>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <vTaskDelay+0x30>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60bb      	str	r3, [r7, #8]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048dc:	f000 f88a 	bl	80049f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048e0:	2100      	movs	r1, #0
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fcfe 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048e8:	f000 f892 	bl	8004a10 <xTaskResumeAll>
 80048ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d107      	bne.n	8004904 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <vTaskDelay+0x64>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000e60 	.word	0x20000e60
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004922:	463a      	mov	r2, r7
 8004924:	1d39      	adds	r1, r7, #4
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe ff40 	bl	80037b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	9202      	str	r2, [sp, #8]
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	2300      	movs	r3, #0
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	460a      	mov	r2, r1
 8004942:	4924      	ldr	r1, [pc, #144]	; (80049d4 <vTaskStartScheduler+0xc0>)
 8004944:	4824      	ldr	r0, [pc, #144]	; (80049d8 <vTaskStartScheduler+0xc4>)
 8004946:	f7ff fdf9 	bl	800453c <xTaskCreateStatic>
 800494a:	4603      	mov	r3, r0
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <vTaskStartScheduler+0xc8>)
 800494e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004950:	4b22      	ldr	r3, [pc, #136]	; (80049dc <vTaskStartScheduler+0xc8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e001      	b.n	8004962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d102      	bne.n	800496e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004968:	f000 fd10 	bl	800538c <xTimerCreateTimerTask>
 800496c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d11b      	bne.n	80049ac <vTaskStartScheduler+0x98>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
}
 8004986:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <vTaskStartScheduler+0xcc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3354      	adds	r3, #84	; 0x54
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <vTaskStartScheduler+0xd0>)
 8004990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <vTaskStartScheduler+0xd4>)
 8004994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <vTaskStartScheduler+0xd8>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <vTaskStartScheduler+0xdc>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049a6:	f001 f8cb 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049aa:	e00e      	b.n	80049ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b2:	d10a      	bne.n	80049ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <vTaskStartScheduler+0xb4>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	080064e4 	.word	0x080064e4
 80049d8:	08005019 	.word	0x08005019
 80049dc:	20000e5c 	.word	0x20000e5c
 80049e0:	20000964 	.word	0x20000964
 80049e4:	2000002c 	.word	0x2000002c
 80049e8:	20000e58 	.word	0x20000e58
 80049ec:	20000e44 	.word	0x20000e44
 80049f0:	20000e3c 	.word	0x20000e3c

080049f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <vTaskSuspendAll+0x18>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	4a03      	ldr	r2, [pc, #12]	; (8004a0c <vTaskSuspendAll+0x18>)
 8004a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	20000e60 	.word	0x20000e60

08004a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a1e:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <xTaskResumeAll+0x118>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	603b      	str	r3, [r7, #0]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a3c:	f001 f922 	bl	8005c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <xTaskResumeAll+0x118>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4a38      	ldr	r2, [pc, #224]	; (8004b28 <xTaskResumeAll+0x118>)
 8004a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <xTaskResumeAll+0x118>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d162      	bne.n	8004b18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a52:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <xTaskResumeAll+0x11c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d05e      	beq.n	8004b18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a5a:	e02f      	b.n	8004abc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5c:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <xTaskResumeAll+0x120>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3318      	adds	r3, #24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe ff5f 	bl	800392c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe ff5a 	bl	800392c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <xTaskResumeAll+0x124>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <xTaskResumeAll+0x7c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <xTaskResumeAll+0x124>)
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <xTaskResumeAll+0x128>)
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fee5 	bl	8003872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <xTaskResumeAll+0x12c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <xTaskResumeAll+0x130>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <xTaskResumeAll+0x120>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1cb      	bne.n	8004a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004aca:	f000 fb5f 	bl	800518c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <xTaskResumeAll+0x134>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ada:	f000 f847 	bl	8004b6c <xTaskIncrementTick>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <xTaskResumeAll+0x130>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f1      	bne.n	8004ada <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <xTaskResumeAll+0x134>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <xTaskResumeAll+0x130>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <xTaskResumeAll+0x138>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b18:	f001 f8e4 	bl	8005ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000e60 	.word	0x20000e60
 8004b2c:	20000e38 	.word	0x20000e38
 8004b30:	20000df8 	.word	0x20000df8
 8004b34:	20000e40 	.word	0x20000e40
 8004b38:	20000968 	.word	0x20000968
 8004b3c:	20000964 	.word	0x20000964
 8004b40:	20000e4c 	.word	0x20000e4c
 8004b44:	20000e48 	.word	0x20000e48
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <xTaskGetTickCount+0x1c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000e3c 	.word	0x20000e3c

08004b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <xTaskIncrementTick+0x148>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 808f 	bne.w	8004c9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b88:	4a4b      	ldr	r2, [pc, #300]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d120      	bne.n	8004bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b94:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	603b      	str	r3, [r7, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <xTaskIncrementTick+0x46>
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3f      	ldr	r2, [pc, #252]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b3e      	ldr	r3, [pc, #248]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	f000 fadb 	bl	800518c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd6:	4b3c      	ldr	r3, [pc, #240]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d349      	bcc.n	8004c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bf0:	601a      	str	r2, [r3, #0]
					break;
 8004bf2:	e03f      	b.n	8004c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf4:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d203      	bcs.n	8004c14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c0c:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c12:	e02f      	b.n	8004c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe fe87 	bl	800392c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fe7e 	bl	800392c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d903      	bls.n	8004c44 <xTaskIncrementTick+0xd8>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004c52:	441a      	add	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fe fe09 	bl	8003872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3b8      	bcc.n	8004be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c72:	e7b5      	b.n	8004be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	4915      	ldr	r1, [pc, #84]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d901      	bls.n	8004c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <xTaskIncrementTick+0x16c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e004      	b.n	8004ca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <xTaskIncrementTick+0x170>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <xTaskIncrementTick+0x170>)
 8004ca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ca8:	697b      	ldr	r3, [r7, #20]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000e60 	.word	0x20000e60
 8004cb8:	20000e3c 	.word	0x20000e3c
 8004cbc:	20000df0 	.word	0x20000df0
 8004cc0:	20000df4 	.word	0x20000df4
 8004cc4:	20000e50 	.word	0x20000e50
 8004cc8:	20000e58 	.word	0x20000e58
 8004ccc:	20000e40 	.word	0x20000e40
 8004cd0:	20000968 	.word	0x20000968
 8004cd4:	20000964 	.word	0x20000964
 8004cd8:	20000e4c 	.word	0x20000e4c
 8004cdc:	20000e48 	.word	0x20000e48

08004ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ce6:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <vTaskSwitchContext+0xb0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <vTaskSwitchContext+0xb4>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cf4:	e046      	b.n	8004d84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <vTaskSwitchContext+0xb4>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfc:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <vTaskSwitchContext+0xb8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e010      	b.n	8004d26 <vTaskSwitchContext+0x46>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	607b      	str	r3, [r7, #4]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <vTaskSwitchContext+0x3e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	491d      	ldr	r1, [pc, #116]	; (8004d9c <vTaskSwitchContext+0xbc>)
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0e4      	beq.n	8004d04 <vTaskSwitchContext+0x24>
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <vTaskSwitchContext+0xbc>)
 8004d46:	4413      	add	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d104      	bne.n	8004d6a <vTaskSwitchContext+0x8a>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <vTaskSwitchContext+0xc0>)
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <vTaskSwitchContext+0xb8>)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <vTaskSwitchContext+0xc0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3354      	adds	r3, #84	; 0x54
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <vTaskSwitchContext+0xc4>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000e60 	.word	0x20000e60
 8004d94:	20000e4c 	.word	0x20000e4c
 8004d98:	20000e40 	.word	0x20000e40
 8004d9c:	20000968 	.word	0x20000968
 8004da0:	20000964 	.word	0x20000964
 8004da4:	2000002c 	.word	0x2000002c

08004da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	60fb      	str	r3, [r7, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <vTaskPlaceOnEventList+0x44>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe fd6f 	bl	80038ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6838      	ldr	r0, [r7, #0]
 8004de0:	f000 fa80 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000964 	.word	0x20000964

08004df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	617b      	str	r3, [r7, #20]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3318      	adds	r3, #24
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7fe fd26 	bl	8003872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f000 fa55 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
	}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000964 	.word	0x20000964

08004e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60fb      	str	r3, [r7, #12]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3318      	adds	r3, #24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fd57 	bl	800392c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <xTaskRemoveFromEventList+0xb0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fd4e 	bl	800392c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <xTaskRemoveFromEventList+0xb4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d903      	bls.n	8004ea4 <xTaskRemoveFromEventList+0x5c>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <xTaskRemoveFromEventList+0xb4>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <xTaskRemoveFromEventList+0xb8>)
 8004eb2:	441a      	add	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fe fcd9 	bl	8003872 <vListInsertEnd>
 8004ec0:	e005      	b.n	8004ece <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	480e      	ldr	r0, [pc, #56]	; (8004f04 <xTaskRemoveFromEventList+0xbc>)
 8004eca:	f7fe fcd2 	bl	8003872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <xTaskRemoveFromEventList+0xc0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d905      	bls.n	8004ee8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <xTaskRemoveFromEventList+0xc4>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e001      	b.n	8004eec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004eec:	697b      	ldr	r3, [r7, #20]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000e60 	.word	0x20000e60
 8004efc:	20000e40 	.word	0x20000e40
 8004f00:	20000968 	.word	0x20000968
 8004f04:	20000df8 	.word	0x20000df8
 8004f08:	20000964 	.word	0x20000964
 8004f0c:	20000e4c 	.word	0x20000e4c

08004f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <vTaskInternalSetTimeOutState+0x24>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <vTaskInternalSetTimeOutState+0x28>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	605a      	str	r2, [r3, #4]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000e50 	.word	0x20000e50
 8004f38:	20000e3c 	.word	0x20000e3c

08004f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	613b      	str	r3, [r7, #16]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f7e:	f000 fe81 	bl	8005c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f82:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <xTaskCheckForTimeOut+0xbc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d102      	bne.n	8004fa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	e023      	b.n	8004fea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <xTaskCheckForTimeOut+0xc0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d007      	beq.n	8004fbe <xTaskCheckForTimeOut+0x82>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	e015      	b.n	8004fea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d20b      	bcs.n	8004fe0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff9b 	bl	8004f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e004      	b.n	8004fea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fea:	f000 fe7b 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004fee:	69fb      	ldr	r3, [r7, #28]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000e3c 	.word	0x20000e3c
 8004ffc:	20000e50 	.word	0x20000e50

08005000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <vTaskMissedYield+0x14>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	20000e4c 	.word	0x20000e4c

08005018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005020:	f000 f852 	bl	80050c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <prvIdleTask+0x28>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d9f9      	bls.n	8005020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <prvIdleTask+0x2c>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800503c:	e7f0      	b.n	8005020 <prvIdleTask+0x8>
 800503e:	bf00      	nop
 8005040:	20000968 	.word	0x20000968
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	e00c      	b.n	800506e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <prvInitialiseTaskLists+0x60>)
 8005060:	4413      	add	r3, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fbd8 	bl	8003818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3301      	adds	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b37      	cmp	r3, #55	; 0x37
 8005072:	d9ef      	bls.n	8005054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005074:	480d      	ldr	r0, [pc, #52]	; (80050ac <prvInitialiseTaskLists+0x64>)
 8005076:	f7fe fbcf 	bl	8003818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800507a:	480d      	ldr	r0, [pc, #52]	; (80050b0 <prvInitialiseTaskLists+0x68>)
 800507c:	f7fe fbcc 	bl	8003818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005080:	480c      	ldr	r0, [pc, #48]	; (80050b4 <prvInitialiseTaskLists+0x6c>)
 8005082:	f7fe fbc9 	bl	8003818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005086:	480c      	ldr	r0, [pc, #48]	; (80050b8 <prvInitialiseTaskLists+0x70>)
 8005088:	f7fe fbc6 	bl	8003818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800508c:	480b      	ldr	r0, [pc, #44]	; (80050bc <prvInitialiseTaskLists+0x74>)
 800508e:	f7fe fbc3 	bl	8003818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <prvInitialiseTaskLists+0x78>)
 8005094:	4a05      	ldr	r2, [pc, #20]	; (80050ac <prvInitialiseTaskLists+0x64>)
 8005096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <prvInitialiseTaskLists+0x7c>)
 800509a:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <prvInitialiseTaskLists+0x68>)
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000968 	.word	0x20000968
 80050ac:	20000dc8 	.word	0x20000dc8
 80050b0:	20000ddc 	.word	0x20000ddc
 80050b4:	20000df8 	.word	0x20000df8
 80050b8:	20000e0c 	.word	0x20000e0c
 80050bc:	20000e24 	.word	0x20000e24
 80050c0:	20000df0 	.word	0x20000df0
 80050c4:	20000df4 	.word	0x20000df4

080050c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050ce:	e019      	b.n	8005104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050d0:	f000 fdd8 	bl	8005c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <prvCheckTasksWaitingTermination+0x50>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fc23 	bl	800392c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <prvCheckTasksWaitingTermination+0x54>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <prvCheckTasksWaitingTermination+0x54>)
 80050ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <prvCheckTasksWaitingTermination+0x58>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <prvCheckTasksWaitingTermination+0x58>)
 80050f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050fa:	f000 fdf3 	bl	8005ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f810 	bl	8005124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <prvCheckTasksWaitingTermination+0x58>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e1      	bne.n	80050d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000e0c 	.word	0x20000e0c
 800511c:	20000e38 	.word	0x20000e38
 8005120:	20000e20 	.word	0x20000e20

08005124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3354      	adds	r3, #84	; 0x54
 8005130:	4618      	mov	r0, r3
 8005132:	f001 f8fd 	bl	8006330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ff8b 	bl	8006060 <vPortFree>
				vPortFree( pxTCB );
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 ff88 	bl	8006060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005150:	e018      	b.n	8005184 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005158:	2b01      	cmp	r3, #1
 800515a:	d103      	bne.n	8005164 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 ff7f 	bl	8006060 <vPortFree>
	}
 8005162:	e00f      	b.n	8005184 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800516a:	2b02      	cmp	r3, #2
 800516c:	d00a      	beq.n	8005184 <prvDeleteTCB+0x60>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <prvDeleteTCB+0x5e>
	}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvResetNextTaskUnblockTime+0x38>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvResetNextTaskUnblockTime+0x3c>)
 800519e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051a4:	e008      	b.n	80051b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <prvResetNextTaskUnblockTime+0x38>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <prvResetNextTaskUnblockTime+0x3c>)
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	20000df0 	.word	0x20000df0
 80051c8:	20000e58 	.word	0x20000e58

080051cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <xTaskGetSchedulerState+0x34>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051da:	2301      	movs	r3, #1
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e008      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <xTaskGetSchedulerState+0x38>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e8:	2302      	movs	r3, #2
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e001      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051f2:	687b      	ldr	r3, [r7, #4]
	}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000e44 	.word	0x20000e44
 8005204:	20000e60 	.word	0x20000e60

08005208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d056      	beq.n	80052cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800521e:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <xTaskPriorityDisinherit+0xd0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d00a      	beq.n	800523e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60fb      	str	r3, [r7, #12]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60bb      	str	r3, [r7, #8]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	429a      	cmp	r2, r3
 8005270:	d02c      	beq.n	80052cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	2b00      	cmp	r3, #0
 8005278:	d128      	bne.n	80052cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fb54 	bl	800392c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <xTaskPriorityDisinherit+0xd4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d903      	bls.n	80052ac <xTaskPriorityDisinherit+0xa4>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <xTaskPriorityDisinherit+0xd4>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <xTaskPriorityDisinherit+0xd8>)
 80052ba:	441a      	add	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7fe fad5 	bl	8003872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052cc:	697b      	ldr	r3, [r7, #20]
	}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000964 	.word	0x20000964
 80052dc:	20000e40 	.word	0x20000e40
 80052e0:	20000968 	.word	0x20000968

080052e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <prvAddCurrentTaskToDelayedList+0x90>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fb16 	bl	800392c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005306:	d10a      	bne.n	800531e <prvAddCurrentTaskToDelayedList+0x3a>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4819      	ldr	r0, [pc, #100]	; (800537c <prvAddCurrentTaskToDelayedList+0x98>)
 8005318:	f7fe faab 	bl	8003872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800531c:	e026      	b.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d209      	bcs.n	800534a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe fab9 	bl	80038ba <vListInsert>
}
 8005348:	e010      	b.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe faaf 	bl	80038ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d202      	bcs.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005366:	4a08      	ldr	r2, [pc, #32]	; (8005388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000e3c 	.word	0x20000e3c
 8005378:	20000964 	.word	0x20000964
 800537c:	20000e24 	.word	0x20000e24
 8005380:	20000df4 	.word	0x20000df4
 8005384:	20000df0 	.word	0x20000df0
 8005388:	20000e58 	.word	0x20000e58

0800538c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	; 0x28
 8005390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005396:	f000 fb07 	bl	80059a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <xTimerCreateTimerTask+0x80>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d021      	beq.n	80053e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	f107 0108 	add.w	r1, r7, #8
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe fa15 	bl	80037e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	9202      	str	r2, [sp, #8]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	2302      	movs	r3, #2
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	460a      	mov	r2, r1
 80053cc:	4910      	ldr	r1, [pc, #64]	; (8005410 <xTimerCreateTimerTask+0x84>)
 80053ce:	4811      	ldr	r0, [pc, #68]	; (8005414 <xTimerCreateTimerTask+0x88>)
 80053d0:	f7ff f8b4 	bl	800453c <xTaskCreateStatic>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <xTimerCreateTimerTask+0x8c>)
 80053d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <xTimerCreateTimerTask+0x8c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	613b      	str	r3, [r7, #16]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005402:	697b      	ldr	r3, [r7, #20]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000e94 	.word	0x20000e94
 8005410:	080064ec 	.word	0x080064ec
 8005414:	08005551 	.word	0x08005551
 8005418:	20000e98 	.word	0x20000e98

0800541c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <xTimerGenericCommand+0x98>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d02a      	beq.n	80054a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b05      	cmp	r3, #5
 8005462:	dc18      	bgt.n	8005496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005464:	f7ff feb2 	bl	80051cc <xTaskGetSchedulerState>
 8005468:	4603      	mov	r3, r0
 800546a:	2b02      	cmp	r3, #2
 800546c:	d109      	bne.n	8005482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xTimerGenericCommand+0x98>)
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	f107 0110 	add.w	r1, r7, #16
 8005476:	2300      	movs	r3, #0
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	f7fe fc29 	bl	8003cd0 <xQueueGenericSend>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24
 8005480:	e012      	b.n	80054a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <xTimerGenericCommand+0x98>)
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f107 0110 	add.w	r1, r7, #16
 800548a:	2300      	movs	r3, #0
 800548c:	2200      	movs	r2, #0
 800548e:	f7fe fc1f 	bl	8003cd0 <xQueueGenericSend>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24
 8005494:	e008      	b.n	80054a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <xTimerGenericCommand+0x98>)
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f107 0110 	add.w	r1, r7, #16
 800549e:	2300      	movs	r3, #0
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	f7fe fd13 	bl	8003ecc <xQueueGenericSendFromISR>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000e94 	.word	0x20000e94

080054b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	4b22      	ldr	r3, [pc, #136]	; (800554c <prvProcessExpiredTimer+0x94>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fa2b 	bl	800392c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d022      	beq.n	800552a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	18d1      	adds	r1, r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f000 f8d1 	bl	8005698 <prvInsertTimerInActiveList>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01f      	beq.n	800553c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054fc:	2300      	movs	r3, #0
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	2300      	movs	r3, #0
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	2100      	movs	r1, #0
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f7ff ff88 	bl	800541c <xTimerGenericCommand>
 800550c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	b2da      	uxtb	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	6978      	ldr	r0, [r7, #20]
 8005542:	4798      	blx	r3
}
 8005544:	bf00      	nop
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000e8c 	.word	0x20000e8c

08005550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f857 	bl	8005610 <prvGetNextExpireTime>
 8005562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f803 	bl	8005574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800556e:	f000 f8d5 	bl	800571c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005572:	e7f1      	b.n	8005558 <prvTimerTask+0x8>

08005574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800557e:	f7ff fa39 	bl	80049f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f866 	bl	8005658 <prvSampleTimeNow>
 800558c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d130      	bne.n	80055f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <prvProcessTimerOrBlockTask+0x3c>
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d806      	bhi.n	80055b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055a2:	f7ff fa35 	bl	8004a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff85 	bl	80054b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055ae:	e024      	b.n	80055fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <prvProcessTimerOrBlockTask+0x90>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <prvProcessTimerOrBlockTask+0x50>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <prvProcessTimerOrBlockTask+0x52>
 80055c4:	2300      	movs	r3, #0
 80055c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <prvProcessTimerOrBlockTask+0x94>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7fe ff7d 	bl	80044d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055da:	f7ff fa19 	bl	8004a10 <xTaskResumeAll>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <prvProcessTimerOrBlockTask+0x98>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
}
 80055f4:	e001      	b.n	80055fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055f6:	f7ff fa0b 	bl	8004a10 <xTaskResumeAll>
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000e90 	.word	0x20000e90
 8005608:	20000e94 	.word	0x20000e94
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <prvGetNextExpireTime+0x44>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <prvGetNextExpireTime+0x16>
 8005622:	2201      	movs	r2, #1
 8005624:	e000      	b.n	8005628 <prvGetNextExpireTime+0x18>
 8005626:	2200      	movs	r2, #0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005634:	4b07      	ldr	r3, [pc, #28]	; (8005654 <prvGetNextExpireTime+0x44>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e001      	b.n	8005644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005644:	68fb      	ldr	r3, [r7, #12]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000e8c 	.word	0x20000e8c

08005658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005660:	f7ff fa74 	bl	8004b4c <xTaskGetTickCount>
 8005664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <prvSampleTimeNow+0x3c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d205      	bcs.n	800567c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005670:	f000 f936 	bl	80058e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e002      	b.n	8005682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005682:	4a04      	ldr	r2, [pc, #16]	; (8005694 <prvSampleTimeNow+0x3c>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000e9c 	.word	0x20000e9c

08005698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d812      	bhi.n	80056e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e01b      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <prvInsertTimerInActiveList+0x7c>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f7fe f8ec 	bl	80038ba <vListInsert>
 80056e2:	e012      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d206      	bcs.n	80056fa <prvInsertTimerInActiveList+0x62>
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d302      	bcc.n	80056fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e007      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <prvInsertTimerInActiveList+0x80>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3304      	adds	r3, #4
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f7fe f8d8 	bl	80038ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800570a:	697b      	ldr	r3, [r7, #20]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000e90 	.word	0x20000e90
 8005718:	20000e8c 	.word	0x20000e8c

0800571c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005722:	e0ca      	b.n	80058ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da18      	bge.n	800575c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	3304      	adds	r3, #4
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005752:	6850      	ldr	r0, [r2, #4]
 8005754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	4611      	mov	r1, r2
 800575a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f2c0 80aa 	blt.w	80058b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe f8d9 	bl	800392c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800577a:	463b      	mov	r3, r7
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff6b 	bl	8005658 <prvSampleTimeNow>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b09      	cmp	r3, #9
 8005788:	f200 8097 	bhi.w	80058ba <prvProcessReceivedCommands+0x19e>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <prvProcessReceivedCommands+0x78>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057bd 	.word	0x080057bd
 80057a0:	08005831 	.word	0x08005831
 80057a4:	08005845 	.word	0x08005845
 80057a8:	0800588f 	.word	0x0800588f
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057bd 	.word	0x080057bd
 80057b4:	08005831 	.word	0x08005831
 80057b8:	08005845 	.word	0x08005845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	18d1      	adds	r1, r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057dc:	f7ff ff5c 	bl	8005698 <prvInsertTimerInActiveList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d069      	beq.n	80058ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d05e      	beq.n	80058ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	441a      	add	r2, r3
 8005804:	2300      	movs	r3, #0
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2300      	movs	r3, #0
 800580a:	2100      	movs	r1, #0
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f7ff fe05 	bl	800541c <xTimerGenericCommand>
 8005812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d14f      	bne.n	80058ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	61bb      	str	r3, [r7, #24]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005842:	e03a      	b.n	80058ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	617b      	str	r3, [r7, #20]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	18d1      	adds	r1, r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005888:	f7ff ff06 	bl	8005698 <prvInsertTimerInActiveList>
					break;
 800588c:	e015      	b.n	80058ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800589c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589e:	f000 fbdf 	bl	8006060 <vPortFree>
 80058a2:	e00a      	b.n	80058ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058b6:	e000      	b.n	80058ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <prvProcessReceivedCommands+0x1c0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1d39      	adds	r1, r7, #4
 80058c0:	2200      	movs	r2, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fb9e 	bl	8004004 <xQueueReceive>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af2a 	bne.w	8005724 <prvProcessReceivedCommands+0x8>
	}
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	3730      	adds	r7, #48	; 0x30
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000e94 	.word	0x20000e94

080058e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058e6:	e048      	b.n	800597a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e8:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f2:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe f813 	bl	800392c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02e      	beq.n	800597a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90e      	bls.n	800594c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800593a:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fd ffb8 	bl	80038ba <vListInsert>
 800594a:	e016      	b.n	800597a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800594c:	2300      	movs	r3, #0
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	2100      	movs	r1, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fd60 	bl	800541c <xTimerGenericCommand>
 800595c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	603b      	str	r3, [r7, #0]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1b1      	bne.n	80058e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005984:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <prvSwitchTimerLists+0xc4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvSwitchTimerLists+0xc0>)
 8005990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <prvSwitchTimerLists+0xc4>)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000e8c 	.word	0x20000e8c
 80059a4:	20000e90 	.word	0x20000e90

080059a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059ae:	f000 f969 	bl	8005c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <prvCheckForValidListAndQueue+0x60>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d120      	bne.n	80059fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059ba:	4814      	ldr	r0, [pc, #80]	; (8005a0c <prvCheckForValidListAndQueue+0x64>)
 80059bc:	f7fd ff2c 	bl	8003818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059c0:	4813      	ldr	r0, [pc, #76]	; (8005a10 <prvCheckForValidListAndQueue+0x68>)
 80059c2:	f7fd ff29 	bl	8003818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059c6:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <prvCheckForValidListAndQueue+0x6c>)
 80059c8:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <prvCheckForValidListAndQueue+0x64>)
 80059ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059cc:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <prvCheckForValidListAndQueue+0x70>)
 80059ce:	4a10      	ldr	r2, [pc, #64]	; (8005a10 <prvCheckForValidListAndQueue+0x68>)
 80059d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <prvCheckForValidListAndQueue+0x74>)
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <prvCheckForValidListAndQueue+0x78>)
 80059da:	2110      	movs	r1, #16
 80059dc:	200a      	movs	r0, #10
 80059de:	f7fe f837 	bl	8003a50 <xQueueGenericCreateStatic>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <prvCheckForValidListAndQueue+0x60>)
 80059e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <prvCheckForValidListAndQueue+0x60>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <prvCheckForValidListAndQueue+0x60>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	490b      	ldr	r1, [pc, #44]	; (8005a24 <prvCheckForValidListAndQueue+0x7c>)
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fd18 	bl	800442c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059fc:	f000 f972 	bl	8005ce4 <vPortExitCritical>
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000e94 	.word	0x20000e94
 8005a0c:	20000e64 	.word	0x20000e64
 8005a10:	20000e78 	.word	0x20000e78
 8005a14:	20000e8c 	.word	0x20000e8c
 8005a18:	20000e90 	.word	0x20000e90
 8005a1c:	20000f40 	.word	0x20000f40
 8005a20:	20000ea0 	.word	0x20000ea0
 8005a24:	080064f4 	.word	0x080064f4

08005a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <pxPortInitialiseStack+0x64>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b14      	subs	r3, #20
 8005a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 0202 	mvn.w	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b20      	subs	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	08005a91 	.word	0x08005a91

08005a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <prvTaskExitError+0x54>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa2:	d00a      	beq.n	8005aba <prvTaskExitError+0x2a>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <prvTaskExitError+0x28>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60bb      	str	r3, [r7, #8]
}
 8005acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ace:	bf00      	nop
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0fc      	beq.n	8005ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20000028 	.word	0x20000028
	...

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <xPortStartScheduler+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x26>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <xPortStartScheduler+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10a      	bne.n	8005b86 <xPortStartScheduler+0x46>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <xPortStartScheduler+0x130>)
 8005bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bae:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb4:	e009      	b.n	8005bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d0ef      	beq.n	8005bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bd6:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1c3 0307 	rsb	r3, r3, #7
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00a      	beq.n	8005bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c2e:	f000 f8dd 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <xPortStartScheduler+0x13c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c38:	f000 f8fc 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c48:	f7ff ff66 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c4c:	f7ff f848 	bl	8004ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8005c50:	f7ff ff1e 	bl	8005a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed00 	.word	0xe000ed00
 8005c64:	410fc271 	.word	0x410fc271
 8005c68:	410fc270 	.word	0x410fc270
 8005c6c:	e000e400 	.word	0xe000e400
 8005c70:	20000f90 	.word	0x20000f90
 8005c74:	20000f94 	.word	0x20000f94
 8005c78:	e000ed20 	.word	0xe000ed20
 8005c7c:	20000028 	.word	0x20000028
 8005c80:	e000ef34 	.word	0xe000ef34

08005c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
}
 8005c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <vPortEnterCritical+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10f      	bne.n	8005cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <vPortEnterCritical+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vPortEnterCritical+0x4a>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000028 	.word	0x20000028
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vPortExitCritical+0x50>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vPortExitCritical+0x24>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	607b      	str	r3, [r7, #4]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortExitCritical+0x50>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <vPortExitCritical+0x50>)
 8005d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <vPortExitCritical+0x42>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f383 8811 	msr	BASEPRI, r3
}
 8005d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000028 	.word	0x20000028
	...

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7fe ffb6 	bl	8004ce0 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7fe fed3 	bl	8004b6c <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <xPortSysTickHandler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d914      	bls.n	8005e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <vPortValidateInterruptPriority+0x70>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e64:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <vPortValidateInterruptPriority+0x74>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	7afa      	ldrb	r2, [r7, #11]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20a      	bcs.n	8005e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <vPortValidateInterruptPriority+0x78>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <vPortValidateInterruptPriority+0x7c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d90a      	bls.n	8005eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	603b      	str	r3, [r7, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <vPortValidateInterruptPriority+0x60>
	}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	e000e3f0 	.word	0xe000e3f0
 8005ebc:	20000f90 	.word	0x20000f90
 8005ec0:	e000ed0c 	.word	0xe000ed0c
 8005ec4:	20000f94 	.word	0x20000f94

08005ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed4:	f7fe fd8e 	bl	80049f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ed8:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <pvPortMalloc+0x180>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee0:	f000 f920 	bl	8006124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <pvPortMalloc+0x184>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8093 	bne.w	8006018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ef8:	2208      	movs	r2, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <pvPortMalloc+0x6c>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	617b      	str	r3, [r7, #20]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06e      	beq.n	8006018 <pvPortMalloc+0x150>
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <pvPortMalloc+0x188>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d869      	bhi.n	8006018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f44:	4b43      	ldr	r3, [pc, #268]	; (8006054 <pvPortMalloc+0x18c>)
 8005f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <pvPortMalloc+0x18c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4e:	e004      	b.n	8005f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d903      	bls.n	8005f6c <pvPortMalloc+0xa4>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <pvPortMalloc+0x180>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d050      	beq.n	8006018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	2308      	movs	r3, #8
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d91f      	bls.n	8005fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	613b      	str	r3, [r7, #16]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f000 f908 	bl	80061e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <pvPortMalloc+0x188>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <pvPortMalloc+0x188>)
 8005fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <pvPortMalloc+0x188>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <pvPortMalloc+0x190>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d203      	bcs.n	8005ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <pvPortMalloc+0x188>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <pvPortMalloc+0x190>)
 8005ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x184>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	431a      	orrs	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <pvPortMalloc+0x194>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <pvPortMalloc+0x194>)
 8006016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006018:	f7fe fcfa 	bl	8004a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <pvPortMalloc+0x174>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60fb      	str	r3, [r7, #12]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <pvPortMalloc+0x172>
	return pvReturn;
 800603c:	69fb      	ldr	r3, [r7, #28]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	; 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20004ba0 	.word	0x20004ba0
 800604c:	20004bb4 	.word	0x20004bb4
 8006050:	20004ba4 	.word	0x20004ba4
 8006054:	20004b98 	.word	0x20004b98
 8006058:	20004ba8 	.word	0x20004ba8
 800605c:	20004bac 	.word	0x20004bac

08006060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04d      	beq.n	800610e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006072:	2308      	movs	r3, #8
 8006074:	425b      	negs	r3, r3
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <vPortFree+0xb8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vPortFree+0x44>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <vPortFree+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <vPortFree+0xb8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <vPortFree+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060e8:	f7fe fc84 	bl	80049f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <vPortFree+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <vPortFree+0xbc>)
 80060f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f874 	bl	80061e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <vPortFree+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a06      	ldr	r2, [pc, #24]	; (8006120 <vPortFree+0xc0>)
 8006108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800610a:	f7fe fc81 	bl	8004a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20004bb4 	.word	0x20004bb4
 800611c:	20004ba4 	.word	0x20004ba4
 8006120:	20004bb0 	.word	0x20004bb0

08006124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800612a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800612e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvHeapInit+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3307      	adds	r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <prvHeapInit+0xac>)
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <prvHeapInit+0xb0>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <prvHeapInit+0xb0>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006170:	2208      	movs	r2, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <prvHeapInit+0xb4>)
 8006184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvHeapInit+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <prvHeapInit+0xb4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvHeapInit+0xb4>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <prvHeapInit+0xb8>)
 80061b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <prvHeapInit+0xbc>)
 80061ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvHeapInit+0xc0>)
 80061be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000f98 	.word	0x20000f98
 80061d4:	20004b98 	.word	0x20004b98
 80061d8:	20004ba0 	.word	0x20004ba0
 80061dc:	20004ba8 	.word	0x20004ba8
 80061e0:	20004ba4 	.word	0x20004ba4
 80061e4:	20004bb4 	.word	0x20004bb4

080061e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <prvInsertBlockIntoFreeList+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e002      	b.n	80061fc <prvInsertBlockIntoFreeList+0x14>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d8f7      	bhi.n	80061f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d108      	bne.n	800622a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d118      	bne.n	8006270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d00d      	beq.n	8006266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e008      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e003      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d002      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20004b98 	.word	0x20004b98
 8006298:	20004ba0 	.word	0x20004ba0

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4d0d      	ldr	r5, [pc, #52]	; (80062d4 <__libc_init_array+0x38>)
 80062a0:	4c0d      	ldr	r4, [pc, #52]	; (80062d8 <__libc_init_array+0x3c>)
 80062a2:	1b64      	subs	r4, r4, r5
 80062a4:	10a4      	asrs	r4, r4, #2
 80062a6:	2600      	movs	r6, #0
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	4d0b      	ldr	r5, [pc, #44]	; (80062dc <__libc_init_array+0x40>)
 80062ae:	4c0c      	ldr	r4, [pc, #48]	; (80062e0 <__libc_init_array+0x44>)
 80062b0:	f000 f8f2 	bl	8006498 <_init>
 80062b4:	1b64      	subs	r4, r4, r5
 80062b6:	10a4      	asrs	r4, r4, #2
 80062b8:	2600      	movs	r6, #0
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	080065b0 	.word	0x080065b0
 80062d8:	080065b0 	.word	0x080065b0
 80062dc:	080065b0 	.word	0x080065b0
 80062e0:	080065b4 	.word	0x080065b4

080062e4 <__retarget_lock_acquire_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <__retarget_lock_release_recursive>:
 80062e6:	4770      	bx	lr

080062e8 <memcpy>:
 80062e8:	440a      	add	r2, r1
 80062ea:	4291      	cmp	r1, r2
 80062ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062f0:	d100      	bne.n	80062f4 <memcpy+0xc>
 80062f2:	4770      	bx	lr
 80062f4:	b510      	push	{r4, lr}
 80062f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fe:	4291      	cmp	r1, r2
 8006300:	d1f9      	bne.n	80062f6 <memcpy+0xe>
 8006302:	bd10      	pop	{r4, pc}

08006304 <memset>:
 8006304:	4402      	add	r2, r0
 8006306:	4603      	mov	r3, r0
 8006308:	4293      	cmp	r3, r2
 800630a:	d100      	bne.n	800630e <memset+0xa>
 800630c:	4770      	bx	lr
 800630e:	f803 1b01 	strb.w	r1, [r3], #1
 8006312:	e7f9      	b.n	8006308 <memset+0x4>

08006314 <cleanup_glue>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	460c      	mov	r4, r1
 8006318:	6809      	ldr	r1, [r1, #0]
 800631a:	4605      	mov	r5, r0
 800631c:	b109      	cbz	r1, 8006322 <cleanup_glue+0xe>
 800631e:	f7ff fff9 	bl	8006314 <cleanup_glue>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632a:	f000 b869 	b.w	8006400 <_free_r>
	...

08006330 <_reclaim_reent>:
 8006330:	4b2c      	ldr	r3, [pc, #176]	; (80063e4 <_reclaim_reent+0xb4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4283      	cmp	r3, r0
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	d051      	beq.n	80063e0 <_reclaim_reent+0xb0>
 800633c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800633e:	b143      	cbz	r3, 8006352 <_reclaim_reent+0x22>
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d14a      	bne.n	80063dc <_reclaim_reent+0xac>
 8006346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006348:	6819      	ldr	r1, [r3, #0]
 800634a:	b111      	cbz	r1, 8006352 <_reclaim_reent+0x22>
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f857 	bl	8006400 <_free_r>
 8006352:	6961      	ldr	r1, [r4, #20]
 8006354:	b111      	cbz	r1, 800635c <_reclaim_reent+0x2c>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f852 	bl	8006400 <_free_r>
 800635c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800635e:	b111      	cbz	r1, 8006366 <_reclaim_reent+0x36>
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f84d 	bl	8006400 <_free_r>
 8006366:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006368:	b111      	cbz	r1, 8006370 <_reclaim_reent+0x40>
 800636a:	4620      	mov	r0, r4
 800636c:	f000 f848 	bl	8006400 <_free_r>
 8006370:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006372:	b111      	cbz	r1, 800637a <_reclaim_reent+0x4a>
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f843 	bl	8006400 <_free_r>
 800637a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800637c:	b111      	cbz	r1, 8006384 <_reclaim_reent+0x54>
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f83e 	bl	8006400 <_free_r>
 8006384:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006386:	b111      	cbz	r1, 800638e <_reclaim_reent+0x5e>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 f839 	bl	8006400 <_free_r>
 800638e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006390:	b111      	cbz	r1, 8006398 <_reclaim_reent+0x68>
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f834 	bl	8006400 <_free_r>
 8006398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800639a:	b111      	cbz	r1, 80063a2 <_reclaim_reent+0x72>
 800639c:	4620      	mov	r0, r4
 800639e:	f000 f82f 	bl	8006400 <_free_r>
 80063a2:	69a3      	ldr	r3, [r4, #24]
 80063a4:	b1e3      	cbz	r3, 80063e0 <_reclaim_reent+0xb0>
 80063a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063a8:	4620      	mov	r0, r4
 80063aa:	4798      	blx	r3
 80063ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063ae:	b1b9      	cbz	r1, 80063e0 <_reclaim_reent+0xb0>
 80063b0:	4620      	mov	r0, r4
 80063b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063b6:	f7ff bfad 	b.w	8006314 <cleanup_glue>
 80063ba:	5949      	ldr	r1, [r1, r5]
 80063bc:	b941      	cbnz	r1, 80063d0 <_reclaim_reent+0xa0>
 80063be:	3504      	adds	r5, #4
 80063c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c2:	2d80      	cmp	r5, #128	; 0x80
 80063c4:	68d9      	ldr	r1, [r3, #12]
 80063c6:	d1f8      	bne.n	80063ba <_reclaim_reent+0x8a>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f819 	bl	8006400 <_free_r>
 80063ce:	e7ba      	b.n	8006346 <_reclaim_reent+0x16>
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f814 	bl	8006400 <_free_r>
 80063d8:	4631      	mov	r1, r6
 80063da:	e7ef      	b.n	80063bc <_reclaim_reent+0x8c>
 80063dc:	2500      	movs	r5, #0
 80063de:	e7ef      	b.n	80063c0 <_reclaim_reent+0x90>
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	bf00      	nop
 80063e4:	2000002c 	.word	0x2000002c

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_lock+0x8>)
 80063ea:	f7ff bf7b 	b.w	80062e4 <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20004bb8 	.word	0x20004bb8

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__malloc_unlock+0x8>)
 80063f6:	f7ff bf76 	b.w	80062e6 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20004bb8 	.word	0x20004bb8

08006400 <_free_r>:
 8006400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006402:	2900      	cmp	r1, #0
 8006404:	d044      	beq.n	8006490 <_free_r+0x90>
 8006406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640a:	9001      	str	r0, [sp, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f1a1 0404 	sub.w	r4, r1, #4
 8006412:	bfb8      	it	lt
 8006414:	18e4      	addlt	r4, r4, r3
 8006416:	f7ff ffe7 	bl	80063e8 <__malloc_lock>
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <_free_r+0x94>)
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	b933      	cbnz	r3, 8006430 <_free_r+0x30>
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	6014      	str	r4, [r2, #0]
 8006426:	b003      	add	sp, #12
 8006428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800642c:	f7ff bfe2 	b.w	80063f4 <__malloc_unlock>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d908      	bls.n	8006446 <_free_r+0x46>
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	1961      	adds	r1, r4, r5
 8006438:	428b      	cmp	r3, r1
 800643a:	bf01      	itttt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	1949      	addeq	r1, r1, r5
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	e7ed      	b.n	8006422 <_free_r+0x22>
 8006446:	461a      	mov	r2, r3
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b10b      	cbz	r3, 8006450 <_free_r+0x50>
 800644c:	42a3      	cmp	r3, r4
 800644e:	d9fa      	bls.n	8006446 <_free_r+0x46>
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	1855      	adds	r5, r2, r1
 8006454:	42a5      	cmp	r5, r4
 8006456:	d10b      	bne.n	8006470 <_free_r+0x70>
 8006458:	6824      	ldr	r4, [r4, #0]
 800645a:	4421      	add	r1, r4
 800645c:	1854      	adds	r4, r2, r1
 800645e:	42a3      	cmp	r3, r4
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	d1e0      	bne.n	8006426 <_free_r+0x26>
 8006464:	681c      	ldr	r4, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	4421      	add	r1, r4
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	e7da      	b.n	8006426 <_free_r+0x26>
 8006470:	d902      	bls.n	8006478 <_free_r+0x78>
 8006472:	230c      	movs	r3, #12
 8006474:	6003      	str	r3, [r0, #0]
 8006476:	e7d6      	b.n	8006426 <_free_r+0x26>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf04      	itt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	bf04      	itt	eq
 8006488:	1949      	addeq	r1, r1, r5
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	6054      	str	r4, [r2, #4]
 800648e:	e7ca      	b.n	8006426 <_free_r+0x26>
 8006490:	b003      	add	sp, #12
 8006492:	bd30      	pop	{r4, r5, pc}
 8006494:	20004bbc 	.word	0x20004bbc

08006498 <_init>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	bf00      	nop
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr

080064a4 <_fini>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr
