
NRF24L01_SPEED_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800880c  0800880c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008814  08008814  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800881c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c38  20000078  08008894  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  08008894  00024cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e698  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bae  00000000  00000000  0003e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  000422f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00043b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004456  00000000  00000000  00045298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a564  00000000  00000000  000496ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a55bf  00000000  00000000  00063c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d00  00000000  00000000  00109264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008520 	.word	0x08008520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008520 	.word	0x08008520

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 f8c0 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f864 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 faaa 	bl	8000ae8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000594:	f000 f970 	bl	8000878 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 fa7c 	bl	8000a94 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800059c:	f000 f8c6 	bl	800072c <MX_ADC1_Init>
  MX_TIM2_Init();
 80005a0:	f000 f9a0 	bl	80008e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005a4:	f000 fa06 	bl	80009b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f001 f8f0 	bl	8001790 <HAL_Delay>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b0:	f004 fb46 	bl	8004c40 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <main+0x98>)
 80005b6:	2101      	movs	r1, #1
 80005b8:	2001      	movs	r0, #1
 80005ba:	f004 fc38 	bl	8004e2e <osSemaphoreNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <main+0x9c>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RQueue */
  RQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &RQueue_attributes);
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <main+0xa0>)
 80005c6:	2102      	movs	r1, #2
 80005c8:	2005      	movs	r0, #5
 80005ca:	f004 fcb9 	bl	8004f40 <osMessageQueueNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a15      	ldr	r2, [pc, #84]	; (8000628 <main+0xa4>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of DATAQueue */
  DATAQueueHandle = osMessageQueueNew (1, sizeof(DATA), &DATAQueue_attributes);
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <main+0xa8>)
 80005d6:	210a      	movs	r1, #10
 80005d8:	2001      	movs	r0, #1
 80005da:	f004 fcb1 	bl	8004f40 <osMessageQueueNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <main+0xac>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <main+0xb0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <main+0xb4>)
 80005ea:	f004 fb73 	bl	8004cd4 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <main+0xb8>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of tx_task */
  tx_taskHandle = osThreadNew(Start_tx_task, NULL, &tx_task_attributes);
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <main+0xbc>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0xc0>)
 80005fa:	f004 fb6b 	bl	8004cd4 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a11      	ldr	r2, [pc, #68]	; (8000648 <main+0xc4>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of rx_Task */
  rx_TaskHandle = osThreadNew(Start_rx_Task, NULL, &rx_Task_attributes);
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <main+0xc8>)
 8000606:	2100      	movs	r1, #0
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <main+0xcc>)
 800060a:	f004 fb63 	bl	8004cd4 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <main+0xd0>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f004 fb38 	bl	8004c88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x94>
 800061a:	bf00      	nop
 800061c:	08008750 	.word	0x08008750
 8000620:	2000021c 	.word	0x2000021c
 8000624:	08008720 	.word	0x08008720
 8000628:	20000214 	.word	0x20000214
 800062c:	08008738 	.word	0x08008738
 8000630:	20000218 	.word	0x20000218
 8000634:	080086b4 	.word	0x080086b4
 8000638:	08000c1d 	.word	0x08000c1d
 800063c:	20000208 	.word	0x20000208
 8000640:	080086d8 	.word	0x080086d8
 8000644:	08000c35 	.word	0x08000c35
 8000648:	2000020c 	.word	0x2000020c
 800064c:	080086fc 	.word	0x080086fc
 8000650:	08000c45 	.word	0x08000c45
 8000654:	20000210 	.word	0x20000210

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fa8a 	bl	8007b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <SystemClock_Config+0xd0>)
 80006a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006cc:	2319      	movs	r3, #25
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fee9 	bl	80024b8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 fac4 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2102      	movs	r1, #2
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f94b 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000718:	f000 faae 	bl	8000c78 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b4b      	ldr	r3, [pc, #300]	; (800086c <MX_ADC1_Init+0x140>)
 8000740:	4a4b      	ldr	r2, [pc, #300]	; (8000870 <MX_ADC1_Init+0x144>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000744:	4b49      	ldr	r3, [pc, #292]	; (800086c <MX_ADC1_Init+0x140>)
 8000746:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b47      	ldr	r3, [pc, #284]	; (800086c <MX_ADC1_Init+0x140>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <MX_ADC1_Init+0x140>)
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <MX_ADC1_Init+0x140>)
 800075a:	2201      	movs	r2, #1
 800075c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <MX_ADC1_Init+0x140>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_ADC1_Init+0x140>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b3f      	ldr	r3, [pc, #252]	; (800086c <MX_ADC1_Init+0x140>)
 800076e:	4a41      	ldr	r2, [pc, #260]	; (8000874 <MX_ADC1_Init+0x148>)
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <MX_ADC1_Init+0x140>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000778:	4b3c      	ldr	r3, [pc, #240]	; (800086c <MX_ADC1_Init+0x140>)
 800077a:	2207      	movs	r2, #7
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_ADC1_Init+0x140>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_ADC1_Init+0x140>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <MX_ADC1_Init+0x140>)
 800078e:	f001 f823 	bl	80017d8 <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 fa6e 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079c:	2301      	movs	r3, #1
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	482f      	ldr	r0, [pc, #188]	; (800086c <MX_ADC1_Init+0x140>)
 80007ae:	f001 f985 	bl	8001abc <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 fa5e 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007bc:	2305      	movs	r3, #5
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <MX_ADC1_Init+0x140>)
 80007ca:	f001 f977 	bl	8001abc <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d4:	f000 fa50 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007d8:	2306      	movs	r3, #6
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007dc:	2303      	movs	r3, #3
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4821      	ldr	r0, [pc, #132]	; (800086c <MX_ADC1_Init+0x140>)
 80007e6:	f001 f969 	bl	8001abc <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007f0:	f000 fa42 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <MX_ADC1_Init+0x140>)
 8000802:	f001 f95b 	bl	8001abc <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800080c:	f000 fa34 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000810:	2308      	movs	r3, #8
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000814:	2305      	movs	r3, #5
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_ADC1_Init+0x140>)
 800081e:	f001 f94d 	bl	8001abc <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000828:	f000 fa26 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000830:	2306      	movs	r3, #6
 8000832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_ADC1_Init+0x140>)
 800083a:	f001 f93f 	bl	8001abc <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000844:	f000 fa18 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000848:	2309      	movs	r3, #9
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800084c:	2307      	movs	r3, #7
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0x140>)
 8000856:	f001 f931 	bl	8001abc <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000860:	f000 fa0a 	bl	8000c78 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000094 	.word	0x20000094
 8000870:	40012000 	.word	0x40012000
 8000874:	0f000001 	.word	0x0f000001

08000878 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_SPI2_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_SPI2_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI2_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI2_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_SPI2_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI2_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI2_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI2_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_SPI2_Init+0x64>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_SPI2_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_SPI2_Init+0x64>)
 80008ca:	f002 fa7f 	bl	8002dcc <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f9d0 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000dc 	.word	0x200000dc
 80008e0:	40003800 	.word	0x40003800

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000910:	f240 227f 	movw	r2, #639	; 0x27f
 8000914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_TIM2_Init+0xcc>)
 800091e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_TIM2_Init+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000930:	481f      	ldr	r0, [pc, #124]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000932:	f003 f8af 	bl	8003a94 <HAL_TIM_PWM_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 f99c 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000950:	f003 fcee 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800095a:	f000 f98d 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095e:	2360      	movs	r3, #96	; 0x60
 8000960:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8000962:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000978:	f003 f9e4 	bl	8003d44 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000982:	f000 f979 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2204      	movs	r2, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM2_Init+0xcc>)
 8000992:	f003 f9d7 	bl	8003d44 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800099c:	f000 f96c 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM2_Init+0xcc>)
 80009a2:	f000 fa81 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000134 	.word	0x20000134

080009b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_TIM4_Init+0xdc>)
 80009da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009de:	f240 227f 	movw	r2, #639	; 0x27f
 80009e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009ec:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80009f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a00:	f003 f848 	bl	8003a94 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 f935 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a1e:	f003 fc87 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a28:	f000 f926 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	; 0x60
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a44:	f003 f97e 	bl	8003d44 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 f913 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2204      	movs	r2, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a5a:	f003 f973 	bl	8003d44 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a64:	f000 f908 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a70:	f003 f968 	bl	8003d44 <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000a7a:	f000 f8fd 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a80:	f000 fa12 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000017c 	.word	0x2000017c
 8000a90:	40000800 	.word	0x40000800

08000a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART1_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000acc:	f003 fcb2 	bl	8004434 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f8cf 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001c4 	.word	0x200001c4
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a41      	ldr	r2, [pc, #260]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a33      	ldr	r2, [pc, #204]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_GPIO_Init+0x124>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4826      	ldr	r0, [pc, #152]	; (8000c10 <MX_GPIO_Init+0x128>)
 8000b76:	f001 fc47 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2118      	movs	r1, #24
 8000b7e:	4825      	ldr	r0, [pc, #148]	; (8000c14 <MX_GPIO_Init+0x12c>)
 8000b80:	f001 fc42 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481c      	ldr	r0, [pc, #112]	; (8000c10 <MX_GPIO_Init+0x128>)
 8000b9e:	f001 fa97 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <MX_GPIO_Init+0x12c>)
 8000bb8:	f001 fa8a 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 8000bbc:	2318      	movs	r3, #24
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <MX_GPIO_Init+0x12c>)
 8000bd4:	f001 fa7c 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <MX_GPIO_Init+0x130>)
 8000bee:	f001 fa6f 	bl	80020d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	2008      	movs	r0, #8
 8000bf8:	f001 fa40 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bfc:	2008      	movs	r0, #8
 8000bfe:	f001 fa59 	bl	80020b4 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400

08000c1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
#if NRF_TEST_MODE == YES
	#if NRF_MODE == TX
		NRF24_init_TX();
	#endif
	#if NRF_MODE == RX
		NRF24_init_RX();
 8000c24:	f000 fb14 	bl	8001250 <NRF24_init_RX>
	#if NRF_MODE == TX
	  	NRF24L01_Transmit_Test_Data(1);
	  	osDelay(1000);
	#endif
	#if NRF_MODE == RX
	     NRF24L01_Receive_Test_Data();
 8000c28:	f000 fcc8 	bl	80015bc <NRF24L01_Receive_Test_Data>
	#endif
#endif
	  osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f004 f8e3 	bl	8004df8 <osDelay>
	     NRF24L01_Receive_Test_Data();
 8000c32:	e7f9      	b.n	8000c28 <StartDefaultTask+0xc>

08000c34 <Start_tx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_tx_task */
void Start_tx_task(void *argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


	for(;;)
	{
		osDelay(10);
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f004 f8db 	bl	8004df8 <osDelay>
 8000c42:	e7fb      	b.n	8000c3c <Start_tx_task+0x8>

08000c44 <Start_rx_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_rx_Task */
void Start_rx_Task(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]


	for(;;)
	{

		osDelay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f004 f8d3 	bl	8004df8 <osDelay>
 8000c52:	e7fb      	b.n	8000c4c <Start_rx_Task+0x8>

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d101      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c66:	f000 fd73 	bl	8001750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40014400 	.word	0x40014400

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x54>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_MspInit+0x54>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x54>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_MspInit+0x54>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_MspInit+0x54>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x54>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	f06f 0001 	mvn.w	r0, #1
 8000cca:	f001 f9d7 	bl	800207c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <HAL_ADC_MspInit+0xc0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d149      	bne.n	8000d92 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_ADC_MspInit+0xc4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000d52:	23e3      	movs	r3, #227	; 0xe3
 8000d54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_ADC_MspInit+0xc8>)
 8000d66:	f001 f9b3 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <HAL_ADC_MspInit+0xcc>)
 8000d7e:	f001 f9a7 	bl	80020d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2105      	movs	r1, #5
 8000d86:	2012      	movs	r0, #18
 8000d88:	f001 f978 	bl	800207c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d8c:	2012      	movs	r0, #18
 8000d8e:	f001 f991 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_SPI_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12c      	bne.n	8000e28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000e06:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e18:	2305      	movs	r3, #5
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_SPI_MspInit+0x8c>)
 8000e24:	f001 f954 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40003800 	.word	0x40003800
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020400 	.word	0x40020400

08000e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4c:	d10e      	bne.n	8000e6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e6a:	e012      	b.n	8000e92 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec8:	d13d      	bne.n	8000f46 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2a      	ldr	r2, [pc, #168]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f14:	2301      	movs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <HAL_TIM_MspPostInit+0xf4>)
 8000f20:	f001 f8d6 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f24:	2308      	movs	r3, #8
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000f40:	f001 f8c6 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f44:	e023      	b.n	8000f8e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_TIM_MspPostInit+0xfc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11e      	bne.n	8000f8e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_TIM_MspPostInit+0xf0>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000f6c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000f8a:	f001 f8a1 	bl	80020d0 <HAL_GPIO_Init>
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40000800 	.word	0x40000800

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001014:	2307      	movs	r3, #7
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0x8c>)
 8001020:	f001 f856 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40011000 	.word	0x40011000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_InitTick+0xd0>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_InitTick+0xd0>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001056:	6453      	str	r3, [r2, #68]	; 0x44
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_InitTick+0xd0>)
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fe7a 	bl	8002d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001074:	f001 fe64 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8001078:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <HAL_InitTick+0xd4>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_InitTick+0xd8>)
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_InitTick+0xdc>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_InitTick+0xd8>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_InitTick+0xd8>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_InitTick+0xd8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_InitTick+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_InitTick+0xd8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <HAL_InitTick+0xd8>)
 80010b0:	f002 fc34 	bl	800391c <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11b      	bne.n	80010fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HAL_InitTick+0xd8>)
 80010c4:	f002 fc84 	bl	80039d0 <HAL_TIM_Base_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d111      	bne.n	80010fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010d6:	2019      	movs	r0, #25
 80010d8:	f000 ffec 	bl	80020b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d808      	bhi.n	80010f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	2019      	movs	r0, #25
 80010e8:	f000 ffc8 	bl	800207c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_InitTick+0xe0>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e002      	b.n	80010fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3730      	adds	r7, #48	; 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	431bde83 	.word	0x431bde83
 8001110:	20000220 	.word	0x20000220
 8001114:	40014400 	.word	0x40014400
 8001118:	20000008 	.word	0x20000008

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 800114c:	2004      	movs	r0, #4
 800114e:	f001 f98f 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <ADC_IRQHandler+0x10>)
 800115e:	f000 fb7e 	bl	800185e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000094 	.word	0x20000094

0800116c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001172:	f002 fcde 	bl	8003b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000220 	.word	0x20000220

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f006 fcac 	bl	8007b0c <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20010000 	.word	0x20010000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000268 	.word	0x20000268
 80011e8:	20004cb0 	.word	0x20004cb0

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <DelayMicro>:
void NRF24_init_RX_1(uint8_t rf_chanels);


// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <DelayMicro+0x38>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <DelayMicro+0x3c>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0a9b      	lsrs	r3, r3, #10
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 800122e:	bf00      	nop
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1fa      	bne.n	8001230 <DelayMicro+0x20>
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000
 800124c:	02659117 	.word	0x02659117

08001250 <NRF24_init_RX>:
{
	 NRF24_init_TX_1(10);				// Works

}
void NRF24_init_RX(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	 NRF24_init_RX_1(10);					// Works
 8001254:	200a      	movs	r0, #10
 8001256:	f000 f803 	bl	8001260 <NRF24_init_RX_1>

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <NRF24_init_RX_1>:



// -------------------------------------------------------------------------------------
void NRF24_init_RX_1(uint8_t rf_chanels)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	{
		rf_chanels = 1;
	}


	 CE_RESET;
 800126a:	2200      	movs	r2, #0
 800126c:	2108      	movs	r1, #8
 800126e:	4827      	ldr	r0, [pc, #156]	; (800130c <NRF24_init_RX_1+0xac>)
 8001270:	f001 f8ca 	bl	8002408 <HAL_GPIO_WritePin>
	 //DelayMicro(5000);
	 osDelay(5);
 8001274:	2005      	movs	r0, #5
 8001276:	f003 fdbf 	bl	8004df8 <osDelay>
//	 HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800127a:	210a      	movs	r1, #10
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f87f 	bl	8001380 <NRF24_WriteReg>
	 //DelayMicro(5000);
//	 HAL_Delay(5);
	 osDelay(5);
 8001282:	2005      	movs	r0, #5
 8001284:	f003 fdb8 	bl	8004df8 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe0
 8001288:	2101      	movs	r1, #1
 800128a:	2001      	movs	r0, #1
 800128c:	f000 f878 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001290:	2101      	movs	r1, #1
 8001292:	2002      	movs	r0, #2
 8001294:	f000 f874 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001298:	2101      	movs	r1, #1
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f870 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 80012a0:	215f      	movs	r1, #95	; 0x5f
 80012a2:	2004      	movs	r0, #4
 80012a4:	f000 f86c 	bl	8001380 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 80012a8:	f000 f898 	bl	80013dc <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	201d      	movs	r0, #29
 80012b0:	f000 f866 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	201c      	movs	r0, #28
 80012b8:	f000 f862 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 80012bc:	2170      	movs	r1, #112	; 0x70
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 f85e 	bl	8001380 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, rf_chanels); 			//   2476 MHz
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4619      	mov	r1, r3
 80012c8:	2005      	movs	r0, #5
 80012ca:	f000 f859 	bl	8001380 <NRF24_WriteReg>

	 NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version
 80012ce:	2126      	movs	r1, #38	; 0x26
 80012d0:	2006      	movs	r0, #6
 80012d2:	f000 f855 	bl	8001380 <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, RF_PWR_MINUS_0dBM | RF_SPEED_DATA_RATES_250kbps);


	// Записати адреси для інших передавачів???

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_PIPE_0, TX_ADR_WIDTH);											// Write TX address
 80012d6:	2203      	movs	r2, #3
 80012d8:	490d      	ldr	r1, [pc, #52]	; (8001310 <NRF24_init_RX_1+0xb0>)
 80012da:	2010      	movs	r0, #16
 80012dc:	f000 f8d2 	bl	8001484 <NRF24_Write_Buf>
	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_PIPE_0, TX_ADR_WIDTH);											// Write RX address Pipe 1
 80012e0:	2203      	movs	r2, #3
 80012e2:	490b      	ldr	r1, [pc, #44]	; (8001310 <NRF24_init_RX_1+0xb0>)
 80012e4:	200a      	movs	r0, #10
 80012e6:	f000 f8cd 	bl	8001484 <NRF24_Write_Buf>
	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 1
 80012ea:	211e      	movs	r1, #30
 80012ec:	2011      	movs	r0, #17
 80012ee:	f000 f847 	bl	8001380 <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 80012f2:	f000 f93d 	bl	8001570 <NRF24L01_RX_Mode>
	 LED_OFF;
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <NRF24_init_RX_1+0xb4>)
 80012fe:	f001 f883 	bl	8002408 <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020000 	.word	0x40020000
 8001310:	20000004 	.word	0x20000004
 8001314:	40020800 	.word	0x40020800

08001318 <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8001326:	2200      	movs	r2, #0
 8001328:	2110      	movs	r1, #16
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <NRF24_ReadReg+0x60>)
 800132c:	f001 f86c 	bl	8002408 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8001330:	f107 020f 	add.w	r2, r7, #15
 8001334:	1df9      	adds	r1, r7, #7
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <NRF24_ReadReg+0x64>)
 8001340:	f002 f81a 	bl	8003378 <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d00c      	beq.n	8001364 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 800134a:	23ff      	movs	r3, #255	; 0xff
 800134c:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 800134e:	f107 020f 	add.w	r2, r7, #15
 8001352:	f107 010e 	add.w	r1, r7, #14
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <NRF24_ReadReg+0x64>)
 8001360:	f002 f80a 	bl	8003378 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001364:	2201      	movs	r2, #1
 8001366:	2110      	movs	r1, #16
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <NRF24_ReadReg+0x60>)
 800136a:	f001 f84d 	bl	8002408 <HAL_GPIO_WritePin>

	return dt;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020000 	.word	0x40020000
 800137c:	200000dc 	.word	0x200000dc

08001380 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	b2db      	uxtb	r3, r3
 8001398:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800139a:	2200      	movs	r2, #0
 800139c:	2110      	movs	r1, #16
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <NRF24_WriteReg+0x54>)
 80013a0:	f001 f832 	bl	8002408 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 80013a4:	1df9      	adds	r1, r7, #7
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	2201      	movs	r2, #1
 80013ac:	480a      	ldr	r0, [pc, #40]	; (80013d8 <NRF24_WriteReg+0x58>)
 80013ae:	f001 fd96 	bl	8002ede <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 80013b2:	1db9      	adds	r1, r7, #6
 80013b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b8:	2201      	movs	r2, #1
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <NRF24_WriteReg+0x58>)
 80013bc:	f001 fd8f 	bl	8002ede <HAL_SPI_Transmit>

	CS_OFF;
 80013c0:	2201      	movs	r2, #1
 80013c2:	2110      	movs	r1, #16
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <NRF24_WriteReg+0x54>)
 80013c6:	f001 f81f 	bl	8002408 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000
 80013d8:	200000dc 	.word	0x200000dc

080013dc <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 80013e2:	2350      	movs	r3, #80	; 0x50
 80013e4:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80013e6:	2200      	movs	r2, #0
 80013e8:	2110      	movs	r1, #16
 80013ea:	480f      	ldr	r0, [pc, #60]	; (8001428 <NRF24_ToggleFeatures+0x4c>)
 80013ec:	f001 f80c 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	2201      	movs	r2, #1
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <NRF24_ToggleFeatures+0x50>)
 80013fa:	f001 fd70 	bl	8002ede <HAL_SPI_Transmit>

	DelayMicro(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ff06 	bl	8001210 <DelayMicro>

	dt[0] = 0x73;
 8001404:	2373      	movs	r3, #115	; 0x73
 8001406:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	2201      	movs	r2, #1
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <NRF24_ToggleFeatures+0x50>)
 8001412:	f001 fd64 	bl	8002ede <HAL_SPI_Transmit>
	CS_OFF;
 8001416:	2201      	movs	r2, #1
 8001418:	2110      	movs	r1, #16
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <NRF24_ToggleFeatures+0x4c>)
 800141c:	f000 fff4 	bl	8002408 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020000 	.word	0x40020000
 800142c:	200000dc 	.word	0x200000dc

08001430 <NRF24_Read_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <NRF24_Read_Buf+0x4c>)
 8001446:	f000 ffdf 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 800144a:	1df9      	adds	r1, r7, #7
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001450:	2201      	movs	r2, #1
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <NRF24_Read_Buf+0x50>)
 8001454:	f001 fd43 	bl	8002ede <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <NRF24_Read_Buf+0x50>)
 8001464:	f001 fe77 	bl	8003156 <HAL_SPI_Receive>

	CS_OFF;
 8001468:	2201      	movs	r2, #1
 800146a:	2110      	movs	r1, #16
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <NRF24_Read_Buf+0x4c>)
 800146e:	f000 ffcb 	bl	8002408 <HAL_GPIO_WritePin>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020000 	.word	0x40020000
 8001480:	200000dc 	.word	0x200000dc

08001484 <NRF24_Write_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	b2db      	uxtb	r3, r3
 800149c:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800149e:	2200      	movs	r2, #0
 80014a0:	2110      	movs	r1, #16
 80014a2:	480f      	ldr	r0, [pc, #60]	; (80014e0 <NRF24_Write_Buf+0x5c>)
 80014a4:	f000 ffb0 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 80014a8:	1df9      	adds	r1, r7, #7
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	2201      	movs	r2, #1
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <NRF24_Write_Buf+0x60>)
 80014b2:	f001 fd14 	bl	8002ede <HAL_SPI_Transmit>

	DelayMicro(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff feaa 	bl	8001210 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <NRF24_Write_Buf+0x60>)
 80014c8:	f001 fd09 	bl	8002ede <HAL_SPI_Transmit>

	CS_OFF;
 80014cc:	2201      	movs	r2, #1
 80014ce:	2110      	movs	r1, #16
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <NRF24_Write_Buf+0x5c>)
 80014d2:	f000 ff99 	bl	8002408 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40020000 	.word	0x40020000
 80014e4:	200000dc 	.word	0x200000dc

080014e8 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 80014ee:	23e2      	movs	r3, #226	; 0xe2
 80014f0:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80014f2:	2200      	movs	r2, #0
 80014f4:	2110      	movs	r1, #16
 80014f6:	480b      	ldr	r0, [pc, #44]	; (8001524 <NRF24_FlushRX+0x3c>)
 80014f8:	f000 ff86 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	2201      	movs	r2, #1
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <NRF24_FlushRX+0x40>)
 8001506:	f001 fcea 	bl	8002ede <HAL_SPI_Transmit>
	DelayMicro(1);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fe80 	bl	8001210 <DelayMicro>
	CS_OFF;
 8001510:	2201      	movs	r2, #1
 8001512:	2110      	movs	r1, #16
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <NRF24_FlushRX+0x3c>)
 8001516:	f000 ff77 	bl	8002408 <HAL_GPIO_WritePin>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40020000 	.word	0x40020000
 8001528:	200000dc 	.word	0x200000dc

0800152c <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8001532:	23e1      	movs	r3, #225	; 0xe1
 8001534:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001536:	2200      	movs	r2, #0
 8001538:	2110      	movs	r1, #16
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <NRF24_FlushTX+0x3c>)
 800153c:	f000 ff64 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001540:	1d39      	adds	r1, r7, #4
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	2201      	movs	r2, #1
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <NRF24_FlushTX+0x40>)
 800154a:	f001 fcc8 	bl	8002ede <HAL_SPI_Transmit>
	DelayMicro(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff fe5e 	bl	8001210 <DelayMicro>
	CS_OFF;
 8001554:	2201      	movs	r2, #1
 8001556:	2110      	movs	r1, #16
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <NRF24_FlushTX+0x3c>)
 800155a:	f000 ff55 	bl	8002408 <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000
 800156c:	200000dc 	.word	0x200000dc

08001570 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fecc 	bl	8001318 <NRF24_ReadReg>
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f043 0303 	orr.w	r3, r3, #3
 800158a:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4619      	mov	r1, r3
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fef5 	bl	8001380 <NRF24_WriteReg>
	CE_SET;
 8001596:	2201      	movs	r2, #1
 8001598:	2108      	movs	r1, #8
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <NRF24L01_RX_Mode+0x48>)
 800159c:	f000 ff34 	bl	8002408 <HAL_GPIO_WritePin>

	DelayMicro(150);
 80015a0:	2096      	movs	r0, #150	; 0x96
 80015a2:	f7ff fe35 	bl	8001210 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 80015a6:	f7ff ff9f 	bl	80014e8 <NRF24_FlushRX>
	NRF24_FlushTX();
 80015aa:	f7ff ffbf 	bl	800152c <NRF24_FlushTX>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020000 	.word	0x40020000

080015bc <NRF24L01_Receive_Test_Data>:


}
// -------------------------------------------------------------------------------------
void NRF24L01_Receive_Test_Data(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t dt=0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	85bb      	strh	r3, [r7, #44]	; 0x2c

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 80015cc:	bf00      	nop
 80015ce:	2104      	movs	r1, #4
 80015d0:	4832      	ldr	r0, [pc, #200]	; (800169c <NRF24L01_Receive_Test_Data+0xe0>)
 80015d2:	f000 ff01 	bl	80023d8 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d0f8      	beq.n	80015ce <NRF24L01_Receive_Test_Data+0x12>

//	status = NRF24_ReadReg(STATUS);

//	sprintf(str1,"STATUS: 0x%02X\r\n",status);
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	LED_TGL;
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <NRF24L01_Receive_Test_Data+0xe4>)
 80015e2:	f000 ff2a 	bl	800243a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80015e6:	200a      	movs	r0, #10
 80015e8:	f7ff fe12 	bl	8001210 <DelayMicro>

	status = NRF24_ReadReg(STATUS);
 80015ec:	2007      	movs	r0, #7
 80015ee:	f7ff fe93 	bl	8001318 <NRF24_ReadReg>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(status & 0x40)			// If new data in RX buffer available
 80015f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d047      	beq.n	8001694 <NRF24L01_Receive_Test_Data+0xd8>
	{
		NRF24_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH);
 8001604:	221e      	movs	r2, #30
 8001606:	4927      	ldr	r1, [pc, #156]	; (80016a4 <NRF24L01_Receive_Test_Data+0xe8>)
 8001608:	2061      	movs	r0, #97	; 0x61
 800160a:	f7ff ff11 	bl	8001430 <NRF24_Read_Buf>
		dt = *(int16_t*)RX_BUF;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <NRF24L01_Receive_Test_Data+0xe8>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	85bb      	strh	r3, [r7, #44]	; 0x2c
		//Clear_7219();
		//Number_7219(dt);
		dt = *(int16_t*)(RX_BUF+2);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <NRF24L01_Receive_Test_Data+0xec>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		//NumberL_7219(dt);
		NRF24_WriteReg(STATUS, 0x40);
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	2007      	movs	r0, #7
 8001622:	f7ff fead 	bl	8001380 <NRF24_WriteReg>

		char str_buff[40] = {0};
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2224      	movs	r2, #36	; 0x24
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f006 faa5 	bl	8007b80 <memset>

		uint8_t pipe_num = (status & 0xE) >> 1;
 8001636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800163a:	105b      	asrs	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


		sprintf(str_buff,"1. Transmission pipe: -> %d\r\n", pipe_num);
 8001646:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800164a:	463b      	mov	r3, r7
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <NRF24L01_Receive_Test_Data+0xf0>)
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fbac 	bl	8007dac <siprintf>
		HAL_UART_Transmit(&huart1, str_buff, sizeof(str_buff), 1000);
 8001654:	4639      	mov	r1, r7
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	2228      	movs	r2, #40	; 0x28
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <NRF24L01_Receive_Test_Data+0xf4>)
 800165e:	f002 ff36 	bl	80044ce <HAL_UART_Transmit>
		osDelay(10);
 8001662:	200a      	movs	r0, #10
 8001664:	f003 fbc8 	bl	8004df8 <osDelay>
		memset(str_buff, 0, sizeof(str_buff));
 8001668:	463b      	mov	r3, r7
 800166a:	2228      	movs	r2, #40	; 0x28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f006 fa86 	bl	8007b80 <memset>


		sprintf(str_buff,"2. %s \r\n", RX_BUF);
 8001674:	463b      	mov	r3, r7
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <NRF24L01_Receive_Test_Data+0xe8>)
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <NRF24L01_Receive_Test_Data+0xf8>)
 800167a:	4618      	mov	r0, r3
 800167c:	f006 fb96 	bl	8007dac <siprintf>
		HAL_UART_Transmit(&huart1, str_buff, sizeof(str_buff), 1000);
 8001680:	4639      	mov	r1, r7
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	2228      	movs	r2, #40	; 0x28
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <NRF24L01_Receive_Test_Data+0xf4>)
 800168a:	f002 ff20 	bl	80044ce <HAL_UART_Transmit>

		osDelay(10);
 800168e:	200a      	movs	r0, #10
 8001690:	f003 fbb2 	bl	8004df8 <osDelay>
//		sprintf(str_buff,"3. ARC_CNT.  RETR_PAC: -> %d\r\n", *(int16_t*)(RX_BUF+2));
//		HAL_UART_Transmit(&huart1, str_buff, sizeof(str_buff), 1000);
//		osDelay(10);

	}
}
 8001694:	bf00      	nop
 8001696:	3730      	adds	r7, #48	; 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020800 	.word	0x40020800
 80016a4:	2000026c 	.word	0x2000026c
 80016a8:	2000026e 	.word	0x2000026e
 80016ac:	08008670 	.word	0x08008670
 80016b0:	200001c4 	.word	0x200001c4
 80016b4:	08008690 	.word	0x08008690

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff fd83 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f006 fa17 	bl	8007b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7fe ff4b 	bl	8000584 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016fc:	0800881c 	.word	0x0800881c
  ldr r2, =_sbss
 8001700:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001704:	20004cb0 	.word	0x20004cb0

08001708 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <DMA1_Stream0_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fc96 	bl	8002066 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f7ff fc7c 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff faa0 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2000000c 	.word	0x2000000c
 8001774:	2000028c 	.word	0x2000028c

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000028c 	.word	0x2000028c

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000000c 	.word	0x2000000c

080017d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e033      	b.n	8001856 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fa70 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d118      	bne.n	8001848 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800181e:	f023 0302 	bic.w	r3, r3, #2
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa68 	bl	8001d00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
 8001846:	e001      	b.n	800184c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d049      	beq.n	8001928 <HAL_ADC_IRQHandler+0xca>
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d046      	beq.n	8001928 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d12b      	bne.n	8001918 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d127      	bne.n	8001918 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d119      	bne.n	8001918 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0220 	bic.w	r2, r2, #32
 80018f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f8b0 	bl	8001a7e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f06f 0212 	mvn.w	r2, #18
 8001926:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d057      	beq.n	80019ee <HAL_ADC_IRQHandler+0x190>
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d054      	beq.n	80019ee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d139      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12b      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	d124      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11d      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d119      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fa8a 	bl	8001ef8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 020c 	mvn.w	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d017      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x1d6>
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d014      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10d      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f834 	bl	8001a92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f06f 0201 	mvn.w	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_ADC_IRQHandler+0x218>
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f043 0202 	orr.w	r2, r3, #2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0220 	mvn.w	r2, #32
 8001a64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f81d 	bl	8001aa6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0220 	mvn.w	r2, #32
 8001a74:	601a      	str	r2, [r3, #0]
  }
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e105      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x228>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d925      	bls.n	8001b34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68d9      	ldr	r1, [r3, #12]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	2207      	movs	r2, #7
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4403      	add	r3, r0
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	e022      	b.n	8001b7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	2207      	movs	r2, #7
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	400a      	ands	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4403      	add	r3, r0
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d824      	bhi.n	8001bcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b05      	subs	r3, #5
 8001b94:	221f      	movs	r2, #31
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b05      	subs	r3, #5
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	e04c      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d824      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	; 0x23
 8001be6:	221f      	movs	r2, #31
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b23      	subs	r3, #35	; 0x23
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1c:	e023      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b41      	subs	r3, #65	; 0x41
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b41      	subs	r3, #65	; 0x41
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_ADC_ConfigChannel+0x234>)
 8001c68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_ADC_ConfigChannel+0x238>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d109      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1cc>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b12      	cmp	r3, #18
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_ADC_ConfigChannel+0x238>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d123      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x21e>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d003      	beq.n	8001ca2 <HAL_ADC_ConfigChannel+0x1e6>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b11      	cmp	r3, #17
 8001ca0:	d11b      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d111      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_ADC_ConfigChannel+0x23c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_ADC_ConfigChannel+0x240>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9a      	lsrs	r2, r3, #18
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40012300 	.word	0x40012300
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d08:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <ADC_Init+0x1f0>)
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <ADC_Init+0x1f4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d022      	beq.n	8001dde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e00f      	b.n	8001dfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0202 	bic.w	r2, r2, #2
 8001e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e1b      	ldrb	r3, [r3, #24]
 8001e18:	005a      	lsls	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	3b01      	subs	r3, #1
 8001e58:	035a      	lsls	r2, r3, #13
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	e007      	b.n	8001e74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	051a      	lsls	r2, r3, #20
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eb6:	025a      	lsls	r2, r3, #9
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ece:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6899      	ldr	r1, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	029a      	lsls	r2, r3, #10
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40012300 	.word	0x40012300
 8001ef4:	0f000001 	.word	0x0f000001

08001ef8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff4c 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208e:	f7ff ff61 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 8002092:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	6978      	ldr	r0, [r7, #20]
 800209a:	f7ff ffb1 	bl	8002000 <NVIC_EncodePriority>
 800209e:	4602      	mov	r2, r0
 80020a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff80 	bl	8001fac <__NVIC_SetPriority>
}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff54 	bl	8001f70 <__NVIC_EnableIRQ>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e159      	b.n	80023a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8148 	bne.w	800239a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a2 	beq.w	800239a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x2ec>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a49      	ldr	r2, [pc, #292]	; (80023c0 <HAL_GPIO_Init+0x2f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x202>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a48      	ldr	r2, [pc, #288]	; (80023c4 <HAL_GPIO_Init+0x2f4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x1fe>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_GPIO_Init+0x2f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x1fa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a46      	ldr	r2, [pc, #280]	; (80023cc <HAL_GPIO_Init+0x2fc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x1f6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a45      	ldr	r2, [pc, #276]	; (80023d0 <HAL_GPIO_Init+0x300>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x1f2>
 80022be:	2304      	movs	r3, #4
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022d2:	2300      	movs	r3, #0
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e4:	4935      	ldr	r1, [pc, #212]	; (80023bc <HAL_GPIO_Init+0x2ec>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_GPIO_Init+0x304>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_GPIO_Init+0x304>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f aea2 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43d9      	mvns	r1, r3
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f806 	bl	80024a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e267      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d075      	beq.n	80025c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d00c      	beq.n	80024fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d112      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05b      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d157      	bne.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e242      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x74>
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a75      	ldr	r2, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x98>
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6f      	ldr	r2, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6c      	ldr	r2, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a68      	ldr	r2, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff f902 	bl	8001778 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff f8fe 	bl	8001778 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e207      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0xc0>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff f8ee 	bl	8001778 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff f8ea 	bl	8001778 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1f3      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0xe8>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11c      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1c7      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	e03a      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x244>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7ff f8a3 	bl	8001778 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7ff f89f 	bl	8001778 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1a8      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4925      	ldr	r1, [pc, #148]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x244>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff f882 	bl	8001778 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7ff f87e 	bl	8001778 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e187      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d036      	beq.n	8002710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x248>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff f862 	bl	8001778 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b8:	f7ff f85e 	bl	8001778 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e167      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x200>
 80026d6:	e01b      	b.n	8002710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x248>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff f84b 	bl	8001778 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	e00e      	b.n	8002704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff f847 	bl	8001778 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d907      	bls.n	8002704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e150      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	42470000 	.word	0x42470000
 8002700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ea      	bne.n	80026e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8097 	beq.w	800284c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b77      	ldr	r3, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b74      	ldr	r3, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0x474>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a73      	ldr	r2, [pc, #460]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7ff f807 	bl	8001778 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7ff f803 	bl	8001778 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e10c      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2ea>
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a63      	ldr	r2, [pc, #396]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x324>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x30c>
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a5e      	ldr	r2, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x324>
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a54      	ldr	r2, [pc, #336]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe ffc8 	bl	8001778 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe ffc4 	bl	8001778 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0cb      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ee      	beq.n	80027ec <HAL_RCC_OscConfig+0x334>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe ffb2 	bl	8001778 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fe ffae 	bl	8001778 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e0b5      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ee      	bne.n	8002818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a1 	beq.w	8002998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d05c      	beq.n	800291c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d141      	bne.n	80028ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe ff82 	bl	8001778 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe ff7e 	bl	8001778 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e087      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	019b      	lsls	r3, r3, #6
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe ff57 	bl	8001778 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe ff53 	bl	8001778 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e05c      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x416>
 80028ec:	e054      	b.n	8002998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ff40 	bl	8001778 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe ff3c 	bl	8001778 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e045      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x444>
 800291a:	e03d      	b.n	8002998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e038      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x4ec>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d028      	beq.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d121      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d11a      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d111      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0cc      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90c      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d044      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e067      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fe6e 	bl	8001778 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fe6a 	bl	8001778 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e04f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20c      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fa72 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08008760 	.word	0x08008760
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000008 	.word	0x20000008

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b78:	b090      	sub	sp, #64	; 0x40
 8002b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	2300      	movs	r3, #0
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d00d      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	f200 80a1 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba6:	e09b      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bac:	e09b      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb2:	e098      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002be0:	fb03 f201 	mul.w	r2, r3, r1
 8002be4:	2300      	movs	r3, #0
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bee:	fba0 1202 	umull	r1, r2, r0, r2
 8002bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	2200      	movs	r2, #0
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	61fa      	str	r2, [r7, #28]
 8002c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c0e:	f7fd fb37 	bl	8000280 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4613      	mov	r3, r2
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1a:	e053      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	2200      	movs	r2, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	617a      	str	r2, [r7, #20]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c2e:	f04f 0b00 	mov.w	fp, #0
 8002c32:	4652      	mov	r2, sl
 8002c34:	465b      	mov	r3, fp
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c66:	ebb2 0408 	subs.w	r4, r2, r8
 8002c6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	00eb      	lsls	r3, r5, #3
 8002c78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7c:	00e2      	lsls	r2, r4, #3
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461d      	mov	r5, r3
 8002c82:	eb14 030a 	adds.w	r3, r4, sl
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	eb45 030b 	adc.w	r3, r5, fp
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	60fa      	str	r2, [r7, #12]
 8002cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb8:	f7fd fae2 	bl	8000280 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3740      	adds	r7, #64	; 0x40
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	017d7840 	.word	0x017d7840

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08008770 	.word	0x08008770

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffdc 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0b5b      	lsrs	r3, r3, #13
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08008770 	.word	0x08008770

08002d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	220f      	movs	r2, #15
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCC_GetClockConfig+0x60>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07b      	b.n	8002ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dee:	d009      	beq.n	8002e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
 8002df6:	e005      	b.n	8002e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd ffc4 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0104 	and.w	r1, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0210 	and.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b088      	sub	sp, #32
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_SPI_Transmit+0x22>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e126      	b.n	800314e <HAL_SPI_Transmit+0x270>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f08:	f7fe fc36 	bl	8001778 <HAL_GetTick>
 8002f0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f22:	e10b      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0x52>
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f34:	e102      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	d10f      	bne.n	8002f9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d007      	beq.n	8002fbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc4:	d14b      	bne.n	800305e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0xf6>
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d13e      	bne.n	8003052 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	1c9a      	adds	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff8:	e02b      	b.n	8003052 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d112      	bne.n	800302e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36
 800302c:	e011      	b.n	8003052 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	f7fe fba3 	bl	8001778 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d803      	bhi.n	8003046 <HAL_SPI_Transmit+0x168>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x16e>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003050:	e074      	b.n	800313c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ce      	bne.n	8002ffa <HAL_SPI_Transmit+0x11c>
 800305c:	e04c      	b.n	80030f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_SPI_Transmit+0x18e>
 8003066:	8afb      	ldrh	r3, [r7, #22]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d140      	bne.n	80030ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003092:	e02c      	b.n	80030ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d113      	bne.n	80030ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80030c8:	e011      	b.n	80030ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ca:	f7fe fb55 	bl	8001778 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d803      	bhi.n	80030e2 <HAL_SPI_Transmit+0x204>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Transmit+0x20a>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030ec:	e026      	b.n	800313c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1cd      	bne.n	8003094 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fbcb 	bl	8003898 <SPI_EndRxTxTransaction>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e000      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

error:
 800313a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800314c:	7ffb      	ldrb	r3, [r7, #31]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b088      	sub	sp, #32
 800315a:	af02      	add	r7, sp, #8
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003172:	d112      	bne.n	800319a <HAL_SPI_Receive+0x44>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10e      	bne.n	800319a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2204      	movs	r2, #4
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8f1 	bl	8003378 <HAL_SPI_TransmitReceive>
 8003196:	4603      	mov	r3, r0
 8003198:	e0ea      	b.n	8003370 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_Receive+0x52>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0e3      	b.n	8003370 <HAL_SPI_Receive+0x21a>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b0:	f7fe fae2 	bl	8001778 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031c6:	e0ca      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_Receive+0x7e>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d8:	e0c1      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2204      	movs	r2, #4
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	d10f      	bne.n	8003242 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d007      	beq.n	8003260 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d162      	bne.n	800332e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003268:	e02e      	b.n	80032c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f103 020c 	add.w	r2, r3, #12
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	7812      	ldrb	r2, [r2, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a2:	e011      	b.n	80032c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a4:	f7fe fa68 	bl	8001778 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d803      	bhi.n	80032bc <HAL_SPI_Receive+0x166>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Receive+0x16c>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032c6:	e04a      	b.n	800335e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1cb      	bne.n	800326a <HAL_SPI_Receive+0x114>
 80032d2:	e031      	b.n	8003338 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d113      	bne.n	800330a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	b292      	uxth	r2, r2
 80032ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003308:	e011      	b.n	800332e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330a:	f7fe fa35 	bl	8001778 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d803      	bhi.n	8003322 <HAL_SPI_Receive+0x1cc>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003320:	d102      	bne.n	8003328 <HAL_SPI_Receive+0x1d2>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800332c:	e017      	b.n	800335e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1cd      	bne.n	80032d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fa45 	bl	80037cc <SPI_EndRxTransaction>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
 800335a:	e000      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

error :
 800335c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003386:	2301      	movs	r3, #1
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_SPI_TransmitReceive+0x26>
 800339a:	2302      	movs	r3, #2
 800339c:	e18a      	b.n	80036b4 <HAL_SPI_TransmitReceive+0x33c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a6:	f7fe f9e7 	bl	8001778 <HAL_GetTick>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00f      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x70>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ce:	d107      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x68>
 80033d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d003      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033e6:	e15b      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x82>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x82>
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003400:	e14e      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	887a      	ldrh	r2, [r7, #2]
 8003426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d007      	beq.n	800346a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d178      	bne.n	8003566 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x10a>
 800347c:	8b7b      	ldrh	r3, [r7, #26]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d166      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a6:	e053      	b.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11b      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x176>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x176>
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x1b8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d014      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	b292      	uxth	r2, r2
 8003512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	1c9a      	adds	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003530:	f7fe f922 	bl	8001778 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800353c:	429a      	cmp	r2, r3
 800353e:	d807      	bhi.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003546:	d003      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800354e:	e0a7      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1a6      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x130>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1a1      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x130>
 8003564:	e07c      	b.n	8003660 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x1fc>
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d16b      	bne.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359a:	e057      	b.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d11c      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d017      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d114      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d119      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2ae>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d014      	beq.n	8003626 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003622:	2301      	movs	r3, #1
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003626:	f7fe f8a7 	bl	8001778 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_TransmitReceive+0x2c6>
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363c:	d102      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x2cc>
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800364a:	e029      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1a2      	bne.n	800359c <HAL_SPI_TransmitReceive+0x224>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d19d      	bne.n	800359c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f917 	bl	8003898 <SPI_EndRxTxTransaction>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800367c:	e010      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	e000      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800369e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	; 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fe f854 	bl	8001778 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fe f84c 	bl	8001778 <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fe f83c 	bl	8001778 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e0:	d111      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d004      	beq.n	80037f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d107      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380e:	d12a      	bne.n	8003866 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d012      	beq.n	8003840 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ff49 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02d      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e026      	b.n	800388e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	2101      	movs	r1, #1
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ff36 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01a      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e013      	b.n	800388e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	2101      	movs	r1, #1
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff ff23 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e000      	b.n	800388e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <SPI_EndRxTxTransaction+0x7c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <SPI_EndRxTxTransaction+0x80>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0d5b      	lsrs	r3, r3, #21
 80038b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d112      	bne.n	80038ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff fef4 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00f      	b.n	800390a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d0f2      	beq.n	80038ea <SPI_EndRxTxTransaction+0x52>
 8003904:	e000      	b.n	8003908 <SPI_EndRxTxTransaction+0x70>
        break;
 8003906:	bf00      	nop
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000
 8003918:	165e9f81 	.word	0x165e9f81

0800391c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e041      	b.n	80039b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f839 	bl	80039ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fadc 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d001      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e044      	b.n	8003a72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d013      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x6c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x6c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x6c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x6c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d010      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	e007      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40014000 	.word	0x40014000

08003a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e041      	b.n	8003b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd f9be 	bl	8000e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fa20 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d122      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d11b      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0202 	mvn.w	r2, #2
 8003b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9b1 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e005      	b.n	8003b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9a3 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9b4 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d122      	bne.n	8003be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d11b      	bne.n	8003be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0204 	mvn.w	r2, #4
 8003bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f987 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003bce:	e005      	b.n	8003bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f979 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f98a 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d122      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11b      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0208 	mvn.w	r2, #8
 8003c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f95d 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003c22:	e005      	b.n	8003c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f94f 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f960 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d122      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d11b      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0210 	mvn.w	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f933 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003c76:	e005      	b.n	8003c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f925 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f936 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0201 	mvn.w	r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fc ffcf 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fb9f 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d10e      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8fb 	bl	8003f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d10e      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0220 	mvn.w	r2, #32
 8003d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb69 	bl	800440c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0ae      	b.n	8003ec0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	f200 809f 	bhi.w	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003eb1 	.word	0x08003eb1
 8003d80:	08003eb1 	.word	0x08003eb1
 8003d84:	08003eb1 	.word	0x08003eb1
 8003d88:	08003ded 	.word	0x08003ded
 8003d8c:	08003eb1 	.word	0x08003eb1
 8003d90:	08003eb1 	.word	0x08003eb1
 8003d94:	08003eb1 	.word	0x08003eb1
 8003d98:	08003e2f 	.word	0x08003e2f
 8003d9c:	08003eb1 	.word	0x08003eb1
 8003da0:	08003eb1 	.word	0x08003eb1
 8003da4:	08003eb1 	.word	0x08003eb1
 8003da8:	08003e6f 	.word	0x08003e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f930 	bl	8004018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0208 	orr.w	r2, r2, #8
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0204 	bic.w	r2, r2, #4
 8003dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	619a      	str	r2, [r3, #24]
      break;
 8003dea:	e064      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f976 	bl	80040e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	619a      	str	r2, [r3, #24]
      break;
 8003e2c:	e043      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f9c1 	bl	80041bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0208 	orr.w	r2, r2, #8
 8003e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0204 	bic.w	r2, r2, #4
 8003e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69d9      	ldr	r1, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]
      break;
 8003e6c:	e023      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fa0b 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	61da      	str	r2, [r3, #28]
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a30      	ldr	r2, [pc, #192]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d017      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <TIM_Base_SetConfig+0xf4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <TIM_Base_SetConfig+0xf8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <TIM_Base_SetConfig+0xfc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000

080040e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0210 	bic.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0320 	bic.w	r3, r3, #32
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000

080041bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <TIM_OC4_SetConfig+0x9c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e050      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40014000 	.word	0x40014000

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03f      	b.n	80044c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fda4 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f929 	bl	80046d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b08a      	sub	sp, #40	; 0x28
 80044d2:	af02      	add	r7, sp, #8
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d17c      	bne.n	80045e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_Transmit+0x2c>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e075      	b.n	80045ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UART_Transmit+0x3e>
 8004508:	2302      	movs	r3, #2
 800450a:	e06e      	b.n	80045ea <HAL_UART_Transmit+0x11c>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2221      	movs	r2, #33	; 0x21
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004522:	f7fd f929 	bl	8001778 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d108      	bne.n	8004550 <HAL_UART_Transmit+0x82>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e003      	b.n	8004558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004560:	e02a      	b.n	80045b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f840 	bl	80045f2 <UART_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e036      	b.n	80045ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	3302      	adds	r3, #2
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	e007      	b.n	80045aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	781a      	ldrb	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1cf      	bne.n	8004562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2140      	movs	r1, #64	; 0x40
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f810 	bl	80045f2 <UART_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e006      	b.n	80045ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b090      	sub	sp, #64	; 0x40
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004602:	e050      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460a:	d04c      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x30>
 8004612:	f7fd f8b1 	bl	8001778 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461e:	429a      	cmp	r2, r3
 8004620:	d241      	bcs.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004642:	637a      	str	r2, [r7, #52]	; 0x34
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004676:	623a      	str	r2, [r7, #32]
 8004678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	61bb      	str	r3, [r7, #24]
   return(result);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e00f      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d09f      	beq.n	8004604 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3740      	adds	r7, #64	; 0x40
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b0c0      	sub	sp, #256	; 0x100
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	68d9      	ldr	r1, [r3, #12]
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	ea40 0301 	orr.w	r3, r0, r1
 80046f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	431a      	orrs	r2, r3
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004728:	f021 010c 	bic.w	r1, r1, #12
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004736:	430b      	orrs	r3, r1
 8004738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474a:	6999      	ldr	r1, [r3, #24]
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	ea40 0301 	orr.w	r3, r0, r1
 8004756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b8f      	ldr	r3, [pc, #572]	; (800499c <UART_SetConfig+0x2cc>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d005      	beq.n	8004770 <UART_SetConfig+0xa0>
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b8d      	ldr	r3, [pc, #564]	; (80049a0 <UART_SetConfig+0x2d0>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d104      	bne.n	800477a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe fae6 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8004774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004778:	e003      	b.n	8004782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800477a:	f7fe facd 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800477e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478c:	f040 810c 	bne.w	80049a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800479a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800479e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	1891      	adds	r1, r2, r2
 80047a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80047aa:	415b      	adcs	r3, r3
 80047ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047b2:	4621      	mov	r1, r4
 80047b4:	eb12 0801 	adds.w	r8, r2, r1
 80047b8:	4629      	mov	r1, r5
 80047ba:	eb43 0901 	adc.w	r9, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb18 0303 	adds.w	r3, r8, r3
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e0:	462b      	mov	r3, r5
 80047e2:	eb49 0303 	adc.w	r3, r9, r3
 80047e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047fe:	460b      	mov	r3, r1
 8004800:	18db      	adds	r3, r3, r3
 8004802:	653b      	str	r3, [r7, #80]	; 0x50
 8004804:	4613      	mov	r3, r2
 8004806:	eb42 0303 	adc.w	r3, r2, r3
 800480a:	657b      	str	r3, [r7, #84]	; 0x54
 800480c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004814:	f7fb fd34 	bl	8000280 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <UART_SetConfig+0x2d4>)
 800481e:	fba3 2302 	umull	r2, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	011c      	lsls	r4, r3, #4
 8004826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	1891      	adds	r1, r2, r2
 800483e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004840:	415b      	adcs	r3, r3
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004848:	4641      	mov	r1, r8
 800484a:	eb12 0a01 	adds.w	sl, r2, r1
 800484e:	4649      	mov	r1, r9
 8004850:	eb43 0b01 	adc.w	fp, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004868:	4692      	mov	sl, r2
 800486a:	469b      	mov	fp, r3
 800486c:	4643      	mov	r3, r8
 800486e:	eb1a 0303 	adds.w	r3, sl, r3
 8004872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004876:	464b      	mov	r3, r9
 8004878:	eb4b 0303 	adc.w	r3, fp, r3
 800487c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800488c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004894:	460b      	mov	r3, r1
 8004896:	18db      	adds	r3, r3, r3
 8004898:	643b      	str	r3, [r7, #64]	; 0x40
 800489a:	4613      	mov	r3, r2
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
 80048a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048aa:	f7fb fce9 	bl	8000280 <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <UART_SetConfig+0x2d4>)
 80048b6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2264      	movs	r2, #100	; 0x64
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	1acb      	subs	r3, r1, r3
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <UART_SetConfig+0x2d4>)
 80048cc:	fba3 2302 	umull	r2, r3, r3, r2
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d8:	441c      	add	r4, r3
 80048da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048f4:	415b      	adcs	r3, r3
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048fc:	4641      	mov	r1, r8
 80048fe:	1851      	adds	r1, r2, r1
 8004900:	6339      	str	r1, [r7, #48]	; 0x30
 8004902:	4649      	mov	r1, r9
 8004904:	414b      	adcs	r3, r1
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004914:	4659      	mov	r1, fp
 8004916:	00cb      	lsls	r3, r1, #3
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491e:	4651      	mov	r1, sl
 8004920:	00ca      	lsls	r2, r1, #3
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	4603      	mov	r3, r0
 8004928:	4642      	mov	r2, r8
 800492a:	189b      	adds	r3, r3, r2
 800492c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004930:	464b      	mov	r3, r9
 8004932:	460a      	mov	r2, r1
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800494c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004950:	460b      	mov	r3, r1
 8004952:	18db      	adds	r3, r3, r3
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
 8004956:	4613      	mov	r3, r2
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004966:	f7fb fc8b 	bl	8000280 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <UART_SetConfig+0x2d4>)
 8004970:	fba3 1302 	umull	r1, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	2164      	movs	r1, #100	; 0x64
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	3332      	adds	r3, #50	; 0x32
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <UART_SetConfig+0x2d4>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	f003 0207 	and.w	r2, r3, #7
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4422      	add	r2, r4
 8004996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004998:	e105      	b.n	8004ba6 <UART_SetConfig+0x4d6>
 800499a:	bf00      	nop
 800499c:	40011000 	.word	0x40011000
 80049a0:	40011400 	.word	0x40011400
 80049a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049ba:	4642      	mov	r2, r8
 80049bc:	464b      	mov	r3, r9
 80049be:	1891      	adds	r1, r2, r2
 80049c0:	6239      	str	r1, [r7, #32]
 80049c2:	415b      	adcs	r3, r3
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ca:	4641      	mov	r1, r8
 80049cc:	1854      	adds	r4, r2, r1
 80049ce:	4649      	mov	r1, r9
 80049d0:	eb43 0501 	adc.w	r5, r3, r1
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	00eb      	lsls	r3, r5, #3
 80049de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e2:	00e2      	lsls	r2, r4, #3
 80049e4:	4614      	mov	r4, r2
 80049e6:	461d      	mov	r5, r3
 80049e8:	4643      	mov	r3, r8
 80049ea:	18e3      	adds	r3, r4, r3
 80049ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f0:	464b      	mov	r3, r9
 80049f2:	eb45 0303 	adc.w	r3, r5, r3
 80049f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a16:	4629      	mov	r1, r5
 8004a18:	008b      	lsls	r3, r1, #2
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a20:	4621      	mov	r1, r4
 8004a22:	008a      	lsls	r2, r1, #2
 8004a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a28:	f7fb fc2a 	bl	8000280 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b60      	ldr	r3, [pc, #384]	; (8004bb4 <UART_SetConfig+0x4e4>)
 8004a32:	fba3 2302 	umull	r2, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	011c      	lsls	r4, r3, #4
 8004a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	464b      	mov	r3, r9
 8004a50:	1891      	adds	r1, r2, r2
 8004a52:	61b9      	str	r1, [r7, #24]
 8004a54:	415b      	adcs	r3, r3
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	1851      	adds	r1, r2, r1
 8004a60:	6139      	str	r1, [r7, #16]
 8004a62:	4649      	mov	r1, r9
 8004a64:	414b      	adcs	r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	00cb      	lsls	r3, r1, #3
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7e:	4651      	mov	r1, sl
 8004a80:	00ca      	lsls	r2, r1, #3
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	4642      	mov	r2, r8
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a90:	464b      	mov	r3, r9
 8004a92:	460a      	mov	r2, r1
 8004a94:	eb42 0303 	adc.w	r3, r2, r3
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abe:	4641      	mov	r1, r8
 8004ac0:	008a      	lsls	r2, r1, #2
 8004ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ac6:	f7fb fbdb 	bl	8000280 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <UART_SetConfig+0x4e4>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a34      	ldr	r2, [pc, #208]	; (8004bb4 <UART_SetConfig+0x4e4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aee:	441c      	add	r4, r3
 8004af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af4:	2200      	movs	r2, #0
 8004af6:	673b      	str	r3, [r7, #112]	; 0x70
 8004af8:	677a      	str	r2, [r7, #116]	; 0x74
 8004afa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004afe:	4642      	mov	r2, r8
 8004b00:	464b      	mov	r3, r9
 8004b02:	1891      	adds	r1, r2, r2
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	415b      	adcs	r3, r3
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b0e:	4641      	mov	r1, r8
 8004b10:	1851      	adds	r1, r2, r1
 8004b12:	6039      	str	r1, [r7, #0]
 8004b14:	4649      	mov	r1, r9
 8004b16:	414b      	adcs	r3, r1
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b26:	4659      	mov	r1, fp
 8004b28:	00cb      	lsls	r3, r1, #3
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b30:	4651      	mov	r1, sl
 8004b32:	00ca      	lsls	r2, r1, #3
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4642      	mov	r2, r8
 8004b3c:	189b      	adds	r3, r3, r2
 8004b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b40:	464b      	mov	r3, r9
 8004b42:	460a      	mov	r2, r1
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	663b      	str	r3, [r7, #96]	; 0x60
 8004b54:	667a      	str	r2, [r7, #100]	; 0x64
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b62:	4649      	mov	r1, r9
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	4641      	mov	r1, r8
 8004b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	008a      	lsls	r2, r1, #2
 8004b70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b74:	f7fb fb84 	bl	8000280 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <UART_SetConfig+0x4e4>)
 8004b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2164      	movs	r1, #100	; 0x64
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <UART_SetConfig+0x4e4>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4422      	add	r2, r4
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bac:	46bd      	mov	sp, r7
 8004bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb2:	bf00      	nop
 8004bb4:	51eb851f 	.word	0x51eb851f

08004bb8 <__NVIC_SetPriority>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	; (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	; (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <SysTick_Handler+0x1c>)
 8004c12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c14:	f001 ff16 	bl	8006a44 <xTaskGetSchedulerState>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c1e:	f002 fcfb 	bl	8007618 <xPortSysTickHandler>
  }
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	e000e010 	.word	0xe000e010

08004c2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c30:	2100      	movs	r1, #0
 8004c32:	f06f 0004 	mvn.w	r0, #4
 8004c36:	f7ff ffbf 	bl	8004bb8 <__NVIC_SetPriority>
#endif
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c46:	f3ef 8305 	mrs	r3, IPSR
 8004c4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c52:	f06f 0305 	mvn.w	r3, #5
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	e00c      	b.n	8004c74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <osKernelInitialize+0x44>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <osKernelInitialize+0x44>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e002      	b.n	8004c74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c74:	687b      	ldr	r3, [r7, #4]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000290 	.word	0x20000290

08004c88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c8e:	f3ef 8305 	mrs	r3, IPSR
 8004c92:	603b      	str	r3, [r7, #0]
  return(result);
 8004c94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c9a:	f06f 0305 	mvn.w	r3, #5
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	e010      	b.n	8004cc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <osKernelStart+0x48>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d109      	bne.n	8004cbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004caa:	f7ff ffbf 	bl	8004c2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <osKernelStart+0x48>)
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cb4:	f001 fa6a 	bl	800618c <vTaskStartScheduler>
      stat = osOK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	e002      	b.n	8004cc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cc4:	687b      	ldr	r3, [r7, #4]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000290 	.word	0x20000290

08004cd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08e      	sub	sp, #56	; 0x38
 8004cd8:	af04      	add	r7, sp, #16
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce4:	f3ef 8305 	mrs	r3, IPSR
 8004ce8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d17e      	bne.n	8004dee <osThreadNew+0x11a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d07b      	beq.n	8004dee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cfa:	2318      	movs	r3, #24
 8004cfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d045      	beq.n	8004d9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <osThreadNew+0x48>
        name = attr->name;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <osThreadNew+0x6e>
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b38      	cmp	r3, #56	; 0x38
 8004d34:	d805      	bhi.n	8004d42 <osThreadNew+0x6e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <osThreadNew+0x72>
        return (NULL);
 8004d42:	2300      	movs	r3, #0
 8004d44:	e054      	b.n	8004df0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <osThreadNew+0xa8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2bbb      	cmp	r3, #187	; 0xbb
 8004d64:	d90a      	bls.n	8004d7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <osThreadNew+0xa8>
        mem = 1;
 8004d76:	2301      	movs	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e010      	b.n	8004d9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10c      	bne.n	8004d9e <osThreadNew+0xca>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d108      	bne.n	8004d9e <osThreadNew+0xca>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d104      	bne.n	8004d9e <osThreadNew+0xca>
          mem = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	e001      	b.n	8004d9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d110      	bne.n	8004dc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dac:	9202      	str	r2, [sp, #8]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fffa 	bl	8005db4 <xTaskCreateStatic>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e013      	b.n	8004dee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	f107 0310 	add.w	r3, r7, #16
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f001 f845 	bl	8005e6e <xTaskCreate>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <osThreadNew+0x11a>
            hTask = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dee:	693b      	ldr	r3, [r7, #16]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e00:	f3ef 8305 	mrs	r3, IPSR
 8004e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <osDelay+0x1c>
    stat = osErrorISR;
 8004e0c:	f06f 0305 	mvn.w	r3, #5
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e007      	b.n	8004e24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 f980 	bl	8006124 <vTaskDelay>
    }
  }

  return (stat);
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08a      	sub	sp, #40	; 0x28
 8004e32:	af02      	add	r7, sp, #8
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e3e:	f3ef 8305 	mrs	r3, IPSR
 8004e42:	613b      	str	r3, [r7, #16]
  return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d175      	bne.n	8004f36 <osSemaphoreNew+0x108>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d072      	beq.n	8004f36 <osSemaphoreNew+0x108>
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d86e      	bhi.n	8004f36 <osSemaphoreNew+0x108>
    mem = -1;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <osSemaphoreNew+0x4c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b4f      	cmp	r3, #79	; 0x4f
 8004e72:	d902      	bls.n	8004e7a <osSemaphoreNew+0x4c>
        mem = 1;
 8004e74:	2301      	movs	r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	e00c      	b.n	8004e94 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <osSemaphoreNew+0x66>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <osSemaphoreNew+0x66>
          mem = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e001      	b.n	8004e94 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9a:	d04c      	beq.n	8004f36 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d128      	bne.n	8004ef4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10a      	bne.n	8004ebe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2203      	movs	r2, #3
 8004eae:	9200      	str	r2, [sp, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f000 fa07 	bl	80052c8 <xQueueGenericCreateStatic>
 8004eba:	61f8      	str	r0, [r7, #28]
 8004ebc:	e005      	b.n	8004eca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f000 fa78 	bl	80053b8 <xQueueGenericCreate>
 8004ec8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <osSemaphoreNew+0xe8>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01f      	beq.n	8004f16 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2100      	movs	r1, #0
 8004edc:	69f8      	ldr	r0, [r7, #28]
 8004ede:	f000 fb33 	bl	8005548 <xQueueGenericSend>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d016      	beq.n	8004f16 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004ee8:	69f8      	ldr	r0, [r7, #28]
 8004eea:	f000 fda7 	bl	8005a3c <vQueueDelete>
            hSemaphore = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	e010      	b.n	8004f16 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fab5 	bl	8005472 <xQueueCreateCountingSemaphoreStatic>
 8004f08:	61f8      	str	r0, [r7, #28]
 8004f0a:	e004      	b.n	8004f16 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fae6 	bl	80054e0 <xQueueCreateCountingSemaphore>
 8004f14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e001      	b.n	8004f2e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	69f8      	ldr	r0, [r7, #28]
 8004f32:	f000 feb7 	bl	8005ca4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004f36:	69fb      	ldr	r3, [r7, #28]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f50:	f3ef 8305 	mrs	r3, IPSR
 8004f54:	613b      	str	r3, [r7, #16]
  return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d15f      	bne.n	800501c <osMessageQueueNew+0xdc>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05c      	beq.n	800501c <osMessageQueueNew+0xdc>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d059      	beq.n	800501c <osMessageQueueNew+0xdc>
    mem = -1;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d029      	beq.n	8004fc8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <osMessageQueueNew+0x62>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b4f      	cmp	r3, #79	; 0x4f
 8004f82:	d90e      	bls.n	8004fa2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <osMessageQueueNew+0x62>
        mem = 1;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e014      	b.n	8004fcc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d110      	bne.n	8004fcc <osMessageQueueNew+0x8c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <osMessageQueueNew+0x8c>
          mem = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e001      	b.n	8004fcc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10b      	bne.n	8004fea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	9100      	str	r1, [sp, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f971 	bl	80052c8 <xQueueGenericCreateStatic>
 8004fe6:	61f8      	str	r0, [r7, #28]
 8004fe8:	e008      	b.n	8004ffc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f9df 	bl	80053b8 <xQueueGenericCreate>
 8004ffa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00c      	beq.n	800501c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e001      	b.n	8005014 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	69f8      	ldr	r0, [r7, #28]
 8005018:	f000 fe44 	bl	8005ca4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800501c:	69fb      	ldr	r3, [r7, #28]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <vApplicationGetIdleTaskMemory+0x2c>)
 8005038:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a06      	ldr	r2, [pc, #24]	; (8005058 <vApplicationGetIdleTaskMemory+0x30>)
 800503e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000294 	.word	0x20000294
 8005058:	20000350 	.word	0x20000350

0800505c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <vApplicationGetTimerTaskMemory+0x2c>)
 800506c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a06      	ldr	r2, [pc, #24]	; (800508c <vApplicationGetTimerTaskMemory+0x30>)
 8005072:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000550 	.word	0x20000550
 800508c:	2000060c 	.word	0x2000060c

08005090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005148:	d103      	bne.n	8005152 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e00c      	b.n	800516c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3308      	adds	r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e002      	b.n	8005160 <vListInsert+0x2e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d2f6      	bcs.n	800515a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d103      	bne.n	80051d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005222:	f002 f967 	bl	80074f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	441a      	add	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	3b01      	subs	r3, #1
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	22ff      	movs	r2, #255	; 0xff
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	22ff      	movs	r2, #255	; 0xff
 800526e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d114      	bne.n	80052a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01a      	beq.n	80052b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3310      	adds	r3, #16
 8005284:	4618      	mov	r0, r3
 8005286:	f001 fa1b 	bl	80066c0 <xTaskRemoveFromEventList>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d012      	beq.n	80052b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <xQueueGenericReset+0xcc>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	e009      	b.n	80052b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3310      	adds	r3, #16
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fef2 	bl	8005090 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff feed 	bl	8005090 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052b6:	f002 f94d 	bl	8007554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052ba:	2301      	movs	r3, #1
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <xQueueGenericCreateStatic+0x52>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <xQueueGenericCreateStatic+0x56>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <xQueueGenericCreateStatic+0x58>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	623b      	str	r3, [r7, #32]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <xQueueGenericCreateStatic+0x7e>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <xQueueGenericCreateStatic+0x82>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <xQueueGenericCreateStatic+0x84>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	61fb      	str	r3, [r7, #28]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005366:	2350      	movs	r3, #80	; 0x50
 8005368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b50      	cmp	r3, #80	; 0x50
 800536e:	d00a      	beq.n	8005386 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	61bb      	str	r3, [r7, #24]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005386:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800539a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f83f 	bl	800542c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	; 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	613b      	str	r3, [r7, #16]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	3350      	adds	r3, #80	; 0x50
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 f9a1 	bl	8007738 <pvPortMalloc>
 80053f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	3350      	adds	r3, #80	; 0x50
 8005406:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005410:	79fa      	ldrb	r2, [r7, #7]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f805 	bl	800542c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005422:	69bb      	ldr	r3, [r7, #24]
	}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d103      	bne.n	8005448 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e002      	b.n	800544e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800545a:	2101      	movs	r1, #1
 800545c:	69b8      	ldr	r0, [r7, #24]
 800545e:	f7ff fecb 	bl	80051f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005472:	b580      	push	{r7, lr}
 8005474:	b08a      	sub	sp, #40	; 0x28
 8005476:	af02      	add	r7, sp, #8
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	61bb      	str	r3, [r7, #24]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d90a      	bls.n	80054b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	617b      	str	r3, [r7, #20]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054b8:	2302      	movs	r3, #2
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	2100      	movs	r1, #0
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff ff00 	bl	80052c8 <xQueueGenericCreateStatic>
 80054c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054d6:	69fb      	ldr	r3, [r7, #28]
	}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90a      	bls.n	8005524 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	60fb      	str	r3, [r7, #12]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005524:	2202      	movs	r2, #2
 8005526:	2100      	movs	r1, #0
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff45 	bl	80053b8 <xQueueGenericCreate>
 800552e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800553c:	697b      	ldr	r3, [r7, #20]
	}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueGenericSend+0x32>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <xQueueGenericSend+0x40>
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <xQueueGenericSend+0x44>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <xQueueGenericSend+0x46>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d103      	bne.n	80055b6 <xQueueGenericSend+0x6e>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <xQueueGenericSend+0x72>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericSend+0x74>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055d6:	f001 fa35 	bl	8006a44 <xTaskGetSchedulerState>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <xQueueGenericSend+0x9e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <xQueueGenericSend+0xa2>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <xQueueGenericSend+0xa4>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <xQueueGenericSend+0xbe>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	61fb      	str	r3, [r7, #28]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005606:	f001 ff75 	bl	80074f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <xQueueGenericSend+0xd4>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d129      	bne.n	8005670 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005622:	f000 fa2e 	bl	8005a82 <prvCopyDataToQueue>
 8005626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d010      	beq.n	8005652 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	4618      	mov	r0, r3
 8005636:	f001 f843 	bl	80066c0 <xTaskRemoveFromEventList>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d013      	beq.n	8005668 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005640:	4b3f      	ldr	r3, [pc, #252]	; (8005740 <xQueueGenericSend+0x1f8>)
 8005642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	e00a      	b.n	8005668 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005658:	4b39      	ldr	r3, [pc, #228]	; (8005740 <xQueueGenericSend+0x1f8>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005668:	f001 ff74 	bl	8007554 <vPortExitCritical>
				return pdPASS;
 800566c:	2301      	movs	r3, #1
 800566e:	e063      	b.n	8005738 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005676:	f001 ff6d 	bl	8007554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800567a:	2300      	movs	r3, #0
 800567c:	e05c      	b.n	8005738 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f87d 	bl	8006788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800568e:	2301      	movs	r3, #1
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005692:	f001 ff5f 	bl	8007554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005696:	f000 fde9 	bl	800626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800569a:	f001 ff2b 	bl	80074f4 <vPortEnterCritical>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a4:	b25b      	sxtb	r3, r3
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056aa:	d103      	bne.n	80056b4 <xQueueGenericSend+0x16c>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSend+0x182>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ca:	f001 ff43 	bl	8007554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ce:	1d3a      	adds	r2, r7, #4
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 f86c 	bl	80067b4 <xTaskCheckForTimeOut>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d124      	bne.n	800572c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e4:	f000 fac5 	bl	8005c72 <prvIsQueueFull>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	3310      	adds	r3, #16
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff92 	bl	8006620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fe:	f000 fa50 	bl	8005ba2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005702:	f000 fdc1 	bl	8006288 <xTaskResumeAll>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f af7c 	bne.w	8005606 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <xQueueGenericSend+0x1f8>)
 8005710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	e772      	b.n	8005606 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005722:	f000 fa3e 	bl	8005ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005726:	f000 fdaf 	bl	8006288 <xTaskResumeAll>
 800572a:	e76c      	b.n	8005606 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fa38 	bl	8005ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005732:	f000 fda9 	bl	8006288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005738:	4618      	mov	r0, r3
 800573a:	3738      	adds	r7, #56	; 0x38
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <xQueueGenericSendFromISR+0x3c>
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueGenericSendFromISR+0x40>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSendFromISR+0x42>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d103      	bne.n	80057ae <xQueueGenericSendFromISR+0x6a>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <xQueueGenericSendFromISR+0x6e>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <xQueueGenericSendFromISR+0x70>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	623b      	str	r3, [r7, #32]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ce:	f001 ff73 	bl	80076b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057d2:	f3ef 8211 	mrs	r2, BASEPRI
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	61fa      	str	r2, [r7, #28]
 80057e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <xQueueGenericSendFromISR+0xbc>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d12f      	bne.n	8005860 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005816:	f000 f934 	bl	8005a82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800581a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005822:	d112      	bne.n	800584a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	3324      	adds	r3, #36	; 0x24
 8005830:	4618      	mov	r0, r3
 8005832:	f000 ff45 	bl	80066c0 <xTaskRemoveFromEventList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e007      	b.n	800585a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800584a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800584e:	3301      	adds	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	b25a      	sxtb	r2, r3
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800585a:	2301      	movs	r3, #1
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800585e:	e001      	b.n	8005864 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005860:	2300      	movs	r3, #0
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800586e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005872:	4618      	mov	r0, r3
 8005874:	3740      	adds	r7, #64	; 0x40
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08c      	sub	sp, #48	; 0x30
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xQueueReceive+0x30>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	623b      	str	r3, [r7, #32]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <xQueueReceive+0x3e>
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueReceive+0x42>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueReceive+0x44>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueReceive+0x5e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058da:	f001 f8b3 	bl	8006a44 <xTaskGetSchedulerState>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <xQueueReceive+0x6e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueReceive+0x72>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueReceive+0x74>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueReceive+0x8e>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61bb      	str	r3, [r7, #24]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800590a:	f001 fdf3 	bl	80074f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01f      	beq.n	800595a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591e:	f000 f91a 	bl	8005b56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	3310      	adds	r3, #16
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fec2 	bl	80066c0 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005942:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <xQueueReceive+0x1bc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005952:	f001 fdff 	bl	8007554 <vPortExitCritical>
				return pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	e069      	b.n	8005a2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005960:	f001 fdf8 	bl	8007554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005964:	2300      	movs	r3, #0
 8005966:	e062      	b.n	8005a2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800596e:	f107 0310 	add.w	r3, r7, #16
 8005972:	4618      	mov	r0, r3
 8005974:	f000 ff08 	bl	8006788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800597c:	f001 fdea 	bl	8007554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005980:	f000 fc74 	bl	800626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005984:	f001 fdb6 	bl	80074f4 <vPortEnterCritical>
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005994:	d103      	bne.n	800599e <xQueueReceive+0x122>
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a4:	b25b      	sxtb	r3, r3
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059aa:	d103      	bne.n	80059b4 <xQueueReceive+0x138>
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b4:	f001 fdce 	bl	8007554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059b8:	1d3a      	adds	r2, r7, #4
 80059ba:	f107 0310 	add.w	r3, r7, #16
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fef7 	bl	80067b4 <xTaskCheckForTimeOut>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d123      	bne.n	8005a14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ce:	f000 f93a 	bl	8005c46 <prvIsQueueEmpty>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fe1d 	bl	8006620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e8:	f000 f8db 	bl	8005ba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059ec:	f000 fc4c 	bl	8006288 <xTaskResumeAll>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d189      	bne.n	800590a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <xQueueReceive+0x1bc>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e780      	b.n	800590a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0a:	f000 f8ca 	bl	8005ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a0e:	f000 fc3b 	bl	8006288 <xTaskResumeAll>
 8005a12:	e77a      	b.n	800590a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 f8c4 	bl	8005ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a1a:	f000 fc35 	bl	8006288 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a20:	f000 f911 	bl	8005c46 <prvIsQueueEmpty>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f43f af6f 	beq.w	800590a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3730      	adds	r7, #48	; 0x30
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <vQueueDelete+0x28>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60bb      	str	r3, [r7, #8]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f947 	bl	8005cf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 ff2b 	bl	80078d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d14d      	bne.n	8005b44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 ffe7 	bl	8006a80 <xTaskPriorityDisinherit>
 8005ab2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	e043      	b.n	8005b44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d119      	bne.n	8005af6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6858      	ldr	r0, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	461a      	mov	r2, r3
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	f002 f849 	bl	8007b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d32b      	bcc.n	8005b44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	e026      	b.n	8005b44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68d8      	ldr	r0, [r3, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	461a      	mov	r2, r3
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f002 f82f 	bl	8007b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	425b      	negs	r3, r3
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d207      	bcs.n	8005b32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	425b      	negs	r3, r3
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d105      	bne.n	8005b44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d018      	beq.n	8005b9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d303      	bcc.n	8005b8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68d9      	ldr	r1, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	461a      	mov	r2, r3
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f001 ffe5 	bl	8007b64 <memcpy>
	}
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005baa:	f001 fca3 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bb6:	e011      	b.n	8005bdc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fd7b 	bl	80066c0 <xTaskRemoveFromEventList>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bd0:	f000 fe52 	bl	8006878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dce9      	bgt.n	8005bb8 <prvUnlockQueue+0x16>
 8005be4:	e000      	b.n	8005be8 <prvUnlockQueue+0x46>
					break;
 8005be6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	22ff      	movs	r2, #255	; 0xff
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bf0:	f001 fcb0 	bl	8007554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bf4:	f001 fc7e 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c00:	e011      	b.n	8005c26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd56 	bl	80066c0 <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c1a:	f000 fe2d 	bl	8006878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dce9      	bgt.n	8005c02 <prvUnlockQueue+0x60>
 8005c2e:	e000      	b.n	8005c32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c3a:	f001 fc8b 	bl	8007554 <vPortExitCritical>
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c4e:	f001 fc51 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e001      	b.n	8005c64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c64:	f001 fc76 	bl	8007554 <vPortExitCritical>

	return xReturn;
 8005c68:	68fb      	ldr	r3, [r7, #12]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c7a:	f001 fc3b 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d102      	bne.n	8005c90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e001      	b.n	8005c94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c94:	f001 fc5e 	bl	8007554 <vPortExitCritical>

	return xReturn;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e014      	b.n	8005cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cb4:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cc0:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cca:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cd6:	e006      	b.n	8005ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b07      	cmp	r3, #7
 8005ce2:	d9e7      	bls.n	8005cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000a0c 	.word	0x20000a0c

08005cf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e016      	b.n	8005d34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005d06:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <vQueueUnregisterQueue+0x50>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d10b      	bne.n	8005d2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <vQueueUnregisterQueue+0x50>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005d20:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <vQueueUnregisterQueue+0x50>)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	605a      	str	r2, [r3, #4]
				break;
 8005d2c:	e006      	b.n	8005d3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b07      	cmp	r3, #7
 8005d38:	d9e5      	bls.n	8005d06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000a0c 	.word	0x20000a0c

08005d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d5c:	f001 fbca 	bl	80074f4 <vPortEnterCritical>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d6c:	d103      	bne.n	8005d76 <vQueueWaitForMessageRestricted+0x2a>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d7c:	b25b      	sxtb	r3, r3
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	d103      	bne.n	8005d8c <vQueueWaitForMessageRestricted+0x40>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d8c:	f001 fbe2 	bl	8007554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fc61 	bl	8006668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005da6:	6978      	ldr	r0, [r7, #20]
 8005da8:	f7ff fefb 	bl	8005ba2 <prvUnlockQueue>
	}
 8005dac:	bf00      	nop
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af04      	add	r7, sp, #16
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	623b      	str	r3, [r7, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61fb      	str	r3, [r7, #28]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dfa:	23bc      	movs	r3, #188	; 0xbc
 8005dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2bbc      	cmp	r3, #188	; 0xbc
 8005e02:	d00a      	beq.n	8005e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61bb      	str	r3, [r7, #24]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01e      	beq.n	8005e60 <xTaskCreateStatic+0xac>
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01b      	beq.n	8005e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f850 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e5a:	f000 f8f3 	bl	8006044 <prvAddNewTaskToReadyList>
 8005e5e:	e001      	b.n	8005e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e64:	697b      	ldr	r3, [r7, #20]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08c      	sub	sp, #48	; 0x30
 8005e72:	af04      	add	r7, sp, #16
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fc58 	bl	8007738 <pvPortMalloc>
 8005e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e90:	20bc      	movs	r0, #188	; 0xbc
 8005e92:	f001 fc51 	bl	8007738 <pvPortMalloc>
 8005e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ea4:	e005      	b.n	8005eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f001 fd12 	bl	80078d0 <vPortFree>
 8005eac:	e001      	b.n	8005eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ec0:	88fa      	ldrh	r2, [r7, #6]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f80e 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005edc:	69f8      	ldr	r0, [r7, #28]
 8005ede:	f000 f8b1 	bl	8006044 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e002      	b.n	8005eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eee:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	21a5      	movs	r1, #165	; 0xa5
 8005f12:	f001 fe35 	bl	8007b80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f20:	3b01      	subs	r3, #1
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01f      	beq.n	8005f96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e012      	b.n	8005f82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	7819      	ldrb	r1, [r3, #0]
 8005f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	3334      	adds	r3, #52	; 0x34
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d006      	beq.n	8005f8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b0f      	cmp	r3, #15
 8005f86:	d9e9      	bls.n	8005f5c <prvInitialiseNewTask+0x64>
 8005f88:	e000      	b.n	8005f8c <prvInitialiseNewTask+0x94>
			{
				break;
 8005f8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f94:	e003      	b.n	8005f9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2b37      	cmp	r3, #55	; 0x37
 8005fa2:	d901      	bls.n	8005fa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fa4:	2337      	movs	r3, #55	; 0x37
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f886 	bl	80050d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff f881 	bl	80050d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	3354      	adds	r3, #84	; 0x54
 8005ff8:	2260      	movs	r2, #96	; 0x60
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fdbf 	bl	8007b80 <memset>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <prvInitialiseNewTask+0x140>)
 8006006:	659a      	str	r2, [r3, #88]	; 0x58
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	4a0c      	ldr	r2, [pc, #48]	; (800603c <prvInitialiseNewTask+0x144>)
 800600c:	65da      	str	r2, [r3, #92]	; 0x5c
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <prvInitialiseNewTask+0x148>)
 8006012:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	69b8      	ldr	r0, [r7, #24]
 800601a:	f001 f941 	bl	80072a0 <pxPortInitialiseStack>
 800601e:	4602      	mov	r2, r0
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006030:	bf00      	nop
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08008798 	.word	0x08008798
 800603c:	080087b8 	.word	0x080087b8
 8006040:	08008778 	.word	0x08008778

08006044 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800604c:	f001 fa52 	bl	80074f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006050:	4b2d      	ldr	r3, [pc, #180]	; (8006108 <prvAddNewTaskToReadyList+0xc4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <prvAddNewTaskToReadyList+0xc4>)
 8006058:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800605a:	4b2c      	ldr	r3, [pc, #176]	; (800610c <prvAddNewTaskToReadyList+0xc8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006062:	4a2a      	ldr	r2, [pc, #168]	; (800610c <prvAddNewTaskToReadyList+0xc8>)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006068:	4b27      	ldr	r3, [pc, #156]	; (8006108 <prvAddNewTaskToReadyList+0xc4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d110      	bne.n	8006092 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006070:	f000 fc26 	bl	80068c0 <prvInitialiseTaskLists>
 8006074:	e00d      	b.n	8006092 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006076:	4b26      	ldr	r3, [pc, #152]	; (8006110 <prvAddNewTaskToReadyList+0xcc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800607e:	4b23      	ldr	r3, [pc, #140]	; (800610c <prvAddNewTaskToReadyList+0xc8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d802      	bhi.n	8006092 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <prvAddNewTaskToReadyList+0xc8>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006092:	4b20      	ldr	r3, [pc, #128]	; (8006114 <prvAddNewTaskToReadyList+0xd0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <prvAddNewTaskToReadyList+0xd0>)
 800609a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800609c:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <prvAddNewTaskToReadyList+0xd0>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <prvAddNewTaskToReadyList+0xd4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d903      	bls.n	80060b8 <prvAddNewTaskToReadyList+0x74>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <prvAddNewTaskToReadyList+0xd4>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <prvAddNewTaskToReadyList+0xd8>)
 80060c6:	441a      	add	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7ff f80b 	bl	80050ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d4:	f001 fa3e 	bl	8007554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvAddNewTaskToReadyList+0xcc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00e      	beq.n	80060fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddNewTaskToReadyList+0xc8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d207      	bcs.n	80060fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <prvAddNewTaskToReadyList+0xdc>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000f20 	.word	0x20000f20
 800610c:	20000a4c 	.word	0x20000a4c
 8006110:	20000f2c 	.word	0x20000f2c
 8006114:	20000f3c 	.word	0x20000f3c
 8006118:	20000f28 	.word	0x20000f28
 800611c:	20000a50 	.word	0x20000a50
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d017      	beq.n	8006166 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <vTaskDelay+0x60>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <vTaskDelay+0x30>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006154:	f000 f88a 	bl	800626c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006158:	2100      	movs	r1, #0
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fcfe 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006160:	f000 f892 	bl	8006288 <xTaskResumeAll>
 8006164:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <vTaskDelay+0x64>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000f48 	.word	0x20000f48
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800619a:	463a      	mov	r2, r7
 800619c:	1d39      	adds	r1, r7, #4
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe ff40 	bl	8005028 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	460a      	mov	r2, r1
 80061ba:	4924      	ldr	r1, [pc, #144]	; (800624c <vTaskStartScheduler+0xc0>)
 80061bc:	4824      	ldr	r0, [pc, #144]	; (8006250 <vTaskStartScheduler+0xc4>)
 80061be:	f7ff fdf9 	bl	8005db4 <xTaskCreateStatic>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4a23      	ldr	r2, [pc, #140]	; (8006254 <vTaskStartScheduler+0xc8>)
 80061c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061c8:	4b22      	ldr	r3, [pc, #136]	; (8006254 <vTaskStartScheduler+0xc8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e001      	b.n	80061da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061e0:	f000 fd10 	bl	8006c04 <xTimerCreateTimerTask>
 80061e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11b      	bne.n	8006224 <vTaskStartScheduler+0x98>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	613b      	str	r3, [r7, #16]
}
 80061fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <vTaskStartScheduler+0xcc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3354      	adds	r3, #84	; 0x54
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <vTaskStartScheduler+0xd0>)
 8006208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <vTaskStartScheduler+0xd4>)
 800620c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <vTaskStartScheduler+0xd8>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <vTaskStartScheduler+0xdc>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800621e:	f001 f8c7 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006222:	e00e      	b.n	8006242 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622a:	d10a      	bne.n	8006242 <vTaskStartScheduler+0xb6>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <vTaskStartScheduler+0xb4>
}
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	0800869c 	.word	0x0800869c
 8006250:	08006891 	.word	0x08006891
 8006254:	20000f44 	.word	0x20000f44
 8006258:	20000a4c 	.word	0x20000a4c
 800625c:	20000014 	.word	0x20000014
 8006260:	20000f40 	.word	0x20000f40
 8006264:	20000f2c 	.word	0x20000f2c
 8006268:	20000f24 	.word	0x20000f24

0800626c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <vTaskSuspendAll+0x18>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a03      	ldr	r2, [pc, #12]	; (8006284 <vTaskSuspendAll+0x18>)
 8006278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800627a:	bf00      	nop
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20000f48 	.word	0x20000f48

08006288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006296:	4b42      	ldr	r3, [pc, #264]	; (80063a0 <xTaskResumeAll+0x118>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	603b      	str	r3, [r7, #0]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062b4:	f001 f91e 	bl	80074f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062b8:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <xTaskResumeAll+0x118>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3b01      	subs	r3, #1
 80062be:	4a38      	ldr	r2, [pc, #224]	; (80063a0 <xTaskResumeAll+0x118>)
 80062c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <xTaskResumeAll+0x118>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d162      	bne.n	8006390 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062ca:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <xTaskResumeAll+0x11c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d05e      	beq.n	8006390 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d2:	e02f      	b.n	8006334 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b34      	ldr	r3, [pc, #208]	; (80063a8 <xTaskResumeAll+0x120>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe ff5f 	bl	80051a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe ff5a 	bl	80051a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <xTaskResumeAll+0x124>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d903      	bls.n	8006304 <xTaskResumeAll+0x7c>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <xTaskResumeAll+0x124>)
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <xTaskResumeAll+0x128>)
 8006312:	441a      	add	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f7fe fee5 	bl	80050ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006324:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <xTaskResumeAll+0x12c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800632e:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <xTaskResumeAll+0x130>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006334:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <xTaskResumeAll+0x120>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1cb      	bne.n	80062d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006342:	f000 fb5f 	bl	8006a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <xTaskResumeAll+0x134>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d010      	beq.n	8006374 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006352:	f000 f847 	bl	80063e4 <xTaskIncrementTick>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800635c:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <xTaskResumeAll+0x130>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f1      	bne.n	8006352 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <xTaskResumeAll+0x134>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <xTaskResumeAll+0x130>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <xTaskResumeAll+0x138>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006390:	f001 f8e0 	bl	8007554 <vPortExitCritical>

	return xAlreadyYielded;
 8006394:	68bb      	ldr	r3, [r7, #8]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000f48 	.word	0x20000f48
 80063a4:	20000f20 	.word	0x20000f20
 80063a8:	20000ee0 	.word	0x20000ee0
 80063ac:	20000f28 	.word	0x20000f28
 80063b0:	20000a50 	.word	0x20000a50
 80063b4:	20000a4c 	.word	0x20000a4c
 80063b8:	20000f34 	.word	0x20000f34
 80063bc:	20000f30 	.word	0x20000f30
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <xTaskGetTickCount+0x1c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063d0:	687b      	ldr	r3, [r7, #4]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000f24 	.word	0x20000f24

080063e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ee:	4b4f      	ldr	r3, [pc, #316]	; (800652c <xTaskIncrementTick+0x148>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f040 808f 	bne.w	8006516 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f8:	4b4d      	ldr	r3, [pc, #308]	; (8006530 <xTaskIncrementTick+0x14c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006400:	4a4b      	ldr	r2, [pc, #300]	; (8006530 <xTaskIncrementTick+0x14c>)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d120      	bne.n	800644e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800640c:	4b49      	ldr	r3, [pc, #292]	; (8006534 <xTaskIncrementTick+0x150>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <xTaskIncrementTick+0x48>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	603b      	str	r3, [r7, #0]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <xTaskIncrementTick+0x46>
 800642c:	4b41      	ldr	r3, [pc, #260]	; (8006534 <xTaskIncrementTick+0x150>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <xTaskIncrementTick+0x154>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a3f      	ldr	r2, [pc, #252]	; (8006534 <xTaskIncrementTick+0x150>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <xTaskIncrementTick+0x154>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b3e      	ldr	r3, [pc, #248]	; (800653c <xTaskIncrementTick+0x158>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	4a3d      	ldr	r2, [pc, #244]	; (800653c <xTaskIncrementTick+0x158>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	f000 fadb 	bl	8006a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800644e:	4b3c      	ldr	r3, [pc, #240]	; (8006540 <xTaskIncrementTick+0x15c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d349      	bcc.n	80064ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006458:	4b36      	ldr	r3, [pc, #216]	; (8006534 <xTaskIncrementTick+0x150>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <xTaskIncrementTick+0x15c>)
 8006464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006468:	601a      	str	r2, [r3, #0]
					break;
 800646a:	e03f      	b.n	80064ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646c:	4b31      	ldr	r3, [pc, #196]	; (8006534 <xTaskIncrementTick+0x150>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d203      	bcs.n	800648c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006484:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <xTaskIncrementTick+0x15c>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800648a:	e02f      	b.n	80064ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fe87 	bl	80051a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3318      	adds	r3, #24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fe7e 	bl	80051a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <xTaskIncrementTick+0x160>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d903      	bls.n	80064bc <xTaskIncrementTick+0xd8>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <xTaskIncrementTick+0x160>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <xTaskIncrementTick+0x164>)
 80064ca:	441a      	add	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f7fe fe09 	bl	80050ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <xTaskIncrementTick+0x168>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3b8      	bcc.n	8006458 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ea:	e7b5      	b.n	8006458 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <xTaskIncrementTick+0x168>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4915      	ldr	r1, [pc, #84]	; (8006548 <xTaskIncrementTick+0x164>)
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d901      	bls.n	8006508 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <xTaskIncrementTick+0x16c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e004      	b.n	8006520 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <xTaskIncrementTick+0x170>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	4a0d      	ldr	r2, [pc, #52]	; (8006554 <xTaskIncrementTick+0x170>)
 800651e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006520:	697b      	ldr	r3, [r7, #20]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000f48 	.word	0x20000f48
 8006530:	20000f24 	.word	0x20000f24
 8006534:	20000ed8 	.word	0x20000ed8
 8006538:	20000edc 	.word	0x20000edc
 800653c:	20000f38 	.word	0x20000f38
 8006540:	20000f40 	.word	0x20000f40
 8006544:	20000f28 	.word	0x20000f28
 8006548:	20000a50 	.word	0x20000a50
 800654c:	20000a4c 	.word	0x20000a4c
 8006550:	20000f34 	.word	0x20000f34
 8006554:	20000f30 	.word	0x20000f30

08006558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800655e:	4b2a      	ldr	r3, [pc, #168]	; (8006608 <vTaskSwitchContext+0xb0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006566:	4b29      	ldr	r3, [pc, #164]	; (800660c <vTaskSwitchContext+0xb4>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800656c:	e046      	b.n	80065fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800656e:	4b27      	ldr	r3, [pc, #156]	; (800660c <vTaskSwitchContext+0xb4>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	4b26      	ldr	r3, [pc, #152]	; (8006610 <vTaskSwitchContext+0xb8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e010      	b.n	800659e <vTaskSwitchContext+0x46>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <vTaskSwitchContext+0x40>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	607b      	str	r3, [r7, #4]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <vTaskSwitchContext+0x3e>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b01      	subs	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	491d      	ldr	r1, [pc, #116]	; (8006614 <vTaskSwitchContext+0xbc>)
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0e4      	beq.n	800657c <vTaskSwitchContext+0x24>
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <vTaskSwitchContext+0xbc>)
 80065be:	4413      	add	r3, r2
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3308      	adds	r3, #8
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d104      	bne.n	80065e2 <vTaskSwitchContext+0x8a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a0b      	ldr	r2, [pc, #44]	; (8006618 <vTaskSwitchContext+0xc0>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <vTaskSwitchContext+0xb8>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <vTaskSwitchContext+0xc0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3354      	adds	r3, #84	; 0x54
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <vTaskSwitchContext+0xc4>)
 80065fa:	6013      	str	r3, [r2, #0]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000f48 	.word	0x20000f48
 800660c:	20000f34 	.word	0x20000f34
 8006610:	20000f28 	.word	0x20000f28
 8006614:	20000a50 	.word	0x20000a50
 8006618:	20000a4c 	.word	0x20000a4c
 800661c:	20000014 	.word	0x20000014

08006620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006646:	4b07      	ldr	r3, [pc, #28]	; (8006664 <vTaskPlaceOnEventList+0x44>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3318      	adds	r3, #24
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe fd6f 	bl	8005132 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006654:	2101      	movs	r1, #1
 8006656:	6838      	ldr	r0, [r7, #0]
 8006658:	f000 fa80 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000a4c 	.word	0x20000a4c

08006668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3318      	adds	r3, #24
 8006696:	4619      	mov	r1, r3
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7fe fd26 	bl	80050ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	68b8      	ldr	r0, [r7, #8]
 80066ae:	f000 fa55 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
	}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000a4c 	.word	0x20000a4c

080066c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60fb      	str	r3, [r7, #12]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3318      	adds	r3, #24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fd57 	bl	80051a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f6:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <xTaskRemoveFromEventList+0xb0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d11d      	bne.n	800673a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3304      	adds	r3, #4
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fd4e 	bl	80051a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <xTaskRemoveFromEventList+0xb4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <xTaskRemoveFromEventList+0x5c>
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <xTaskRemoveFromEventList+0xb4>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a13      	ldr	r2, [pc, #76]	; (8006778 <xTaskRemoveFromEventList+0xb8>)
 800672a:	441a      	add	r2, r3
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe fcd9 	bl	80050ea <vListInsertEnd>
 8006738:	e005      	b.n	8006746 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3318      	adds	r3, #24
 800673e:	4619      	mov	r1, r3
 8006740:	480e      	ldr	r0, [pc, #56]	; (800677c <xTaskRemoveFromEventList+0xbc>)
 8006742:	f7fe fcd2 	bl	80050ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <xTaskRemoveFromEventList+0xc0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	429a      	cmp	r2, r3
 8006752:	d905      	bls.n	8006760 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <xTaskRemoveFromEventList+0xc4>)
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e001      	b.n	8006764 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006764:	697b      	ldr	r3, [r7, #20]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000f48 	.word	0x20000f48
 8006774:	20000f28 	.word	0x20000f28
 8006778:	20000a50 	.word	0x20000a50
 800677c:	20000ee0 	.word	0x20000ee0
 8006780:	20000a4c 	.word	0x20000a4c
 8006784:	20000f34 	.word	0x20000f34

08006788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006790:	4b06      	ldr	r3, [pc, #24]	; (80067ac <vTaskInternalSetTimeOutState+0x24>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <vTaskInternalSetTimeOutState+0x28>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	605a      	str	r2, [r3, #4]
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000f38 	.word	0x20000f38
 80067b0:	20000f24 	.word	0x20000f24

080067b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067f6:	f000 fe7d 	bl	80074f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067fa:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <xTaskCheckForTimeOut+0xbc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006812:	d102      	bne.n	800681a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e023      	b.n	8006862 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <xTaskCheckForTimeOut+0xc0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d007      	beq.n	8006836 <xTaskCheckForTimeOut+0x82>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	429a      	cmp	r2, r3
 800682e:	d302      	bcc.n	8006836 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	e015      	b.n	8006862 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	429a      	cmp	r2, r3
 800683e:	d20b      	bcs.n	8006858 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff9b 	bl	8006788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e004      	b.n	8006862 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006862:	f000 fe77 	bl	8007554 <vPortExitCritical>

	return xReturn;
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000f24 	.word	0x20000f24
 8006874:	20000f38 	.word	0x20000f38

08006878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800687c:	4b03      	ldr	r3, [pc, #12]	; (800688c <vTaskMissedYield+0x14>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000f34 	.word	0x20000f34

08006890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006898:	f000 f852 	bl	8006940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <prvIdleTask+0x28>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d9f9      	bls.n	8006898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <prvIdleTask+0x2c>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068b4:	e7f0      	b.n	8006898 <prvIdleTask+0x8>
 80068b6:	bf00      	nop
 80068b8:	20000a50 	.word	0x20000a50
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	e00c      	b.n	80068e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4a12      	ldr	r2, [pc, #72]	; (8006920 <prvInitialiseTaskLists+0x60>)
 80068d8:	4413      	add	r3, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fbd8 	bl	8005090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3301      	adds	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b37      	cmp	r3, #55	; 0x37
 80068ea:	d9ef      	bls.n	80068cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068ec:	480d      	ldr	r0, [pc, #52]	; (8006924 <prvInitialiseTaskLists+0x64>)
 80068ee:	f7fe fbcf 	bl	8005090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068f2:	480d      	ldr	r0, [pc, #52]	; (8006928 <prvInitialiseTaskLists+0x68>)
 80068f4:	f7fe fbcc 	bl	8005090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068f8:	480c      	ldr	r0, [pc, #48]	; (800692c <prvInitialiseTaskLists+0x6c>)
 80068fa:	f7fe fbc9 	bl	8005090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068fe:	480c      	ldr	r0, [pc, #48]	; (8006930 <prvInitialiseTaskLists+0x70>)
 8006900:	f7fe fbc6 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006904:	480b      	ldr	r0, [pc, #44]	; (8006934 <prvInitialiseTaskLists+0x74>)
 8006906:	f7fe fbc3 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800690a:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <prvInitialiseTaskLists+0x78>)
 800690c:	4a05      	ldr	r2, [pc, #20]	; (8006924 <prvInitialiseTaskLists+0x64>)
 800690e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <prvInitialiseTaskLists+0x7c>)
 8006912:	4a05      	ldr	r2, [pc, #20]	; (8006928 <prvInitialiseTaskLists+0x68>)
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000a50 	.word	0x20000a50
 8006924:	20000eb0 	.word	0x20000eb0
 8006928:	20000ec4 	.word	0x20000ec4
 800692c:	20000ee0 	.word	0x20000ee0
 8006930:	20000ef4 	.word	0x20000ef4
 8006934:	20000f0c 	.word	0x20000f0c
 8006938:	20000ed8 	.word	0x20000ed8
 800693c:	20000edc 	.word	0x20000edc

08006940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006946:	e019      	b.n	800697c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006948:	f000 fdd4 	bl	80074f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <prvCheckTasksWaitingTermination+0x50>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fc23 	bl	80051a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800695e:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <prvCheckTasksWaitingTermination+0x54>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3b01      	subs	r3, #1
 8006964:	4a0b      	ldr	r2, [pc, #44]	; (8006994 <prvCheckTasksWaitingTermination+0x54>)
 8006966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006968:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <prvCheckTasksWaitingTermination+0x58>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3b01      	subs	r3, #1
 800696e:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <prvCheckTasksWaitingTermination+0x58>)
 8006970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006972:	f000 fdef 	bl	8007554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f810 	bl	800699c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <prvCheckTasksWaitingTermination+0x58>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e1      	bne.n	8006948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000ef4 	.word	0x20000ef4
 8006994:	20000f20 	.word	0x20000f20
 8006998:	20000f08 	.word	0x20000f08

0800699c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3354      	adds	r3, #84	; 0x54
 80069a8:	4618      	mov	r0, r3
 80069aa:	f001 f993 	bl	8007cd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d108      	bne.n	80069ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 ff87 	bl	80078d0 <vPortFree>
				vPortFree( pxTCB );
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 ff84 	bl	80078d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069c8:	e018      	b.n	80069fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d103      	bne.n	80069dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 ff7b 	bl	80078d0 <vPortFree>
	}
 80069da:	e00f      	b.n	80069fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d00a      	beq.n	80069fc <prvDeleteTCB+0x60>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60fb      	str	r3, [r7, #12]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <prvDeleteTCB+0x5e>
	}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <prvResetNextTaskUnblockTime+0x38>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvResetNextTaskUnblockTime+0x3c>)
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a1c:	e008      	b.n	8006a30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <prvResetNextTaskUnblockTime+0x38>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <prvResetNextTaskUnblockTime+0x3c>)
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20000ed8 	.word	0x20000ed8
 8006a40:	20000f40 	.word	0x20000f40

08006a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <xTaskGetSchedulerState+0x34>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a52:	2301      	movs	r3, #1
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	e008      	b.n	8006a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a58:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <xTaskGetSchedulerState+0x38>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a60:	2302      	movs	r3, #2
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	e001      	b.n	8006a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a6a:	687b      	ldr	r3, [r7, #4]
	}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20000f2c 	.word	0x20000f2c
 8006a7c:	20000f48 	.word	0x20000f48

08006a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d056      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <xTaskPriorityDisinherit+0xd0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d00a      	beq.n	8006ab6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60bb      	str	r3, [r7, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	1e5a      	subs	r2, r3, #1
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d02c      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d128      	bne.n	8006b44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fb54 	bl	80051a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <xTaskPriorityDisinherit+0xd4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d903      	bls.n	8006b24 <xTaskPriorityDisinherit+0xa4>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <xTaskPriorityDisinherit+0xd4>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <xTaskPriorityDisinherit+0xd8>)
 8006b32:	441a      	add	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7fe fad5 	bl	80050ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b44:	697b      	ldr	r3, [r7, #20]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000a4c 	.word	0x20000a4c
 8006b54:	20000f28 	.word	0x20000f28
 8006b58:	20000a50 	.word	0x20000a50

08006b5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b66:	4b21      	ldr	r3, [pc, #132]	; (8006bec <prvAddCurrentTaskToDelayedList+0x90>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fb16 	bl	80051a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7e:	d10a      	bne.n	8006b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4819      	ldr	r0, [pc, #100]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b90:	f7fe faab 	bl	80050ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b94:	e026      	b.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b9e:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d209      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe fab9 	bl	8005132 <vListInsert>
}
 8006bc0:	e010      	b.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe faaf 	bl	8005132 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d202      	bcs.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bde:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000f24 	.word	0x20000f24
 8006bf0:	20000a4c 	.word	0x20000a4c
 8006bf4:	20000f0c 	.word	0x20000f0c
 8006bf8:	20000edc 	.word	0x20000edc
 8006bfc:	20000ed8 	.word	0x20000ed8
 8006c00:	20000f40 	.word	0x20000f40

08006c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c0e:	f000 fb07 	bl	8007220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <xTimerCreateTimerTask+0x80>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d021      	beq.n	8006c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c22:	1d3a      	adds	r2, r7, #4
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fa15 	bl	800505c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	9202      	str	r2, [sp, #8]
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	460a      	mov	r2, r1
 8006c44:	4910      	ldr	r1, [pc, #64]	; (8006c88 <xTimerCreateTimerTask+0x84>)
 8006c46:	4811      	ldr	r0, [pc, #68]	; (8006c8c <xTimerCreateTimerTask+0x88>)
 8006c48:	f7ff f8b4 	bl	8005db4 <xTaskCreateStatic>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4a10      	ldr	r2, [pc, #64]	; (8006c90 <xTimerCreateTimerTask+0x8c>)
 8006c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <xTimerCreateTimerTask+0x8c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	613b      	str	r3, [r7, #16]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c7a:	697b      	ldr	r3, [r7, #20]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000f7c 	.word	0x20000f7c
 8006c88:	080086a4 	.word	0x080086a4
 8006c8c:	08006dc9 	.word	0x08006dc9
 8006c90:	20000f80 	.word	0x20000f80

08006c94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	623b      	str	r3, [r7, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <xTimerGenericCommand+0x98>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d02a      	beq.n	8006d20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	dc18      	bgt.n	8006d0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cdc:	f7ff feb2 	bl	8006a44 <xTaskGetSchedulerState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d109      	bne.n	8006cfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <xTimerGenericCommand+0x98>)
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f107 0110 	add.w	r1, r7, #16
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	f7fe fc29 	bl	8005548 <xQueueGenericSend>
 8006cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8006cf8:	e012      	b.n	8006d20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <xTimerGenericCommand+0x98>)
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f107 0110 	add.w	r1, r7, #16
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	f7fe fc1f 	bl	8005548 <xQueueGenericSend>
 8006d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d0c:	e008      	b.n	8006d20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <xTimerGenericCommand+0x98>)
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f107 0110 	add.w	r1, r7, #16
 8006d16:	2300      	movs	r3, #0
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	f7fe fd13 	bl	8005744 <xQueueGenericSendFromISR>
 8006d1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3728      	adds	r7, #40	; 0x28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000f7c 	.word	0x20000f7c

08006d30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3a:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <prvProcessExpiredTimer+0x94>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fa2b 	bl	80051a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d022      	beq.n	8006da2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	18d1      	adds	r1, r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	6978      	ldr	r0, [r7, #20]
 8006d6a:	f000 f8d1 	bl	8006f10 <prvInsertTimerInActiveList>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01f      	beq.n	8006db4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6978      	ldr	r0, [r7, #20]
 8006d80:	f7ff ff88 	bl	8006c94 <xTimerGenericCommand>
 8006d84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	6978      	ldr	r0, [r7, #20]
 8006dba:	4798      	blx	r3
}
 8006dbc:	bf00      	nop
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000f74 	.word	0x20000f74

08006dc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dd0:	f107 0308 	add.w	r3, r7, #8
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f857 	bl	8006e88 <prvGetNextExpireTime>
 8006dda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4619      	mov	r1, r3
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f803 	bl	8006dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006de6:	f000 f8d5 	bl	8006f94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dea:	e7f1      	b.n	8006dd0 <prvTimerTask+0x8>

08006dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006df6:	f7ff fa39 	bl	800626c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f866 	bl	8006ed0 <prvSampleTimeNow>
 8006e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d130      	bne.n	8006e6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <prvProcessTimerOrBlockTask+0x3c>
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d806      	bhi.n	8006e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e1a:	f7ff fa35 	bl	8006288 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff ff85 	bl	8006d30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e26:	e024      	b.n	8006e72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <prvProcessTimerOrBlockTask+0x90>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <prvProcessTimerOrBlockTask+0x50>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <prvProcessTimerOrBlockTask+0x52>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e40:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <prvProcessTimerOrBlockTask+0x94>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f7fe ff7d 	bl	8005d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e52:	f7ff fa19 	bl	8006288 <xTaskResumeAll>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e5c:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <prvProcessTimerOrBlockTask+0x98>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
}
 8006e6c:	e001      	b.n	8006e72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e6e:	f7ff fa0b 	bl	8006288 <xTaskResumeAll>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000f78 	.word	0x20000f78
 8006e80:	20000f7c 	.word	0x20000f7c
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e90:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <prvGetNextExpireTime+0x44>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <prvGetNextExpireTime+0x16>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	e000      	b.n	8006ea0 <prvGetNextExpireTime+0x18>
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <prvGetNextExpireTime+0x44>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e001      	b.n	8006ebc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000f74 	.word	0x20000f74

08006ed0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ed8:	f7ff fa74 	bl	80063c4 <xTaskGetTickCount>
 8006edc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <prvSampleTimeNow+0x3c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d205      	bcs.n	8006ef4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ee8:	f000 f936 	bl	8007158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	e002      	b.n	8006efa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSampleTimeNow+0x3c>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000f84 	.word	0x20000f84

08006f10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d812      	bhi.n	8006f5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d302      	bcc.n	8006f4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e01b      	b.n	8006f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <prvInsertTimerInActiveList+0x7c>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7fe f8ec 	bl	8005132 <vListInsert>
 8006f5a:	e012      	b.n	8006f82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d206      	bcs.n	8006f72 <prvInsertTimerInActiveList+0x62>
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d302      	bcc.n	8006f72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	e007      	b.n	8006f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <prvInsertTimerInActiveList+0x80>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fe f8d8 	bl	8005132 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f82:	697b      	ldr	r3, [r7, #20]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000f78 	.word	0x20000f78
 8006f90:	20000f74 	.word	0x20000f74

08006f94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	; 0x38
 8006f98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f9a:	e0ca      	b.n	8007132 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da18      	bge.n	8006fd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fa2:	1d3b      	adds	r3, r7, #4
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61fb      	str	r3, [r7, #28]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fca:	6850      	ldr	r0, [r2, #4]
 8006fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fce:	6892      	ldr	r2, [r2, #8]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f2c0 80aa 	blt.w	8007130 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	3304      	adds	r3, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe f8d9 	bl	80051a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff6b 	bl	8006ed0 <prvSampleTimeNow>
 8006ffa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	f200 8097 	bhi.w	8007132 <prvProcessReceivedCommands+0x19e>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <prvProcessReceivedCommands+0x78>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007035 	.word	0x08007035
 8007010:	08007035 	.word	0x08007035
 8007014:	08007035 	.word	0x08007035
 8007018:	080070a9 	.word	0x080070a9
 800701c:	080070bd 	.word	0x080070bd
 8007020:	08007107 	.word	0x08007107
 8007024:	08007035 	.word	0x08007035
 8007028:	08007035 	.word	0x08007035
 800702c:	080070a9 	.word	0x080070a9
 8007030:	080070bd 	.word	0x080070bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	18d1      	adds	r1, r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007054:	f7ff ff5c 	bl	8006f10 <prvInsertTimerInActiveList>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d069      	beq.n	8007132 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007064:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d05e      	beq.n	8007132 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	441a      	add	r2, r3
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	2100      	movs	r1, #0
 8007084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007086:	f7ff fe05 	bl	8006c94 <xTimerGenericCommand>
 800708a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d14f      	bne.n	8007132 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	61bb      	str	r3, [r7, #24]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070ba:	e03a      	b.n	8007132 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	617b      	str	r3, [r7, #20]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	18d1      	adds	r1, r2, r3
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007100:	f7ff ff06 	bl	8006f10 <prvInsertTimerInActiveList>
					break;
 8007104:	e015      	b.n	8007132 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007116:	f000 fbdb 	bl	80078d0 <vPortFree>
 800711a:	e00a      	b.n	8007132 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800712e:	e000      	b.n	8007132 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <prvProcessReceivedCommands+0x1c0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	1d39      	adds	r1, r7, #4
 8007138:	2200      	movs	r2, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fb9e 	bl	800587c <xQueueReceive>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f47f af2a 	bne.w	8006f9c <prvProcessReceivedCommands+0x8>
	}
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3730      	adds	r7, #48	; 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000f7c 	.word	0x20000f7c

08007158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800715e:	e048      	b.n	80071f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007160:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <prvSwitchTimerLists+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716a:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <prvSwitchTimerLists+0xc0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f813 	bl	80051a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02e      	beq.n	80071f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90e      	bls.n	80071c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f7fd ffb8 	bl	8005132 <vListInsert>
 80071c2:	e016      	b.n	80071f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c4:	2300      	movs	r3, #0
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	2100      	movs	r1, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fd60 	bl	8006c94 <xTimerGenericCommand>
 80071d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	603b      	str	r3, [r7, #0]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1b1      	bne.n	8007160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <prvSwitchTimerLists+0xc4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a04      	ldr	r2, [pc, #16]	; (8007218 <prvSwitchTimerLists+0xc0>)
 8007208:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800720a:	4a04      	ldr	r2, [pc, #16]	; (800721c <prvSwitchTimerLists+0xc4>)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6013      	str	r3, [r2, #0]
}
 8007210:	bf00      	nop
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000f74 	.word	0x20000f74
 800721c:	20000f78 	.word	0x20000f78

08007220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007226:	f000 f965 	bl	80074f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d120      	bne.n	8007274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007232:	4814      	ldr	r0, [pc, #80]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007234:	f7fd ff2c 	bl	8005090 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007238:	4813      	ldr	r0, [pc, #76]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 800723a:	f7fd ff29 	bl	8005090 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <prvCheckForValidListAndQueue+0x6c>)
 8007240:	4a10      	ldr	r2, [pc, #64]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <prvCheckForValidListAndQueue+0x70>)
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 8007248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <prvCheckForValidListAndQueue+0x74>)
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <prvCheckForValidListAndQueue+0x78>)
 8007252:	2110      	movs	r1, #16
 8007254:	200a      	movs	r0, #10
 8007256:	f7fe f837 	bl	80052c8 <xQueueGenericCreateStatic>
 800725a:	4603      	mov	r3, r0
 800725c:	4a08      	ldr	r2, [pc, #32]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800725e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	490b      	ldr	r1, [pc, #44]	; (800729c <prvCheckForValidListAndQueue+0x7c>)
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fd18 	bl	8005ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007274:	f000 f96e 	bl	8007554 <vPortExitCritical>
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000f7c 	.word	0x20000f7c
 8007284:	20000f4c 	.word	0x20000f4c
 8007288:	20000f60 	.word	0x20000f60
 800728c:	20000f74 	.word	0x20000f74
 8007290:	20000f78 	.word	0x20000f78
 8007294:	20001028 	.word	0x20001028
 8007298:	20000f88 	.word	0x20000f88
 800729c:	080086ac 	.word	0x080086ac

080072a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b04      	subs	r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <pxPortInitialiseStack+0x64>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b14      	subs	r3, #20
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f06f 0202 	mvn.w	r2, #2
 80072ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b20      	subs	r3, #32
 80072f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08007309 	.word	0x08007309

08007308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <prvTaskExitError+0x54>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731a:	d00a      	beq.n	8007332 <prvTaskExitError+0x2a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <prvTaskExitError+0x28>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
}
 8007344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007346:	bf00      	nop
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0fc      	beq.n	8007348 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000010 	.word	0x20000010

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	20000a4c 	.word	0x20000a4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b46      	ldr	r3, [pc, #280]	; (80074d0 <xPortStartScheduler+0x120>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a46      	ldr	r2, [pc, #280]	; (80074d4 <xPortStartScheduler+0x124>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10a      	bne.n	80073d6 <xPortStartScheduler+0x26>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d6:	4b3e      	ldr	r3, [pc, #248]	; (80074d0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <xPortStartScheduler+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x46>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <xPortStartScheduler+0x12c>)
 80073f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <xPortStartScheduler+0x130>)
 800741c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <xPortStartScheduler+0x134>)
 8007420:	2207      	movs	r2, #7
 8007422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007424:	e009      	b.n	800743a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007426:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <xPortStartScheduler+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	4a2d      	ldr	r2, [pc, #180]	; (80074e4 <xPortStartScheduler+0x134>)
 800742e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d0ef      	beq.n	8007426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007446:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1c3 0307 	rsb	r3, r3, #7
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00a      	beq.n	8007468 <xPortStartScheduler+0xb8>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <xPortStartScheduler+0x134>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <xPortStartScheduler+0x134>)
 8007470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xPortStartScheduler+0x134>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <xPortStartScheduler+0x134>)
 800747c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007486:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <xPortStartScheduler+0x138>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <xPortStartScheduler+0x138>)
 800748c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <xPortStartScheduler+0x138>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <xPortStartScheduler+0x138>)
 8007498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800749c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800749e:	f000 f8dd 	bl	800765c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <xPortStartScheduler+0x13c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074a8:	f000 f8fc 	bl	80076a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <xPortStartScheduler+0x140>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <xPortStartScheduler+0x140>)
 80074b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074b8:	f7ff ff66 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074bc:	f7ff f84c 	bl	8006558 <vTaskSwitchContext>
	prvTaskExitError();
 80074c0:	f7ff ff22 	bl	8007308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed00 	.word	0xe000ed00
 80074d4:	410fc271 	.word	0x410fc271
 80074d8:	410fc270 	.word	0x410fc270
 80074dc:	e000e400 	.word	0xe000e400
 80074e0:	20001078 	.word	0x20001078
 80074e4:	2000107c 	.word	0x2000107c
 80074e8:	e000ed20 	.word	0xe000ed20
 80074ec:	20000010 	.word	0x20000010
 80074f0:	e000ef34 	.word	0xe000ef34

080074f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	607b      	str	r3, [r7, #4]
}
 800750c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <vPortEnterCritical+0x58>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a0d      	ldr	r2, [pc, #52]	; (800754c <vPortEnterCritical+0x58>)
 8007516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <vPortEnterCritical+0x58>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10f      	bne.n	8007540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <vPortEnterCritical+0x5c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <vPortEnterCritical+0x4c>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vPortEnterCritical+0x4a>
	}
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000010 	.word	0x20000010
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800755a:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <vPortExitCritical+0x50>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <vPortExitCritical+0x24>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	607b      	str	r3, [r7, #4]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <vPortExitCritical+0x50>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <vPortExitCritical+0x50>)
 8007580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <vPortExitCritical+0x50>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <vPortExitCritical+0x42>
 800758a:	2300      	movs	r3, #0
 800758c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f383 8811 	msr	BASEPRI, r3
}
 8007594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000010 	.word	0x20000010
	...

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f01e 0f10 	tst.w	lr, #16
 80075c0:	bf08      	it	eq
 80075c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075d4:	f380 8811 	msr	BASEPRI, r0
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f7fe ffba 	bl	8006558 <vTaskSwitchContext>
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f380 8811 	msr	BASEPRI, r0
 80075ec:	bc09      	pop	{r0, r3}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f6:	f01e 0f10 	tst.w	lr, #16
 80075fa:	bf08      	it	eq
 80075fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007600:	f380 8809 	msr	PSP, r0
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst>:
 8007610:	20000a4c 	.word	0x20000a4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007632:	f7fe fed7 	bl	80063e4 <xTaskIncrementTick>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <xPortSysTickHandler+0x40>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <vPortSetupTimerInterrupt+0x38>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortSetupTimerInterrupt+0x3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <vPortSetupTimerInterrupt+0x40>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <vPortSetupTimerInterrupt+0x44>)
 800767a:	3b01      	subs	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000e010 	.word	0xe000e010
 8007694:	e000e018 	.word	0xe000e018
 8007698:	20000000 	.word	0x20000000
 800769c:	10624dd3 	.word	0x10624dd3
 80076a0:	e000e014 	.word	0xe000e014

080076a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076b4 <vPortEnableVFP+0x10>
 80076a8:	6801      	ldr	r1, [r0, #0]
 80076aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076b2:	bf00      	nop
 80076b4:	e000ed88 	.word	0xe000ed88

080076b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076be:	f3ef 8305 	mrs	r3, IPSR
 80076c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d914      	bls.n	80076f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <vPortValidateInterruptPriority+0x70>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076d4:	4b15      	ldr	r3, [pc, #84]	; (800772c <vPortValidateInterruptPriority+0x74>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	7afa      	ldrb	r2, [r7, #11]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d20a      	bcs.n	80076f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <vPortValidateInterruptPriority+0x78>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076fc:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <vPortValidateInterruptPriority+0x7c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d90a      	bls.n	800771a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	603b      	str	r3, [r7, #0]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <vPortValidateInterruptPriority+0x60>
	}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	e000e3f0 	.word	0xe000e3f0
 800772c:	20001078 	.word	0x20001078
 8007730:	e000ed0c 	.word	0xe000ed0c
 8007734:	2000107c 	.word	0x2000107c

08007738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007744:	f7fe fd92 	bl	800626c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007748:	4b5b      	ldr	r3, [pc, #364]	; (80078b8 <pvPortMalloc+0x180>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007750:	f000 f920 	bl	8007994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007754:	4b59      	ldr	r3, [pc, #356]	; (80078bc <pvPortMalloc+0x184>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8093 	bne.w	8007888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01d      	beq.n	80077a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007768:	2208      	movs	r2, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	3308      	adds	r3, #8
 8007782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <pvPortMalloc+0x6c>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d06e      	beq.n	8007888 <pvPortMalloc+0x150>
 80077aa:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <pvPortMalloc+0x188>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d869      	bhi.n	8007888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077b4:	4b43      	ldr	r3, [pc, #268]	; (80078c4 <pvPortMalloc+0x18c>)
 80077b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077b8:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <pvPortMalloc+0x18c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077be:	e004      	b.n	80077ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d903      	bls.n	80077dc <pvPortMalloc+0xa4>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <pvPortMalloc+0x180>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d050      	beq.n	8007888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2208      	movs	r2, #8
 80077ec:	4413      	add	r3, r2
 80077ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	2308      	movs	r3, #8
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d91f      	bls.n	8007848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <pvPortMalloc+0xf8>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	613b      	str	r3, [r7, #16]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f000 f908 	bl	8007a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <pvPortMalloc+0x188>)
 8007854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <pvPortMalloc+0x188>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <pvPortMalloc+0x190>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d203      	bcs.n	800786a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <pvPortMalloc+0x188>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <pvPortMalloc+0x190>)
 8007868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x184>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	431a      	orrs	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <pvPortMalloc+0x194>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <pvPortMalloc+0x194>)
 8007886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007888:	f7fe fcfe 	bl	8006288 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <pvPortMalloc+0x174>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	60fb      	str	r3, [r7, #12]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0x172>
	return pvReturn;
 80078ac:	69fb      	ldr	r3, [r7, #28]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20004c88 	.word	0x20004c88
 80078bc:	20004c9c 	.word	0x20004c9c
 80078c0:	20004c8c 	.word	0x20004c8c
 80078c4:	20004c80 	.word	0x20004c80
 80078c8:	20004c90 	.word	0x20004c90
 80078cc:	20004c94 	.word	0x20004c94

080078d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d04d      	beq.n	800797e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078e2:	2308      	movs	r3, #8
 80078e4:	425b      	negs	r3, r3
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4b24      	ldr	r3, [pc, #144]	; (8007988 <vPortFree+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <vPortFree+0x44>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <vPortFree+0x62>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <vPortFree+0xb8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01e      	beq.n	800797e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11a      	bne.n	800797e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <vPortFree+0xb8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007958:	f7fe fc88 	bl	800626c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortFree+0xbc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4413      	add	r3, r2
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <vPortFree+0xbc>)
 8007968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f000 f874 	bl	8007a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <vPortFree+0xc0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vPortFree+0xc0>)
 8007978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800797a:	f7fe fc85 	bl	8006288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20004c9c 	.word	0x20004c9c
 800798c:	20004c8c 	.word	0x20004c8c
 8007990:	20004c98 	.word	0x20004c98

08007994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800799a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800799e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <prvHeapInit+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <prvHeapInit+0xac>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <prvHeapInit+0xb0>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <prvHeapInit+0xb0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <prvHeapInit+0xb4>)
 80079f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvHeapInit+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvHeapInit+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvHeapInit+0xb4>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <prvHeapInit+0xb8>)
 8007a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvHeapInit+0xbc>)
 8007a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvHeapInit+0xc0>)
 8007a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20001080 	.word	0x20001080
 8007a44:	20004c80 	.word	0x20004c80
 8007a48:	20004c88 	.word	0x20004c88
 8007a4c:	20004c90 	.word	0x20004c90
 8007a50:	20004c8c 	.word	0x20004c8c
 8007a54:	20004c9c 	.word	0x20004c9c

08007a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <prvInsertBlockIntoFreeList+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <prvInsertBlockIntoFreeList+0x14>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8f7      	bhi.n	8007a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d108      	bne.n	8007a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d118      	bne.n	8007ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d00d      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20004c80 	.word	0x20004c80
 8007b08:	20004c88 	.word	0x20004c88

08007b0c <__errno>:
 8007b0c:	4b01      	ldr	r3, [pc, #4]	; (8007b14 <__errno+0x8>)
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000014 	.word	0x20000014

08007b18 <__libc_init_array>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4d0d      	ldr	r5, [pc, #52]	; (8007b50 <__libc_init_array+0x38>)
 8007b1c:	4c0d      	ldr	r4, [pc, #52]	; (8007b54 <__libc_init_array+0x3c>)
 8007b1e:	1b64      	subs	r4, r4, r5
 8007b20:	10a4      	asrs	r4, r4, #2
 8007b22:	2600      	movs	r6, #0
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	d109      	bne.n	8007b3c <__libc_init_array+0x24>
 8007b28:	4d0b      	ldr	r5, [pc, #44]	; (8007b58 <__libc_init_array+0x40>)
 8007b2a:	4c0c      	ldr	r4, [pc, #48]	; (8007b5c <__libc_init_array+0x44>)
 8007b2c:	f000 fcf8 	bl	8008520 <_init>
 8007b30:	1b64      	subs	r4, r4, r5
 8007b32:	10a4      	asrs	r4, r4, #2
 8007b34:	2600      	movs	r6, #0
 8007b36:	42a6      	cmp	r6, r4
 8007b38:	d105      	bne.n	8007b46 <__libc_init_array+0x2e>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b40:	4798      	blx	r3
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7ee      	b.n	8007b24 <__libc_init_array+0xc>
 8007b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4a:	4798      	blx	r3
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	e7f2      	b.n	8007b36 <__libc_init_array+0x1e>
 8007b50:	08008814 	.word	0x08008814
 8007b54:	08008814 	.word	0x08008814
 8007b58:	08008814 	.word	0x08008814
 8007b5c:	08008818 	.word	0x08008818

08007b60 <__retarget_lock_acquire_recursive>:
 8007b60:	4770      	bx	lr

08007b62 <__retarget_lock_release_recursive>:
 8007b62:	4770      	bx	lr

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <memset>:
 8007b80:	4402      	add	r2, r0
 8007b82:	4603      	mov	r3, r0
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d100      	bne.n	8007b8a <memset+0xa>
 8007b88:	4770      	bx	lr
 8007b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8e:	e7f9      	b.n	8007b84 <memset+0x4>

08007b90 <sbrk_aligned>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4e0e      	ldr	r6, [pc, #56]	; (8007bcc <sbrk_aligned+0x3c>)
 8007b94:	460c      	mov	r4, r1
 8007b96:	6831      	ldr	r1, [r6, #0]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b911      	cbnz	r1, 8007ba2 <sbrk_aligned+0x12>
 8007b9c:	f000 f8f6 	bl	8007d8c <_sbrk_r>
 8007ba0:	6030      	str	r0, [r6, #0]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f8f1 	bl	8007d8c <_sbrk_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d00a      	beq.n	8007bc4 <sbrk_aligned+0x34>
 8007bae:	1cc4      	adds	r4, r0, #3
 8007bb0:	f024 0403 	bic.w	r4, r4, #3
 8007bb4:	42a0      	cmp	r0, r4
 8007bb6:	d007      	beq.n	8007bc8 <sbrk_aligned+0x38>
 8007bb8:	1a21      	subs	r1, r4, r0
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 f8e6 	bl	8007d8c <_sbrk_r>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d101      	bne.n	8007bc8 <sbrk_aligned+0x38>
 8007bc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	20004ca8 	.word	0x20004ca8

08007bd0 <_malloc_r>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	1ccd      	adds	r5, r1, #3
 8007bd6:	f025 0503 	bic.w	r5, r5, #3
 8007bda:	3508      	adds	r5, #8
 8007bdc:	2d0c      	cmp	r5, #12
 8007bde:	bf38      	it	cc
 8007be0:	250c      	movcc	r5, #12
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	4607      	mov	r7, r0
 8007be6:	db01      	blt.n	8007bec <_malloc_r+0x1c>
 8007be8:	42a9      	cmp	r1, r5
 8007bea:	d905      	bls.n	8007bf8 <_malloc_r+0x28>
 8007bec:	230c      	movs	r3, #12
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	4e2e      	ldr	r6, [pc, #184]	; (8007cb4 <_malloc_r+0xe4>)
 8007bfa:	f000 f8f7 	bl	8007dec <__malloc_lock>
 8007bfe:	6833      	ldr	r3, [r6, #0]
 8007c00:	461c      	mov	r4, r3
 8007c02:	bb34      	cbnz	r4, 8007c52 <_malloc_r+0x82>
 8007c04:	4629      	mov	r1, r5
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff ffc2 	bl	8007b90 <sbrk_aligned>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	4604      	mov	r4, r0
 8007c10:	d14d      	bne.n	8007cae <_malloc_r+0xde>
 8007c12:	6834      	ldr	r4, [r6, #0]
 8007c14:	4626      	mov	r6, r4
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d140      	bne.n	8007c9c <_malloc_r+0xcc>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4638      	mov	r0, r7
 8007c20:	eb04 0803 	add.w	r8, r4, r3
 8007c24:	f000 f8b2 	bl	8007d8c <_sbrk_r>
 8007c28:	4580      	cmp	r8, r0
 8007c2a:	d13a      	bne.n	8007ca2 <_malloc_r+0xd2>
 8007c2c:	6821      	ldr	r1, [r4, #0]
 8007c2e:	3503      	adds	r5, #3
 8007c30:	1a6d      	subs	r5, r5, r1
 8007c32:	f025 0503 	bic.w	r5, r5, #3
 8007c36:	3508      	adds	r5, #8
 8007c38:	2d0c      	cmp	r5, #12
 8007c3a:	bf38      	it	cc
 8007c3c:	250c      	movcc	r5, #12
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ffa5 	bl	8007b90 <sbrk_aligned>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d02b      	beq.n	8007ca2 <_malloc_r+0xd2>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	442b      	add	r3, r5
 8007c4e:	6023      	str	r3, [r4, #0]
 8007c50:	e00e      	b.n	8007c70 <_malloc_r+0xa0>
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	1b52      	subs	r2, r2, r5
 8007c56:	d41e      	bmi.n	8007c96 <_malloc_r+0xc6>
 8007c58:	2a0b      	cmp	r2, #11
 8007c5a:	d916      	bls.n	8007c8a <_malloc_r+0xba>
 8007c5c:	1961      	adds	r1, r4, r5
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	bf18      	it	ne
 8007c64:	6059      	strne	r1, [r3, #4]
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	bf08      	it	eq
 8007c6a:	6031      	streq	r1, [r6, #0]
 8007c6c:	5162      	str	r2, [r4, r5]
 8007c6e:	604b      	str	r3, [r1, #4]
 8007c70:	4638      	mov	r0, r7
 8007c72:	f104 060b 	add.w	r6, r4, #11
 8007c76:	f000 f8bf 	bl	8007df8 <__malloc_unlock>
 8007c7a:	f026 0607 	bic.w	r6, r6, #7
 8007c7e:	1d23      	adds	r3, r4, #4
 8007c80:	1af2      	subs	r2, r6, r3
 8007c82:	d0b6      	beq.n	8007bf2 <_malloc_r+0x22>
 8007c84:	1b9b      	subs	r3, r3, r6
 8007c86:	50a3      	str	r3, [r4, r2]
 8007c88:	e7b3      	b.n	8007bf2 <_malloc_r+0x22>
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	bf0c      	ite	eq
 8007c90:	6032      	streq	r2, [r6, #0]
 8007c92:	605a      	strne	r2, [r3, #4]
 8007c94:	e7ec      	b.n	8007c70 <_malloc_r+0xa0>
 8007c96:	4623      	mov	r3, r4
 8007c98:	6864      	ldr	r4, [r4, #4]
 8007c9a:	e7b2      	b.n	8007c02 <_malloc_r+0x32>
 8007c9c:	4634      	mov	r4, r6
 8007c9e:	6876      	ldr	r6, [r6, #4]
 8007ca0:	e7b9      	b.n	8007c16 <_malloc_r+0x46>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	603b      	str	r3, [r7, #0]
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f000 f8a6 	bl	8007df8 <__malloc_unlock>
 8007cac:	e7a1      	b.n	8007bf2 <_malloc_r+0x22>
 8007cae:	6025      	str	r5, [r4, #0]
 8007cb0:	e7de      	b.n	8007c70 <_malloc_r+0xa0>
 8007cb2:	bf00      	nop
 8007cb4:	20004ca4 	.word	0x20004ca4

08007cb8 <cleanup_glue>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	460c      	mov	r4, r1
 8007cbc:	6809      	ldr	r1, [r1, #0]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	b109      	cbz	r1, 8007cc6 <cleanup_glue+0xe>
 8007cc2:	f7ff fff9 	bl	8007cb8 <cleanup_glue>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cce:	f000 b899 	b.w	8007e04 <_free_r>
	...

08007cd4 <_reclaim_reent>:
 8007cd4:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <_reclaim_reent+0xb4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4283      	cmp	r3, r0
 8007cda:	b570      	push	{r4, r5, r6, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	d051      	beq.n	8007d84 <_reclaim_reent+0xb0>
 8007ce0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ce2:	b143      	cbz	r3, 8007cf6 <_reclaim_reent+0x22>
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d14a      	bne.n	8007d80 <_reclaim_reent+0xac>
 8007cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	b111      	cbz	r1, 8007cf6 <_reclaim_reent+0x22>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 f887 	bl	8007e04 <_free_r>
 8007cf6:	6961      	ldr	r1, [r4, #20]
 8007cf8:	b111      	cbz	r1, 8007d00 <_reclaim_reent+0x2c>
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 f882 	bl	8007e04 <_free_r>
 8007d00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d02:	b111      	cbz	r1, 8007d0a <_reclaim_reent+0x36>
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f87d 	bl	8007e04 <_free_r>
 8007d0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d0c:	b111      	cbz	r1, 8007d14 <_reclaim_reent+0x40>
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f878 	bl	8007e04 <_free_r>
 8007d14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d16:	b111      	cbz	r1, 8007d1e <_reclaim_reent+0x4a>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f873 	bl	8007e04 <_free_r>
 8007d1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d20:	b111      	cbz	r1, 8007d28 <_reclaim_reent+0x54>
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f86e 	bl	8007e04 <_free_r>
 8007d28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d2a:	b111      	cbz	r1, 8007d32 <_reclaim_reent+0x5e>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f869 	bl	8007e04 <_free_r>
 8007d32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d34:	b111      	cbz	r1, 8007d3c <_reclaim_reent+0x68>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f864 	bl	8007e04 <_free_r>
 8007d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d3e:	b111      	cbz	r1, 8007d46 <_reclaim_reent+0x72>
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f85f 	bl	8007e04 <_free_r>
 8007d46:	69a3      	ldr	r3, [r4, #24]
 8007d48:	b1e3      	cbz	r3, 8007d84 <_reclaim_reent+0xb0>
 8007d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	4798      	blx	r3
 8007d50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d52:	b1b9      	cbz	r1, 8007d84 <_reclaim_reent+0xb0>
 8007d54:	4620      	mov	r0, r4
 8007d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d5a:	f7ff bfad 	b.w	8007cb8 <cleanup_glue>
 8007d5e:	5949      	ldr	r1, [r1, r5]
 8007d60:	b941      	cbnz	r1, 8007d74 <_reclaim_reent+0xa0>
 8007d62:	3504      	adds	r5, #4
 8007d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d66:	2d80      	cmp	r5, #128	; 0x80
 8007d68:	68d9      	ldr	r1, [r3, #12]
 8007d6a:	d1f8      	bne.n	8007d5e <_reclaim_reent+0x8a>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 f849 	bl	8007e04 <_free_r>
 8007d72:	e7ba      	b.n	8007cea <_reclaim_reent+0x16>
 8007d74:	680e      	ldr	r6, [r1, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 f844 	bl	8007e04 <_free_r>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	e7ef      	b.n	8007d60 <_reclaim_reent+0x8c>
 8007d80:	2500      	movs	r5, #0
 8007d82:	e7ef      	b.n	8007d64 <_reclaim_reent+0x90>
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	bf00      	nop
 8007d88:	20000014 	.word	0x20000014

08007d8c <_sbrk_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	; (8007da8 <_sbrk_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 f9f2 	bl	8001180 <_sbrk>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_sbrk_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_sbrk_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20004cac 	.word	0x20004cac

08007dac <siprintf>:
 8007dac:	b40e      	push	{r1, r2, r3}
 8007dae:	b500      	push	{lr}
 8007db0:	b09c      	sub	sp, #112	; 0x70
 8007db2:	ab1d      	add	r3, sp, #116	; 0x74
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	9006      	str	r0, [sp, #24]
 8007db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dbc:	4809      	ldr	r0, [pc, #36]	; (8007de4 <siprintf+0x38>)
 8007dbe:	9107      	str	r1, [sp, #28]
 8007dc0:	9104      	str	r1, [sp, #16]
 8007dc2:	4909      	ldr	r1, [pc, #36]	; (8007de8 <siprintf+0x3c>)
 8007dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	a902      	add	r1, sp, #8
 8007dd0:	f000 f8c0 	bl	8007f54 <_svfiprintf_r>
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	b01c      	add	sp, #112	; 0x70
 8007ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de0:	b003      	add	sp, #12
 8007de2:	4770      	bx	lr
 8007de4:	20000014 	.word	0x20000014
 8007de8:	ffff0208 	.word	0xffff0208

08007dec <__malloc_lock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__malloc_lock+0x8>)
 8007dee:	f7ff beb7 	b.w	8007b60 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20004ca0 	.word	0x20004ca0

08007df8 <__malloc_unlock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__malloc_unlock+0x8>)
 8007dfa:	f7ff beb2 	b.w	8007b62 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20004ca0 	.word	0x20004ca0

08007e04 <_free_r>:
 8007e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e06:	2900      	cmp	r1, #0
 8007e08:	d044      	beq.n	8007e94 <_free_r+0x90>
 8007e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0e:	9001      	str	r0, [sp, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f1a1 0404 	sub.w	r4, r1, #4
 8007e16:	bfb8      	it	lt
 8007e18:	18e4      	addlt	r4, r4, r3
 8007e1a:	f7ff ffe7 	bl	8007dec <__malloc_lock>
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <_free_r+0x94>)
 8007e20:	9801      	ldr	r0, [sp, #4]
 8007e22:	6813      	ldr	r3, [r2, #0]
 8007e24:	b933      	cbnz	r3, 8007e34 <_free_r+0x30>
 8007e26:	6063      	str	r3, [r4, #4]
 8007e28:	6014      	str	r4, [r2, #0]
 8007e2a:	b003      	add	sp, #12
 8007e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e30:	f7ff bfe2 	b.w	8007df8 <__malloc_unlock>
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d908      	bls.n	8007e4a <_free_r+0x46>
 8007e38:	6825      	ldr	r5, [r4, #0]
 8007e3a:	1961      	adds	r1, r4, r5
 8007e3c:	428b      	cmp	r3, r1
 8007e3e:	bf01      	itttt	eq
 8007e40:	6819      	ldreq	r1, [r3, #0]
 8007e42:	685b      	ldreq	r3, [r3, #4]
 8007e44:	1949      	addeq	r1, r1, r5
 8007e46:	6021      	streq	r1, [r4, #0]
 8007e48:	e7ed      	b.n	8007e26 <_free_r+0x22>
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	b10b      	cbz	r3, 8007e54 <_free_r+0x50>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d9fa      	bls.n	8007e4a <_free_r+0x46>
 8007e54:	6811      	ldr	r1, [r2, #0]
 8007e56:	1855      	adds	r5, r2, r1
 8007e58:	42a5      	cmp	r5, r4
 8007e5a:	d10b      	bne.n	8007e74 <_free_r+0x70>
 8007e5c:	6824      	ldr	r4, [r4, #0]
 8007e5e:	4421      	add	r1, r4
 8007e60:	1854      	adds	r4, r2, r1
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	6011      	str	r1, [r2, #0]
 8007e66:	d1e0      	bne.n	8007e2a <_free_r+0x26>
 8007e68:	681c      	ldr	r4, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	6053      	str	r3, [r2, #4]
 8007e6e:	4421      	add	r1, r4
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	e7da      	b.n	8007e2a <_free_r+0x26>
 8007e74:	d902      	bls.n	8007e7c <_free_r+0x78>
 8007e76:	230c      	movs	r3, #12
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	e7d6      	b.n	8007e2a <_free_r+0x26>
 8007e7c:	6825      	ldr	r5, [r4, #0]
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	428b      	cmp	r3, r1
 8007e82:	bf04      	itt	eq
 8007e84:	6819      	ldreq	r1, [r3, #0]
 8007e86:	685b      	ldreq	r3, [r3, #4]
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	bf04      	itt	eq
 8007e8c:	1949      	addeq	r1, r1, r5
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	6054      	str	r4, [r2, #4]
 8007e92:	e7ca      	b.n	8007e2a <_free_r+0x26>
 8007e94:	b003      	add	sp, #12
 8007e96:	bd30      	pop	{r4, r5, pc}
 8007e98:	20004ca4 	.word	0x20004ca4

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	429e      	cmp	r6, r3
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	461f      	mov	r7, r3
 8007eac:	d838      	bhi.n	8007f20 <__ssputs_r+0x84>
 8007eae:	898a      	ldrh	r2, [r1, #12]
 8007eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb4:	d032      	beq.n	8007f1c <__ssputs_r+0x80>
 8007eb6:	6825      	ldr	r5, [r4, #0]
 8007eb8:	6909      	ldr	r1, [r1, #16]
 8007eba:	eba5 0901 	sub.w	r9, r5, r1
 8007ebe:	6965      	ldr	r5, [r4, #20]
 8007ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec8:	3301      	adds	r3, #1
 8007eca:	444b      	add	r3, r9
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	bf38      	it	cc
 8007ed2:	461d      	movcc	r5, r3
 8007ed4:	0553      	lsls	r3, r2, #21
 8007ed6:	d531      	bpl.n	8007f3c <__ssputs_r+0xa0>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7ff fe79 	bl	8007bd0 <_malloc_r>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b950      	cbnz	r0, 8007ef8 <__ssputs_r+0x5c>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	f8ca 3000 	str.w	r3, [sl]
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	6921      	ldr	r1, [r4, #16]
 8007efa:	464a      	mov	r2, r9
 8007efc:	f7ff fe32 	bl	8007b64 <memcpy>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	6126      	str	r6, [r4, #16]
 8007f0e:	6165      	str	r5, [r4, #20]
 8007f10:	444e      	add	r6, r9
 8007f12:	eba5 0509 	sub.w	r5, r5, r9
 8007f16:	6026      	str	r6, [r4, #0]
 8007f18:	60a5      	str	r5, [r4, #8]
 8007f1a:	463e      	mov	r6, r7
 8007f1c:	42be      	cmp	r6, r7
 8007f1e:	d900      	bls.n	8007f22 <__ssputs_r+0x86>
 8007f20:	463e      	mov	r6, r7
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	4632      	mov	r2, r6
 8007f26:	4641      	mov	r1, r8
 8007f28:	f000 faa8 	bl	800847c <memmove>
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	1b9b      	subs	r3, r3, r6
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	4433      	add	r3, r6
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e7db      	b.n	8007ef4 <__ssputs_r+0x58>
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	f000 fab7 	bl	80084b0 <_realloc_r>
 8007f42:	4606      	mov	r6, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1e1      	bne.n	8007f0c <__ssputs_r+0x70>
 8007f48:	6921      	ldr	r1, [r4, #16]
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	f7ff ff5a 	bl	8007e04 <_free_r>
 8007f50:	e7c7      	b.n	8007ee2 <__ssputs_r+0x46>
	...

08007f54 <_svfiprintf_r>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	4698      	mov	r8, r3
 8007f5a:	898b      	ldrh	r3, [r1, #12]
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	b09d      	sub	sp, #116	; 0x74
 8007f60:	4607      	mov	r7, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	d50e      	bpl.n	8007f86 <_svfiprintf_r+0x32>
 8007f68:	690b      	ldr	r3, [r1, #16]
 8007f6a:	b963      	cbnz	r3, 8007f86 <_svfiprintf_r+0x32>
 8007f6c:	2140      	movs	r1, #64	; 0x40
 8007f6e:	f7ff fe2f 	bl	8007bd0 <_malloc_r>
 8007f72:	6028      	str	r0, [r5, #0]
 8007f74:	6128      	str	r0, [r5, #16]
 8007f76:	b920      	cbnz	r0, 8007f82 <_svfiprintf_r+0x2e>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f80:	e0d1      	b.n	8008126 <_svfiprintf_r+0x1d2>
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	616b      	str	r3, [r5, #20]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	2320      	movs	r3, #32
 8007f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f94:	2330      	movs	r3, #48	; 0x30
 8007f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008140 <_svfiprintf_r+0x1ec>
 8007f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9e:	f04f 0901 	mov.w	r9, #1
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	469a      	mov	sl, r3
 8007fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007faa:	b10a      	cbz	r2, 8007fb0 <_svfiprintf_r+0x5c>
 8007fac:	2a25      	cmp	r2, #37	; 0x25
 8007fae:	d1f9      	bne.n	8007fa4 <_svfiprintf_r+0x50>
 8007fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb4:	d00b      	beq.n	8007fce <_svfiprintf_r+0x7a>
 8007fb6:	465b      	mov	r3, fp
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff ff6d 	bl	8007e9c <__ssputs_r>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f000 80aa 	beq.w	800811c <_svfiprintf_r+0x1c8>
 8007fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fca:	445a      	add	r2, fp
 8007fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80a2 	beq.w	800811c <_svfiprintf_r+0x1c8>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe2:	f10a 0a01 	add.w	sl, sl, #1
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fee:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff0:	4654      	mov	r4, sl
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	4851      	ldr	r0, [pc, #324]	; (8008140 <_svfiprintf_r+0x1ec>)
 8007ffa:	f7f8 f8f1 	bl	80001e0 <memchr>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	b9d8      	cbnz	r0, 800803a <_svfiprintf_r+0xe6>
 8008002:	06d0      	lsls	r0, r2, #27
 8008004:	bf44      	itt	mi
 8008006:	2320      	movmi	r3, #32
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800c:	0711      	lsls	r1, r2, #28
 800800e:	bf44      	itt	mi
 8008010:	232b      	movmi	r3, #43	; 0x2b
 8008012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008016:	f89a 3000 	ldrb.w	r3, [sl]
 800801a:	2b2a      	cmp	r3, #42	; 0x2a
 800801c:	d015      	beq.n	800804a <_svfiprintf_r+0xf6>
 800801e:	9a07      	ldr	r2, [sp, #28]
 8008020:	4654      	mov	r4, sl
 8008022:	2000      	movs	r0, #0
 8008024:	f04f 0c0a 	mov.w	ip, #10
 8008028:	4621      	mov	r1, r4
 800802a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802e:	3b30      	subs	r3, #48	; 0x30
 8008030:	2b09      	cmp	r3, #9
 8008032:	d94e      	bls.n	80080d2 <_svfiprintf_r+0x17e>
 8008034:	b1b0      	cbz	r0, 8008064 <_svfiprintf_r+0x110>
 8008036:	9207      	str	r2, [sp, #28]
 8008038:	e014      	b.n	8008064 <_svfiprintf_r+0x110>
 800803a:	eba0 0308 	sub.w	r3, r0, r8
 800803e:	fa09 f303 	lsl.w	r3, r9, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	46a2      	mov	sl, r4
 8008048:	e7d2      	b.n	8007ff0 <_svfiprintf_r+0x9c>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	1d19      	adds	r1, r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	9103      	str	r1, [sp, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	bfbb      	ittet	lt
 8008056:	425b      	neglt	r3, r3
 8008058:	f042 0202 	orrlt.w	r2, r2, #2
 800805c:	9307      	strge	r3, [sp, #28]
 800805e:	9307      	strlt	r3, [sp, #28]
 8008060:	bfb8      	it	lt
 8008062:	9204      	strlt	r2, [sp, #16]
 8008064:	7823      	ldrb	r3, [r4, #0]
 8008066:	2b2e      	cmp	r3, #46	; 0x2e
 8008068:	d10c      	bne.n	8008084 <_svfiprintf_r+0x130>
 800806a:	7863      	ldrb	r3, [r4, #1]
 800806c:	2b2a      	cmp	r3, #42	; 0x2a
 800806e:	d135      	bne.n	80080dc <_svfiprintf_r+0x188>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	1d1a      	adds	r2, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9203      	str	r2, [sp, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfb8      	it	lt
 800807c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008080:	3402      	adds	r4, #2
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008150 <_svfiprintf_r+0x1fc>
 8008088:	7821      	ldrb	r1, [r4, #0]
 800808a:	2203      	movs	r2, #3
 800808c:	4650      	mov	r0, sl
 800808e:	f7f8 f8a7 	bl	80001e0 <memchr>
 8008092:	b140      	cbz	r0, 80080a6 <_svfiprintf_r+0x152>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	eba0 000a 	sub.w	r0, r0, sl
 800809a:	fa03 f000 	lsl.w	r0, r3, r0
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	4303      	orrs	r3, r0
 80080a2:	3401      	adds	r4, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080aa:	4826      	ldr	r0, [pc, #152]	; (8008144 <_svfiprintf_r+0x1f0>)
 80080ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080b0:	2206      	movs	r2, #6
 80080b2:	f7f8 f895 	bl	80001e0 <memchr>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d038      	beq.n	800812c <_svfiprintf_r+0x1d8>
 80080ba:	4b23      	ldr	r3, [pc, #140]	; (8008148 <_svfiprintf_r+0x1f4>)
 80080bc:	bb1b      	cbnz	r3, 8008106 <_svfiprintf_r+0x1b2>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	3307      	adds	r3, #7
 80080c2:	f023 0307 	bic.w	r3, r3, #7
 80080c6:	3308      	adds	r3, #8
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080cc:	4433      	add	r3, r6
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
 80080d0:	e767      	b.n	8007fa2 <_svfiprintf_r+0x4e>
 80080d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d6:	460c      	mov	r4, r1
 80080d8:	2001      	movs	r0, #1
 80080da:	e7a5      	b.n	8008028 <_svfiprintf_r+0xd4>
 80080dc:	2300      	movs	r3, #0
 80080de:	3401      	adds	r4, #1
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	4619      	mov	r1, r3
 80080e4:	f04f 0c0a 	mov.w	ip, #10
 80080e8:	4620      	mov	r0, r4
 80080ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ee:	3a30      	subs	r2, #48	; 0x30
 80080f0:	2a09      	cmp	r2, #9
 80080f2:	d903      	bls.n	80080fc <_svfiprintf_r+0x1a8>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c5      	beq.n	8008084 <_svfiprintf_r+0x130>
 80080f8:	9105      	str	r1, [sp, #20]
 80080fa:	e7c3      	b.n	8008084 <_svfiprintf_r+0x130>
 80080fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008100:	4604      	mov	r4, r0
 8008102:	2301      	movs	r3, #1
 8008104:	e7f0      	b.n	80080e8 <_svfiprintf_r+0x194>
 8008106:	ab03      	add	r3, sp, #12
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	462a      	mov	r2, r5
 800810c:	4b0f      	ldr	r3, [pc, #60]	; (800814c <_svfiprintf_r+0x1f8>)
 800810e:	a904      	add	r1, sp, #16
 8008110:	4638      	mov	r0, r7
 8008112:	f3af 8000 	nop.w
 8008116:	1c42      	adds	r2, r0, #1
 8008118:	4606      	mov	r6, r0
 800811a:	d1d6      	bne.n	80080ca <_svfiprintf_r+0x176>
 800811c:	89ab      	ldrh	r3, [r5, #12]
 800811e:	065b      	lsls	r3, r3, #25
 8008120:	f53f af2c 	bmi.w	8007f7c <_svfiprintf_r+0x28>
 8008124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008126:	b01d      	add	sp, #116	; 0x74
 8008128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812c:	ab03      	add	r3, sp, #12
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	462a      	mov	r2, r5
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <_svfiprintf_r+0x1f8>)
 8008134:	a904      	add	r1, sp, #16
 8008136:	4638      	mov	r0, r7
 8008138:	f000 f87a 	bl	8008230 <_printf_i>
 800813c:	e7eb      	b.n	8008116 <_svfiprintf_r+0x1c2>
 800813e:	bf00      	nop
 8008140:	080087d8 	.word	0x080087d8
 8008144:	080087e2 	.word	0x080087e2
 8008148:	00000000 	.word	0x00000000
 800814c:	08007e9d 	.word	0x08007e9d
 8008150:	080087de 	.word	0x080087de

08008154 <_printf_common>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	4616      	mov	r6, r2
 800815a:	4699      	mov	r9, r3
 800815c:	688a      	ldr	r2, [r1, #8]
 800815e:	690b      	ldr	r3, [r1, #16]
 8008160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008164:	4293      	cmp	r3, r2
 8008166:	bfb8      	it	lt
 8008168:	4613      	movlt	r3, r2
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008170:	4607      	mov	r7, r0
 8008172:	460c      	mov	r4, r1
 8008174:	b10a      	cbz	r2, 800817a <_printf_common+0x26>
 8008176:	3301      	adds	r3, #1
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	0699      	lsls	r1, r3, #26
 800817e:	bf42      	ittt	mi
 8008180:	6833      	ldrmi	r3, [r6, #0]
 8008182:	3302      	addmi	r3, #2
 8008184:	6033      	strmi	r3, [r6, #0]
 8008186:	6825      	ldr	r5, [r4, #0]
 8008188:	f015 0506 	ands.w	r5, r5, #6
 800818c:	d106      	bne.n	800819c <_printf_common+0x48>
 800818e:	f104 0a19 	add.w	sl, r4, #25
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	6832      	ldr	r2, [r6, #0]
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc26      	bgt.n	80081ea <_printf_common+0x96>
 800819c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081a0:	1e13      	subs	r3, r2, #0
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	bf18      	it	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	0692      	lsls	r2, r2, #26
 80081aa:	d42b      	bmi.n	8008204 <_printf_common+0xb0>
 80081ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d01e      	beq.n	80081f8 <_printf_common+0xa4>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	68e5      	ldr	r5, [r4, #12]
 80081be:	6832      	ldr	r2, [r6, #0]
 80081c0:	f003 0306 	and.w	r3, r3, #6
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	bf08      	it	eq
 80081c8:	1aad      	subeq	r5, r5, r2
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	6922      	ldr	r2, [r4, #16]
 80081ce:	bf0c      	ite	eq
 80081d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d4:	2500      	movne	r5, #0
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bfc4      	itt	gt
 80081da:	1a9b      	subgt	r3, r3, r2
 80081dc:	18ed      	addgt	r5, r5, r3
 80081de:	2600      	movs	r6, #0
 80081e0:	341a      	adds	r4, #26
 80081e2:	42b5      	cmp	r5, r6
 80081e4:	d11a      	bne.n	800821c <_printf_common+0xc8>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e008      	b.n	80081fc <_printf_common+0xa8>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4652      	mov	r2, sl
 80081ee:	4649      	mov	r1, r9
 80081f0:	4638      	mov	r0, r7
 80081f2:	47c0      	blx	r8
 80081f4:	3001      	adds	r0, #1
 80081f6:	d103      	bne.n	8008200 <_printf_common+0xac>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008200:	3501      	adds	r5, #1
 8008202:	e7c6      	b.n	8008192 <_printf_common+0x3e>
 8008204:	18e1      	adds	r1, r4, r3
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	2030      	movs	r0, #48	; 0x30
 800820a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800820e:	4422      	add	r2, r4
 8008210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008218:	3302      	adds	r3, #2
 800821a:	e7c7      	b.n	80081ac <_printf_common+0x58>
 800821c:	2301      	movs	r3, #1
 800821e:	4622      	mov	r2, r4
 8008220:	4649      	mov	r1, r9
 8008222:	4638      	mov	r0, r7
 8008224:	47c0      	blx	r8
 8008226:	3001      	adds	r0, #1
 8008228:	d0e6      	beq.n	80081f8 <_printf_common+0xa4>
 800822a:	3601      	adds	r6, #1
 800822c:	e7d9      	b.n	80081e2 <_printf_common+0x8e>
	...

08008230 <_printf_i>:
 8008230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	7e0f      	ldrb	r7, [r1, #24]
 8008236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008238:	2f78      	cmp	r7, #120	; 0x78
 800823a:	4691      	mov	r9, r2
 800823c:	4680      	mov	r8, r0
 800823e:	460c      	mov	r4, r1
 8008240:	469a      	mov	sl, r3
 8008242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008246:	d807      	bhi.n	8008258 <_printf_i+0x28>
 8008248:	2f62      	cmp	r7, #98	; 0x62
 800824a:	d80a      	bhi.n	8008262 <_printf_i+0x32>
 800824c:	2f00      	cmp	r7, #0
 800824e:	f000 80d8 	beq.w	8008402 <_printf_i+0x1d2>
 8008252:	2f58      	cmp	r7, #88	; 0x58
 8008254:	f000 80a3 	beq.w	800839e <_printf_i+0x16e>
 8008258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800825c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008260:	e03a      	b.n	80082d8 <_printf_i+0xa8>
 8008262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008266:	2b15      	cmp	r3, #21
 8008268:	d8f6      	bhi.n	8008258 <_printf_i+0x28>
 800826a:	a101      	add	r1, pc, #4	; (adr r1, 8008270 <_printf_i+0x40>)
 800826c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008270:	080082c9 	.word	0x080082c9
 8008274:	080082dd 	.word	0x080082dd
 8008278:	08008259 	.word	0x08008259
 800827c:	08008259 	.word	0x08008259
 8008280:	08008259 	.word	0x08008259
 8008284:	08008259 	.word	0x08008259
 8008288:	080082dd 	.word	0x080082dd
 800828c:	08008259 	.word	0x08008259
 8008290:	08008259 	.word	0x08008259
 8008294:	08008259 	.word	0x08008259
 8008298:	08008259 	.word	0x08008259
 800829c:	080083e9 	.word	0x080083e9
 80082a0:	0800830d 	.word	0x0800830d
 80082a4:	080083cb 	.word	0x080083cb
 80082a8:	08008259 	.word	0x08008259
 80082ac:	08008259 	.word	0x08008259
 80082b0:	0800840b 	.word	0x0800840b
 80082b4:	08008259 	.word	0x08008259
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008259 	.word	0x08008259
 80082c0:	08008259 	.word	0x08008259
 80082c4:	080083d3 	.word	0x080083d3
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	602a      	str	r2, [r5, #0]
 80082d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d8:	2301      	movs	r3, #1
 80082da:	e0a3      	b.n	8008424 <_printf_i+0x1f4>
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	6829      	ldr	r1, [r5, #0]
 80082e0:	0606      	lsls	r6, r0, #24
 80082e2:	f101 0304 	add.w	r3, r1, #4
 80082e6:	d50a      	bpl.n	80082fe <_printf_i+0xce>
 80082e8:	680e      	ldr	r6, [r1, #0]
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	da03      	bge.n	80082f8 <_printf_i+0xc8>
 80082f0:	232d      	movs	r3, #45	; 0x2d
 80082f2:	4276      	negs	r6, r6
 80082f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f8:	485e      	ldr	r0, [pc, #376]	; (8008474 <_printf_i+0x244>)
 80082fa:	230a      	movs	r3, #10
 80082fc:	e019      	b.n	8008332 <_printf_i+0x102>
 80082fe:	680e      	ldr	r6, [r1, #0]
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008306:	bf18      	it	ne
 8008308:	b236      	sxthne	r6, r6
 800830a:	e7ef      	b.n	80082ec <_printf_i+0xbc>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	1d19      	adds	r1, r3, #4
 8008312:	6029      	str	r1, [r5, #0]
 8008314:	0601      	lsls	r1, r0, #24
 8008316:	d501      	bpl.n	800831c <_printf_i+0xec>
 8008318:	681e      	ldr	r6, [r3, #0]
 800831a:	e002      	b.n	8008322 <_printf_i+0xf2>
 800831c:	0646      	lsls	r6, r0, #25
 800831e:	d5fb      	bpl.n	8008318 <_printf_i+0xe8>
 8008320:	881e      	ldrh	r6, [r3, #0]
 8008322:	4854      	ldr	r0, [pc, #336]	; (8008474 <_printf_i+0x244>)
 8008324:	2f6f      	cmp	r7, #111	; 0x6f
 8008326:	bf0c      	ite	eq
 8008328:	2308      	moveq	r3, #8
 800832a:	230a      	movne	r3, #10
 800832c:	2100      	movs	r1, #0
 800832e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008332:	6865      	ldr	r5, [r4, #4]
 8008334:	60a5      	str	r5, [r4, #8]
 8008336:	2d00      	cmp	r5, #0
 8008338:	bfa2      	ittt	ge
 800833a:	6821      	ldrge	r1, [r4, #0]
 800833c:	f021 0104 	bicge.w	r1, r1, #4
 8008340:	6021      	strge	r1, [r4, #0]
 8008342:	b90e      	cbnz	r6, 8008348 <_printf_i+0x118>
 8008344:	2d00      	cmp	r5, #0
 8008346:	d04d      	beq.n	80083e4 <_printf_i+0x1b4>
 8008348:	4615      	mov	r5, r2
 800834a:	fbb6 f1f3 	udiv	r1, r6, r3
 800834e:	fb03 6711 	mls	r7, r3, r1, r6
 8008352:	5dc7      	ldrb	r7, [r0, r7]
 8008354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008358:	4637      	mov	r7, r6
 800835a:	42bb      	cmp	r3, r7
 800835c:	460e      	mov	r6, r1
 800835e:	d9f4      	bls.n	800834a <_printf_i+0x11a>
 8008360:	2b08      	cmp	r3, #8
 8008362:	d10b      	bne.n	800837c <_printf_i+0x14c>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	07de      	lsls	r6, r3, #31
 8008368:	d508      	bpl.n	800837c <_printf_i+0x14c>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	6861      	ldr	r1, [r4, #4]
 800836e:	4299      	cmp	r1, r3
 8008370:	bfde      	ittt	le
 8008372:	2330      	movle	r3, #48	; 0x30
 8008374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008378:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800837c:	1b52      	subs	r2, r2, r5
 800837e:	6122      	str	r2, [r4, #16]
 8008380:	f8cd a000 	str.w	sl, [sp]
 8008384:	464b      	mov	r3, r9
 8008386:	aa03      	add	r2, sp, #12
 8008388:	4621      	mov	r1, r4
 800838a:	4640      	mov	r0, r8
 800838c:	f7ff fee2 	bl	8008154 <_printf_common>
 8008390:	3001      	adds	r0, #1
 8008392:	d14c      	bne.n	800842e <_printf_i+0x1fe>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008398:	b004      	add	sp, #16
 800839a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839e:	4835      	ldr	r0, [pc, #212]	; (8008474 <_printf_i+0x244>)
 80083a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083a4:	6829      	ldr	r1, [r5, #0]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083ac:	6029      	str	r1, [r5, #0]
 80083ae:	061d      	lsls	r5, r3, #24
 80083b0:	d514      	bpl.n	80083dc <_printf_i+0x1ac>
 80083b2:	07df      	lsls	r7, r3, #31
 80083b4:	bf44      	itt	mi
 80083b6:	f043 0320 	orrmi.w	r3, r3, #32
 80083ba:	6023      	strmi	r3, [r4, #0]
 80083bc:	b91e      	cbnz	r6, 80083c6 <_printf_i+0x196>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f023 0320 	bic.w	r3, r3, #32
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	2310      	movs	r3, #16
 80083c8:	e7b0      	b.n	800832c <_printf_i+0xfc>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	f043 0320 	orr.w	r3, r3, #32
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	2378      	movs	r3, #120	; 0x78
 80083d4:	4828      	ldr	r0, [pc, #160]	; (8008478 <_printf_i+0x248>)
 80083d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083da:	e7e3      	b.n	80083a4 <_printf_i+0x174>
 80083dc:	0659      	lsls	r1, r3, #25
 80083de:	bf48      	it	mi
 80083e0:	b2b6      	uxthmi	r6, r6
 80083e2:	e7e6      	b.n	80083b2 <_printf_i+0x182>
 80083e4:	4615      	mov	r5, r2
 80083e6:	e7bb      	b.n	8008360 <_printf_i+0x130>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	6826      	ldr	r6, [r4, #0]
 80083ec:	6961      	ldr	r1, [r4, #20]
 80083ee:	1d18      	adds	r0, r3, #4
 80083f0:	6028      	str	r0, [r5, #0]
 80083f2:	0635      	lsls	r5, r6, #24
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	d501      	bpl.n	80083fc <_printf_i+0x1cc>
 80083f8:	6019      	str	r1, [r3, #0]
 80083fa:	e002      	b.n	8008402 <_printf_i+0x1d2>
 80083fc:	0670      	lsls	r0, r6, #25
 80083fe:	d5fb      	bpl.n	80083f8 <_printf_i+0x1c8>
 8008400:	8019      	strh	r1, [r3, #0]
 8008402:	2300      	movs	r3, #0
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	4615      	mov	r5, r2
 8008408:	e7ba      	b.n	8008380 <_printf_i+0x150>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	1d1a      	adds	r2, r3, #4
 800840e:	602a      	str	r2, [r5, #0]
 8008410:	681d      	ldr	r5, [r3, #0]
 8008412:	6862      	ldr	r2, [r4, #4]
 8008414:	2100      	movs	r1, #0
 8008416:	4628      	mov	r0, r5
 8008418:	f7f7 fee2 	bl	80001e0 <memchr>
 800841c:	b108      	cbz	r0, 8008422 <_printf_i+0x1f2>
 800841e:	1b40      	subs	r0, r0, r5
 8008420:	6060      	str	r0, [r4, #4]
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	2300      	movs	r3, #0
 8008428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842c:	e7a8      	b.n	8008380 <_printf_i+0x150>
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	462a      	mov	r2, r5
 8008432:	4649      	mov	r1, r9
 8008434:	4640      	mov	r0, r8
 8008436:	47d0      	blx	sl
 8008438:	3001      	adds	r0, #1
 800843a:	d0ab      	beq.n	8008394 <_printf_i+0x164>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	079b      	lsls	r3, r3, #30
 8008440:	d413      	bmi.n	800846a <_printf_i+0x23a>
 8008442:	68e0      	ldr	r0, [r4, #12]
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	4298      	cmp	r0, r3
 8008448:	bfb8      	it	lt
 800844a:	4618      	movlt	r0, r3
 800844c:	e7a4      	b.n	8008398 <_printf_i+0x168>
 800844e:	2301      	movs	r3, #1
 8008450:	4632      	mov	r2, r6
 8008452:	4649      	mov	r1, r9
 8008454:	4640      	mov	r0, r8
 8008456:	47d0      	blx	sl
 8008458:	3001      	adds	r0, #1
 800845a:	d09b      	beq.n	8008394 <_printf_i+0x164>
 800845c:	3501      	adds	r5, #1
 800845e:	68e3      	ldr	r3, [r4, #12]
 8008460:	9903      	ldr	r1, [sp, #12]
 8008462:	1a5b      	subs	r3, r3, r1
 8008464:	42ab      	cmp	r3, r5
 8008466:	dcf2      	bgt.n	800844e <_printf_i+0x21e>
 8008468:	e7eb      	b.n	8008442 <_printf_i+0x212>
 800846a:	2500      	movs	r5, #0
 800846c:	f104 0619 	add.w	r6, r4, #25
 8008470:	e7f5      	b.n	800845e <_printf_i+0x22e>
 8008472:	bf00      	nop
 8008474:	080087e9 	.word	0x080087e9
 8008478:	080087fa 	.word	0x080087fa

0800847c <memmove>:
 800847c:	4288      	cmp	r0, r1
 800847e:	b510      	push	{r4, lr}
 8008480:	eb01 0402 	add.w	r4, r1, r2
 8008484:	d902      	bls.n	800848c <memmove+0x10>
 8008486:	4284      	cmp	r4, r0
 8008488:	4623      	mov	r3, r4
 800848a:	d807      	bhi.n	800849c <memmove+0x20>
 800848c:	1e43      	subs	r3, r0, #1
 800848e:	42a1      	cmp	r1, r4
 8008490:	d008      	beq.n	80084a4 <memmove+0x28>
 8008492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800849a:	e7f8      	b.n	800848e <memmove+0x12>
 800849c:	4402      	add	r2, r0
 800849e:	4601      	mov	r1, r0
 80084a0:	428a      	cmp	r2, r1
 80084a2:	d100      	bne.n	80084a6 <memmove+0x2a>
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ae:	e7f7      	b.n	80084a0 <memmove+0x24>

080084b0 <_realloc_r>:
 80084b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b4:	4680      	mov	r8, r0
 80084b6:	4614      	mov	r4, r2
 80084b8:	460e      	mov	r6, r1
 80084ba:	b921      	cbnz	r1, 80084c6 <_realloc_r+0x16>
 80084bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c0:	4611      	mov	r1, r2
 80084c2:	f7ff bb85 	b.w	8007bd0 <_malloc_r>
 80084c6:	b92a      	cbnz	r2, 80084d4 <_realloc_r+0x24>
 80084c8:	f7ff fc9c 	bl	8007e04 <_free_r>
 80084cc:	4625      	mov	r5, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d4:	f000 f81b 	bl	800850e <_malloc_usable_size_r>
 80084d8:	4284      	cmp	r4, r0
 80084da:	4607      	mov	r7, r0
 80084dc:	d802      	bhi.n	80084e4 <_realloc_r+0x34>
 80084de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084e2:	d812      	bhi.n	800850a <_realloc_r+0x5a>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4640      	mov	r0, r8
 80084e8:	f7ff fb72 	bl	8007bd0 <_malloc_r>
 80084ec:	4605      	mov	r5, r0
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d0ed      	beq.n	80084ce <_realloc_r+0x1e>
 80084f2:	42bc      	cmp	r4, r7
 80084f4:	4622      	mov	r2, r4
 80084f6:	4631      	mov	r1, r6
 80084f8:	bf28      	it	cs
 80084fa:	463a      	movcs	r2, r7
 80084fc:	f7ff fb32 	bl	8007b64 <memcpy>
 8008500:	4631      	mov	r1, r6
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fc7e 	bl	8007e04 <_free_r>
 8008508:	e7e1      	b.n	80084ce <_realloc_r+0x1e>
 800850a:	4635      	mov	r5, r6
 800850c:	e7df      	b.n	80084ce <_realloc_r+0x1e>

0800850e <_malloc_usable_size_r>:
 800850e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008512:	1f18      	subs	r0, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	bfbc      	itt	lt
 8008518:	580b      	ldrlt	r3, [r1, r0]
 800851a:	18c0      	addlt	r0, r0, r3
 800851c:	4770      	bx	lr
	...

08008520 <_init>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	bf00      	nop
 8008524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008526:	bc08      	pop	{r3}
 8008528:	469e      	mov	lr, r3
 800852a:	4770      	bx	lr

0800852c <_fini>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	bf00      	nop
 8008530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008532:	bc08      	pop	{r3}
 8008534:	469e      	mov	lr, r3
 8008536:	4770      	bx	lr
